
lab3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003234  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08003344  08003344  00013344  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003374  08003374  00020060  2**0
                  CONTENTS
  4 .ARM          00000000  08003374  08003374  00020060  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003374  08003374  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003374  08003374  00013374  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003378  08003378  00013378  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  0800337c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000bc  20000060  080033dc  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000011c  080033dc  0002011c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .debug_info   000090b3  00000000  00000000  00020089  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a91  00000000  00000000  0002913c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a18  00000000  00000000  0002abd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000920  00000000  00000000  0002b5e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016928  00000000  00000000  0002bf08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ad4c  00000000  00000000  00042830  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000822c2  00000000  00000000  0004d57c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000cf83e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002930  00000000  00000000  000cf894  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000060 	.word	0x20000060
 800012c:	00000000 	.word	0x00000000
 8000130:	0800332c 	.word	0x0800332c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000064 	.word	0x20000064
 800014c:	0800332c 	.word	0x0800332c

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__aeabi_d2iz>:
 80008ec:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008f0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80008f4:	d215      	bcs.n	8000922 <__aeabi_d2iz+0x36>
 80008f6:	d511      	bpl.n	800091c <__aeabi_d2iz+0x30>
 80008f8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80008fc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000900:	d912      	bls.n	8000928 <__aeabi_d2iz+0x3c>
 8000902:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000906:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800090a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800090e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000912:	fa23 f002 	lsr.w	r0, r3, r2
 8000916:	bf18      	it	ne
 8000918:	4240      	negne	r0, r0
 800091a:	4770      	bx	lr
 800091c:	f04f 0000 	mov.w	r0, #0
 8000920:	4770      	bx	lr
 8000922:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000926:	d105      	bne.n	8000934 <__aeabi_d2iz+0x48>
 8000928:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 800092c:	bf08      	it	eq
 800092e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000932:	4770      	bx	lr
 8000934:	f04f 0000 	mov.w	r0, #0
 8000938:	4770      	bx	lr
 800093a:	bf00      	nop

0800093c <isButtonPressed>:
int normal_flag[NUM_OF_BUTTONS] = {0};
int long_flag[NUM_OF_BUTTONS] = {0};

int TimeOutForKeyPress[NUM_OF_BUTTONS] = {0};

int isButtonPressed(int index){
 800093c:	b480      	push	{r7}
 800093e:	b083      	sub	sp, #12
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
	if (normal_flag[index] == 1){
 8000944:	4a09      	ldr	r2, [pc, #36]	; (800096c <isButtonPressed+0x30>)
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800094c:	2b01      	cmp	r3, #1
 800094e:	d106      	bne.n	800095e <isButtonPressed+0x22>
		normal_flag[index] = 0;
 8000950:	4a06      	ldr	r2, [pc, #24]	; (800096c <isButtonPressed+0x30>)
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	2100      	movs	r1, #0
 8000956:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 800095a:	2301      	movs	r3, #1
 800095c:	e000      	b.n	8000960 <isButtonPressed+0x24>
	}
	return 0;
 800095e:	2300      	movs	r3, #0
}
 8000960:	4618      	mov	r0, r3
 8000962:	370c      	adds	r7, #12
 8000964:	46bd      	mov	sp, r7
 8000966:	bc80      	pop	{r7}
 8000968:	4770      	bx	lr
 800096a:	bf00      	nop
 800096c:	2000007c 	.word	0x2000007c

08000970 <subKeyProcess>:

void subKeyProcess(int index){
 8000970:	b480      	push	{r7}
 8000972:	b083      	sub	sp, #12
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
	normal_flag[index] = 1;
 8000978:	4a04      	ldr	r2, [pc, #16]	; (800098c <subKeyProcess+0x1c>)
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	2101      	movs	r1, #1
 800097e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8000982:	bf00      	nop
 8000984:	370c      	adds	r7, #12
 8000986:	46bd      	mov	sp, r7
 8000988:	bc80      	pop	{r7}
 800098a:	4770      	bx	lr
 800098c:	2000007c 	.word	0x2000007c

08000990 <getKeyInput>:

void getKeyInput() {
 8000990:	b580      	push	{r7, lr}
 8000992:	b082      	sub	sp, #8
 8000994:	af00      	add	r7, sp, #0
	for (int i = 0; i < NUM_OF_BUTTONS; i++) {
 8000996:	2300      	movs	r3, #0
 8000998:	607b      	str	r3, [r7, #4]
 800099a:	e0a6      	b.n	8000aea <getKeyInput+0x15a>
		KeyReg0[i] = KeyReg1[i];
 800099c:	4a57      	ldr	r2, [pc, #348]	; (8000afc <getKeyInput+0x16c>)
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80009a4:	4956      	ldr	r1, [pc, #344]	; (8000b00 <getKeyInput+0x170>)
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		KeyReg1[i] = KeyReg2[i];
 80009ac:	4a55      	ldr	r2, [pc, #340]	; (8000b04 <getKeyInput+0x174>)
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80009b4:	4951      	ldr	r1, [pc, #324]	; (8000afc <getKeyInput+0x16c>)
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		// Read signals from buttons
		if (i == 0) {
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d10a      	bne.n	80009d8 <getKeyInput+0x48>
			KeyReg2[i] = HAL_GPIO_ReadPin(BTN1_GPIO_Port, BTN1_Pin);
 80009c2:	2108      	movs	r1, #8
 80009c4:	4850      	ldr	r0, [pc, #320]	; (8000b08 <getKeyInput+0x178>)
 80009c6:	f001 fc79 	bl	80022bc <HAL_GPIO_ReadPin>
 80009ca:	4603      	mov	r3, r0
 80009cc:	4619      	mov	r1, r3
 80009ce:	4a4d      	ldr	r2, [pc, #308]	; (8000b04 <getKeyInput+0x174>)
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 80009d6:	e01a      	b.n	8000a0e <getKeyInput+0x7e>
		}
		else if (i == 1) {
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	2b01      	cmp	r3, #1
 80009dc:	d10a      	bne.n	80009f4 <getKeyInput+0x64>
			KeyReg2[i] = HAL_GPIO_ReadPin(BTN2_GPIO_Port, BTN2_Pin);
 80009de:	2110      	movs	r1, #16
 80009e0:	4849      	ldr	r0, [pc, #292]	; (8000b08 <getKeyInput+0x178>)
 80009e2:	f001 fc6b 	bl	80022bc <HAL_GPIO_ReadPin>
 80009e6:	4603      	mov	r3, r0
 80009e8:	4619      	mov	r1, r3
 80009ea:	4a46      	ldr	r2, [pc, #280]	; (8000b04 <getKeyInput+0x174>)
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 80009f2:	e00c      	b.n	8000a0e <getKeyInput+0x7e>
		}
		else if (i == 2) {
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	2b02      	cmp	r3, #2
 80009f8:	d109      	bne.n	8000a0e <getKeyInput+0x7e>
			KeyReg2[i] = HAL_GPIO_ReadPin(BTN3_GPIO_Port, BTN3_Pin);
 80009fa:	2120      	movs	r1, #32
 80009fc:	4842      	ldr	r0, [pc, #264]	; (8000b08 <getKeyInput+0x178>)
 80009fe:	f001 fc5d 	bl	80022bc <HAL_GPIO_ReadPin>
 8000a02:	4603      	mov	r3, r0
 8000a04:	4619      	mov	r1, r3
 8000a06:	4a3f      	ldr	r2, [pc, #252]	; (8000b04 <getKeyInput+0x174>)
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		}

		if ((KeyReg1[i] == KeyReg0[i]) && (KeyReg1[i] == KeyReg2[i])){
 8000a0e:	4a3b      	ldr	r2, [pc, #236]	; (8000afc <getKeyInput+0x16c>)
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000a16:	493a      	ldr	r1, [pc, #232]	; (8000b00 <getKeyInput+0x170>)
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000a1e:	429a      	cmp	r2, r3
 8000a20:	d159      	bne.n	8000ad6 <getKeyInput+0x146>
 8000a22:	4a36      	ldr	r2, [pc, #216]	; (8000afc <getKeyInput+0x16c>)
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000a2a:	4936      	ldr	r1, [pc, #216]	; (8000b04 <getKeyInput+0x174>)
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000a32:	429a      	cmp	r2, r3
 8000a34:	d14f      	bne.n	8000ad6 <getKeyInput+0x146>
			if (KeyReg3[i] != KeyReg2[i]){
 8000a36:	4a35      	ldr	r2, [pc, #212]	; (8000b0c <getKeyInput+0x17c>)
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000a3e:	4931      	ldr	r1, [pc, #196]	; (8000b04 <getKeyInput+0x174>)
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000a46:	429a      	cmp	r2, r3
 8000a48:	d02b      	beq.n	8000aa2 <getKeyInput+0x112>
				KeyReg3[i] = KeyReg2[i];
 8000a4a:	4a2e      	ldr	r2, [pc, #184]	; (8000b04 <getKeyInput+0x174>)
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000a52:	492e      	ldr	r1, [pc, #184]	; (8000b0c <getKeyInput+0x17c>)
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if (KeyReg2[i] == PRESSED_STATE){
 8000a5a:	4a2a      	ldr	r2, [pc, #168]	; (8000b04 <getKeyInput+0x174>)
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d13d      	bne.n	8000ae2 <getKeyInput+0x152>
					subKeyProcess(i);	// Set timer_flag[i] = 1;
 8000a66:	6878      	ldr	r0, [r7, #4]
 8000a68:	f7ff ff82 	bl	8000970 <subKeyProcess>
					if (long_flag[i] == 0) {
 8000a6c:	4a28      	ldr	r2, [pc, #160]	; (8000b10 <getKeyInput+0x180>)
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d10a      	bne.n	8000a8e <getKeyInput+0xfe>
						TimeOutForKeyPress[i] = 2000 / TIME_CYCLE;
 8000a78:	4b26      	ldr	r3, [pc, #152]	; (8000b14 <getKeyInput+0x184>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000a80:	fb92 f2f3 	sdiv	r2, r2, r3
 8000a84:	4924      	ldr	r1, [pc, #144]	; (8000b18 <getKeyInput+0x188>)
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if (KeyReg3[i] != KeyReg2[i]){
 8000a8c:	e029      	b.n	8000ae2 <getKeyInput+0x152>
					}
					else {
						TimeOutForKeyPress[i] = 250 / TIME_CYCLE;
 8000a8e:	4b21      	ldr	r3, [pc, #132]	; (8000b14 <getKeyInput+0x184>)
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	22fa      	movs	r2, #250	; 0xfa
 8000a94:	fb92 f2f3 	sdiv	r2, r2, r3
 8000a98:	491f      	ldr	r1, [pc, #124]	; (8000b18 <getKeyInput+0x188>)
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if (KeyReg3[i] != KeyReg2[i]){
 8000aa0:	e01f      	b.n	8000ae2 <getKeyInput+0x152>
					}
				}
			} else {
				TimeOutForKeyPress[i]--;
 8000aa2:	4a1d      	ldr	r2, [pc, #116]	; (8000b18 <getKeyInput+0x188>)
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000aaa:	1e5a      	subs	r2, r3, #1
 8000aac:	491a      	ldr	r1, [pc, #104]	; (8000b18 <getKeyInput+0x188>)
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if (TimeOutForKeyPress[i] == 0){
 8000ab4:	4a18      	ldr	r2, [pc, #96]	; (8000b18 <getKeyInput+0x188>)
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d110      	bne.n	8000ae2 <getKeyInput+0x152>
					KeyReg3[i] = NORMAL_STATE;
 8000ac0:	4a12      	ldr	r2, [pc, #72]	; (8000b0c <getKeyInput+0x17c>)
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	2101      	movs	r1, #1
 8000ac6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					long_flag[i] = 1;
 8000aca:	4a11      	ldr	r2, [pc, #68]	; (8000b10 <getKeyInput+0x180>)
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	2101      	movs	r1, #1
 8000ad0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			if (KeyReg3[i] != KeyReg2[i]){
 8000ad4:	e005      	b.n	8000ae2 <getKeyInput+0x152>
				}
			}
		}
		else {
			long_flag[i] = 0;
 8000ad6:	4a0e      	ldr	r2, [pc, #56]	; (8000b10 <getKeyInput+0x180>)
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	2100      	movs	r1, #0
 8000adc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000ae0:	e000      	b.n	8000ae4 <getKeyInput+0x154>
			if (KeyReg3[i] != KeyReg2[i]){
 8000ae2:	bf00      	nop
	for (int i = 0; i < NUM_OF_BUTTONS; i++) {
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	3301      	adds	r3, #1
 8000ae8:	607b      	str	r3, [r7, #4]
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	2b02      	cmp	r3, #2
 8000aee:	f77f af55 	ble.w	800099c <getKeyInput+0xc>
		}
	}
}
 8000af2:	bf00      	nop
 8000af4:	bf00      	nop
 8000af6:	3708      	adds	r7, #8
 8000af8:	46bd      	mov	sp, r7
 8000afa:	bd80      	pop	{r7, pc}
 8000afc:	2000000c 	.word	0x2000000c
 8000b00:	20000000 	.word	0x20000000
 8000b04:	20000018 	.word	0x20000018
 8000b08:	40010800 	.word	0x40010800
 8000b0c:	20000024 	.word	0x20000024
 8000b10:	20000088 	.word	0x20000088
 8000b14:	20000114 	.word	0x20000114
 8000b18:	20000094 	.word	0x20000094

08000b1c <display7SEG>:
#include "display7SEG.h"

void display7SEG(int num){
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b086      	sub	sp, #24
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
  	char led7seg[10] = {0xC0, 0xF9, 0xA4, 0xB0, 0x99, 0x92, 0x82, 0xF8, 0x80, 0x90};
 8000b24:	4a14      	ldr	r2, [pc, #80]	; (8000b78 <display7SEG+0x5c>)
 8000b26:	f107 0308 	add.w	r3, r7, #8
 8000b2a:	ca07      	ldmia	r2, {r0, r1, r2}
 8000b2c:	c303      	stmia	r3!, {r0, r1}
 8000b2e:	801a      	strh	r2, [r3, #0]
  	for (int i=0; i < 7; i++){
 8000b30:	2300      	movs	r3, #0
 8000b32:	617b      	str	r3, [r7, #20]
 8000b34:	e018      	b.n	8000b68 <display7SEG+0x4c>
  		HAL_GPIO_WritePin(GPIOB, SEG0_Pin<<i, (led7seg[num]>>i) & 1);
 8000b36:	2201      	movs	r2, #1
 8000b38:	697b      	ldr	r3, [r7, #20]
 8000b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b3e:	b299      	uxth	r1, r3
 8000b40:	f107 0208 	add.w	r2, r7, #8
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	4413      	add	r3, r2
 8000b48:	781b      	ldrb	r3, [r3, #0]
 8000b4a:	461a      	mov	r2, r3
 8000b4c:	697b      	ldr	r3, [r7, #20]
 8000b4e:	fa42 f303 	asr.w	r3, r2, r3
 8000b52:	b2db      	uxtb	r3, r3
 8000b54:	f003 0301 	and.w	r3, r3, #1
 8000b58:	b2db      	uxtb	r3, r3
 8000b5a:	461a      	mov	r2, r3
 8000b5c:	4807      	ldr	r0, [pc, #28]	; (8000b7c <display7SEG+0x60>)
 8000b5e:	f001 fbc4 	bl	80022ea <HAL_GPIO_WritePin>
  	for (int i=0; i < 7; i++){
 8000b62:	697b      	ldr	r3, [r7, #20]
 8000b64:	3301      	adds	r3, #1
 8000b66:	617b      	str	r3, [r7, #20]
 8000b68:	697b      	ldr	r3, [r7, #20]
 8000b6a:	2b06      	cmp	r3, #6
 8000b6c:	dde3      	ble.n	8000b36 <display7SEG+0x1a>
  	}
}
 8000b6e:	bf00      	nop
 8000b70:	bf00      	nop
 8000b72:	3718      	adds	r7, #24
 8000b74:	46bd      	mov	sp, r7
 8000b76:	bd80      	pop	{r7, pc}
 8000b78:	08003344 	.word	0x08003344
 8000b7c:	40010c00 	.word	0x40010c00

08000b80 <update7SEG>:

const int MAX_LED = 4;
int index_led = 0;
int led_buffer[4] = {1, 2, 3, 4};
void update7SEG(int index){
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b082      	sub	sp, #8
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
	display7SEG(led_buffer[index]);
 8000b88:	4a41      	ldr	r2, [pc, #260]	; (8000c90 <update7SEG+0x110>)
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b90:	4618      	mov	r0, r3
 8000b92:	f7ff ffc3 	bl	8000b1c <display7SEG>
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	2b03      	cmp	r3, #3
 8000b9a:	d873      	bhi.n	8000c84 <update7SEG+0x104>
 8000b9c:	a201      	add	r2, pc, #4	; (adr r2, 8000ba4 <update7SEG+0x24>)
 8000b9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ba2:	bf00      	nop
 8000ba4:	08000bb5 	.word	0x08000bb5
 8000ba8:	08000be9 	.word	0x08000be9
 8000bac:	08000c1d 	.word	0x08000c1d
 8000bb0:	08000c51 	.word	0x08000c51
	switch(index){
		case 0:
			// Display the first 7 SEG with led_buffer [0]
			index_led = 1;
 8000bb4:	4b37      	ldr	r3, [pc, #220]	; (8000c94 <update7SEG+0x114>)
 8000bb6:	2201      	movs	r2, #1
 8000bb8:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, RESET);
 8000bba:	2200      	movs	r2, #0
 8000bbc:	2140      	movs	r1, #64	; 0x40
 8000bbe:	4836      	ldr	r0, [pc, #216]	; (8000c98 <update7SEG+0x118>)
 8000bc0:	f001 fb93 	bl	80022ea <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, SET);
 8000bc4:	2201      	movs	r2, #1
 8000bc6:	2180      	movs	r1, #128	; 0x80
 8000bc8:	4833      	ldr	r0, [pc, #204]	; (8000c98 <update7SEG+0x118>)
 8000bca:	f001 fb8e 	bl	80022ea <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, SET);
 8000bce:	2201      	movs	r2, #1
 8000bd0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000bd4:	4830      	ldr	r0, [pc, #192]	; (8000c98 <update7SEG+0x118>)
 8000bd6:	f001 fb88 	bl	80022ea <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, SET);
 8000bda:	2201      	movs	r2, #1
 8000bdc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000be0:	482d      	ldr	r0, [pc, #180]	; (8000c98 <update7SEG+0x118>)
 8000be2:	f001 fb82 	bl	80022ea <HAL_GPIO_WritePin>
			break;
 8000be6:	e04e      	b.n	8000c86 <update7SEG+0x106>
		case 1:
			// Display the second 7 SEG with led_buffer [1]
			index_led = 2;
 8000be8:	4b2a      	ldr	r3, [pc, #168]	; (8000c94 <update7SEG+0x114>)
 8000bea:	2202      	movs	r2, #2
 8000bec:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, SET);
 8000bee:	2201      	movs	r2, #1
 8000bf0:	2140      	movs	r1, #64	; 0x40
 8000bf2:	4829      	ldr	r0, [pc, #164]	; (8000c98 <update7SEG+0x118>)
 8000bf4:	f001 fb79 	bl	80022ea <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, RESET);
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	2180      	movs	r1, #128	; 0x80
 8000bfc:	4826      	ldr	r0, [pc, #152]	; (8000c98 <update7SEG+0x118>)
 8000bfe:	f001 fb74 	bl	80022ea <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, SET);
 8000c02:	2201      	movs	r2, #1
 8000c04:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c08:	4823      	ldr	r0, [pc, #140]	; (8000c98 <update7SEG+0x118>)
 8000c0a:	f001 fb6e 	bl	80022ea <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, SET);
 8000c0e:	2201      	movs	r2, #1
 8000c10:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c14:	4820      	ldr	r0, [pc, #128]	; (8000c98 <update7SEG+0x118>)
 8000c16:	f001 fb68 	bl	80022ea <HAL_GPIO_WritePin>
			break;
 8000c1a:	e034      	b.n	8000c86 <update7SEG+0x106>
		case 2:
			// Display the third 7 SEG with led_buffer [2]
			index_led = 3;
 8000c1c:	4b1d      	ldr	r3, [pc, #116]	; (8000c94 <update7SEG+0x114>)
 8000c1e:	2203      	movs	r2, #3
 8000c20:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, SET);
 8000c22:	2201      	movs	r2, #1
 8000c24:	2140      	movs	r1, #64	; 0x40
 8000c26:	481c      	ldr	r0, [pc, #112]	; (8000c98 <update7SEG+0x118>)
 8000c28:	f001 fb5f 	bl	80022ea <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, SET);
 8000c2c:	2201      	movs	r2, #1
 8000c2e:	2180      	movs	r1, #128	; 0x80
 8000c30:	4819      	ldr	r0, [pc, #100]	; (8000c98 <update7SEG+0x118>)
 8000c32:	f001 fb5a 	bl	80022ea <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, RESET);
 8000c36:	2200      	movs	r2, #0
 8000c38:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c3c:	4816      	ldr	r0, [pc, #88]	; (8000c98 <update7SEG+0x118>)
 8000c3e:	f001 fb54 	bl	80022ea <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, SET);
 8000c42:	2201      	movs	r2, #1
 8000c44:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c48:	4813      	ldr	r0, [pc, #76]	; (8000c98 <update7SEG+0x118>)
 8000c4a:	f001 fb4e 	bl	80022ea <HAL_GPIO_WritePin>
			break;
 8000c4e:	e01a      	b.n	8000c86 <update7SEG+0x106>
		case 3:
			// Display the forth 7 SEG with led_buffer [3]
			index_led = 0;
 8000c50:	4b10      	ldr	r3, [pc, #64]	; (8000c94 <update7SEG+0x114>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, SET);
 8000c56:	2201      	movs	r2, #1
 8000c58:	2140      	movs	r1, #64	; 0x40
 8000c5a:	480f      	ldr	r0, [pc, #60]	; (8000c98 <update7SEG+0x118>)
 8000c5c:	f001 fb45 	bl	80022ea <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, SET);
 8000c60:	2201      	movs	r2, #1
 8000c62:	2180      	movs	r1, #128	; 0x80
 8000c64:	480c      	ldr	r0, [pc, #48]	; (8000c98 <update7SEG+0x118>)
 8000c66:	f001 fb40 	bl	80022ea <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, SET);
 8000c6a:	2201      	movs	r2, #1
 8000c6c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c70:	4809      	ldr	r0, [pc, #36]	; (8000c98 <update7SEG+0x118>)
 8000c72:	f001 fb3a 	bl	80022ea <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, RESET);
 8000c76:	2200      	movs	r2, #0
 8000c78:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c7c:	4806      	ldr	r0, [pc, #24]	; (8000c98 <update7SEG+0x118>)
 8000c7e:	f001 fb34 	bl	80022ea <HAL_GPIO_WritePin>
			break;
 8000c82:	e000      	b.n	8000c86 <update7SEG+0x106>
		default:
			break;
 8000c84:	bf00      	nop
	}
}
 8000c86:	bf00      	nop
 8000c88:	3708      	adds	r7, #8
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	bf00      	nop
 8000c90:	20000030 	.word	0x20000030
 8000c94:	200000a0 	.word	0x200000a0
 8000c98:	40010800 	.word	0x40010800

08000c9c <updateLedBufferMode1>:

int counter1 = 1, counter2 = 1;
void updateLedBufferMode1(){
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0
	// 2 7-SEG LED Landscape
	/* Turn on RED-Landscape (count down from RED -> 0) */
	if (counter1 <= RED){
 8000ca0:	4b9b      	ldr	r3, [pc, #620]	; (8000f10 <updateLedBufferMode1+0x274>)
 8000ca2:	681a      	ldr	r2, [r3, #0]
 8000ca4:	4b9b      	ldr	r3, [pc, #620]	; (8000f14 <updateLedBufferMode1+0x278>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	429a      	cmp	r2, r3
 8000caa:	dc21      	bgt.n	8000cf0 <updateLedBufferMode1+0x54>
		led_buffer[0] = (RED - counter1 + 1) / 10;
 8000cac:	4b99      	ldr	r3, [pc, #612]	; (8000f14 <updateLedBufferMode1+0x278>)
 8000cae:	681a      	ldr	r2, [r3, #0]
 8000cb0:	4b97      	ldr	r3, [pc, #604]	; (8000f10 <updateLedBufferMode1+0x274>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	1ad3      	subs	r3, r2, r3
 8000cb6:	3301      	adds	r3, #1
 8000cb8:	4a97      	ldr	r2, [pc, #604]	; (8000f18 <updateLedBufferMode1+0x27c>)
 8000cba:	fb82 1203 	smull	r1, r2, r2, r3
 8000cbe:	1092      	asrs	r2, r2, #2
 8000cc0:	17db      	asrs	r3, r3, #31
 8000cc2:	1ad3      	subs	r3, r2, r3
 8000cc4:	4a95      	ldr	r2, [pc, #596]	; (8000f1c <updateLedBufferMode1+0x280>)
 8000cc6:	6013      	str	r3, [r2, #0]
		led_buffer[1] = (RED - counter1 + 1) % 10;
 8000cc8:	4b92      	ldr	r3, [pc, #584]	; (8000f14 <updateLedBufferMode1+0x278>)
 8000cca:	681a      	ldr	r2, [r3, #0]
 8000ccc:	4b90      	ldr	r3, [pc, #576]	; (8000f10 <updateLedBufferMode1+0x274>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	1ad3      	subs	r3, r2, r3
 8000cd2:	1c59      	adds	r1, r3, #1
 8000cd4:	4b90      	ldr	r3, [pc, #576]	; (8000f18 <updateLedBufferMode1+0x27c>)
 8000cd6:	fb83 2301 	smull	r2, r3, r3, r1
 8000cda:	109a      	asrs	r2, r3, #2
 8000cdc:	17cb      	asrs	r3, r1, #31
 8000cde:	1ad2      	subs	r2, r2, r3
 8000ce0:	4613      	mov	r3, r2
 8000ce2:	009b      	lsls	r3, r3, #2
 8000ce4:	4413      	add	r3, r2
 8000ce6:	005b      	lsls	r3, r3, #1
 8000ce8:	1aca      	subs	r2, r1, r3
 8000cea:	4b8c      	ldr	r3, [pc, #560]	; (8000f1c <updateLedBufferMode1+0x280>)
 8000cec:	605a      	str	r2, [r3, #4]
 8000cee:	e05d      	b.n	8000dac <updateLedBufferMode1+0x110>
	}
	/* Turn on GREEN-Landscape (count down from GREEN -> 0) */
	else if (counter1 <= (RED + GREEN)){
 8000cf0:	4b88      	ldr	r3, [pc, #544]	; (8000f14 <updateLedBufferMode1+0x278>)
 8000cf2:	681a      	ldr	r2, [r3, #0]
 8000cf4:	4b8a      	ldr	r3, [pc, #552]	; (8000f20 <updateLedBufferMode1+0x284>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	441a      	add	r2, r3
 8000cfa:	4b85      	ldr	r3, [pc, #532]	; (8000f10 <updateLedBufferMode1+0x274>)
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	429a      	cmp	r2, r3
 8000d00:	db27      	blt.n	8000d52 <updateLedBufferMode1+0xb6>
		led_buffer[0] = (RED + GREEN - counter1 + 1) / 10;
 8000d02:	4b84      	ldr	r3, [pc, #528]	; (8000f14 <updateLedBufferMode1+0x278>)
 8000d04:	681a      	ldr	r2, [r3, #0]
 8000d06:	4b86      	ldr	r3, [pc, #536]	; (8000f20 <updateLedBufferMode1+0x284>)
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	441a      	add	r2, r3
 8000d0c:	4b80      	ldr	r3, [pc, #512]	; (8000f10 <updateLedBufferMode1+0x274>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	1ad3      	subs	r3, r2, r3
 8000d12:	3301      	adds	r3, #1
 8000d14:	4a80      	ldr	r2, [pc, #512]	; (8000f18 <updateLedBufferMode1+0x27c>)
 8000d16:	fb82 1203 	smull	r1, r2, r2, r3
 8000d1a:	1092      	asrs	r2, r2, #2
 8000d1c:	17db      	asrs	r3, r3, #31
 8000d1e:	1ad3      	subs	r3, r2, r3
 8000d20:	4a7e      	ldr	r2, [pc, #504]	; (8000f1c <updateLedBufferMode1+0x280>)
 8000d22:	6013      	str	r3, [r2, #0]
		led_buffer[1] = (RED + GREEN - counter1 + 1) % 10;
 8000d24:	4b7b      	ldr	r3, [pc, #492]	; (8000f14 <updateLedBufferMode1+0x278>)
 8000d26:	681a      	ldr	r2, [r3, #0]
 8000d28:	4b7d      	ldr	r3, [pc, #500]	; (8000f20 <updateLedBufferMode1+0x284>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	441a      	add	r2, r3
 8000d2e:	4b78      	ldr	r3, [pc, #480]	; (8000f10 <updateLedBufferMode1+0x274>)
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	1ad3      	subs	r3, r2, r3
 8000d34:	1c59      	adds	r1, r3, #1
 8000d36:	4b78      	ldr	r3, [pc, #480]	; (8000f18 <updateLedBufferMode1+0x27c>)
 8000d38:	fb83 2301 	smull	r2, r3, r3, r1
 8000d3c:	109a      	asrs	r2, r3, #2
 8000d3e:	17cb      	asrs	r3, r1, #31
 8000d40:	1ad2      	subs	r2, r2, r3
 8000d42:	4613      	mov	r3, r2
 8000d44:	009b      	lsls	r3, r3, #2
 8000d46:	4413      	add	r3, r2
 8000d48:	005b      	lsls	r3, r3, #1
 8000d4a:	1aca      	subs	r2, r1, r3
 8000d4c:	4b73      	ldr	r3, [pc, #460]	; (8000f1c <updateLedBufferMode1+0x280>)
 8000d4e:	605a      	str	r2, [r3, #4]
 8000d50:	e02c      	b.n	8000dac <updateLedBufferMode1+0x110>
	}
	/* Turn on AMPER-Landscape (count down from AMPER -> 0) */
	else{
		led_buffer[0] = (RED + GREEN + AMBER - counter1 + 1) / 10;
 8000d52:	4b70      	ldr	r3, [pc, #448]	; (8000f14 <updateLedBufferMode1+0x278>)
 8000d54:	681a      	ldr	r2, [r3, #0]
 8000d56:	4b72      	ldr	r3, [pc, #456]	; (8000f20 <updateLedBufferMode1+0x284>)
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	441a      	add	r2, r3
 8000d5c:	4b71      	ldr	r3, [pc, #452]	; (8000f24 <updateLedBufferMode1+0x288>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	441a      	add	r2, r3
 8000d62:	4b6b      	ldr	r3, [pc, #428]	; (8000f10 <updateLedBufferMode1+0x274>)
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	1ad3      	subs	r3, r2, r3
 8000d68:	3301      	adds	r3, #1
 8000d6a:	4a6b      	ldr	r2, [pc, #428]	; (8000f18 <updateLedBufferMode1+0x27c>)
 8000d6c:	fb82 1203 	smull	r1, r2, r2, r3
 8000d70:	1092      	asrs	r2, r2, #2
 8000d72:	17db      	asrs	r3, r3, #31
 8000d74:	1ad3      	subs	r3, r2, r3
 8000d76:	4a69      	ldr	r2, [pc, #420]	; (8000f1c <updateLedBufferMode1+0x280>)
 8000d78:	6013      	str	r3, [r2, #0]
		led_buffer[1] = (RED + GREEN + AMBER - counter1 + 1) % 10;
 8000d7a:	4b66      	ldr	r3, [pc, #408]	; (8000f14 <updateLedBufferMode1+0x278>)
 8000d7c:	681a      	ldr	r2, [r3, #0]
 8000d7e:	4b68      	ldr	r3, [pc, #416]	; (8000f20 <updateLedBufferMode1+0x284>)
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	441a      	add	r2, r3
 8000d84:	4b67      	ldr	r3, [pc, #412]	; (8000f24 <updateLedBufferMode1+0x288>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	441a      	add	r2, r3
 8000d8a:	4b61      	ldr	r3, [pc, #388]	; (8000f10 <updateLedBufferMode1+0x274>)
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	1ad3      	subs	r3, r2, r3
 8000d90:	1c59      	adds	r1, r3, #1
 8000d92:	4b61      	ldr	r3, [pc, #388]	; (8000f18 <updateLedBufferMode1+0x27c>)
 8000d94:	fb83 2301 	smull	r2, r3, r3, r1
 8000d98:	109a      	asrs	r2, r3, #2
 8000d9a:	17cb      	asrs	r3, r1, #31
 8000d9c:	1ad2      	subs	r2, r2, r3
 8000d9e:	4613      	mov	r3, r2
 8000da0:	009b      	lsls	r3, r3, #2
 8000da2:	4413      	add	r3, r2
 8000da4:	005b      	lsls	r3, r3, #1
 8000da6:	1aca      	subs	r2, r1, r3
 8000da8:	4b5c      	ldr	r3, [pc, #368]	; (8000f1c <updateLedBufferMode1+0x280>)
 8000daa:	605a      	str	r2, [r3, #4]
	}
	counter1++;
 8000dac:	4b58      	ldr	r3, [pc, #352]	; (8000f10 <updateLedBufferMode1+0x274>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	3301      	adds	r3, #1
 8000db2:	4a57      	ldr	r2, [pc, #348]	; (8000f10 <updateLedBufferMode1+0x274>)
 8000db4:	6013      	str	r3, [r2, #0]
	/* Return to turn on RED-Landscape */
	if (counter1 > RED + AMBER + GREEN) counter1 = 1;
 8000db6:	4b57      	ldr	r3, [pc, #348]	; (8000f14 <updateLedBufferMode1+0x278>)
 8000db8:	681a      	ldr	r2, [r3, #0]
 8000dba:	4b5a      	ldr	r3, [pc, #360]	; (8000f24 <updateLedBufferMode1+0x288>)
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	441a      	add	r2, r3
 8000dc0:	4b57      	ldr	r3, [pc, #348]	; (8000f20 <updateLedBufferMode1+0x284>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	441a      	add	r2, r3
 8000dc6:	4b52      	ldr	r3, [pc, #328]	; (8000f10 <updateLedBufferMode1+0x274>)
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	429a      	cmp	r2, r3
 8000dcc:	da02      	bge.n	8000dd4 <updateLedBufferMode1+0x138>
 8000dce:	4b50      	ldr	r3, [pc, #320]	; (8000f10 <updateLedBufferMode1+0x274>)
 8000dd0:	2201      	movs	r2, #1
 8000dd2:	601a      	str	r2, [r3, #0]


	// 2 7-SEG LED Portrait
	/* Turn on GREEN-Portrait (count down from GREEN -> 0) */
	if (counter2 <= GREEN){
 8000dd4:	4b54      	ldr	r3, [pc, #336]	; (8000f28 <updateLedBufferMode1+0x28c>)
 8000dd6:	681a      	ldr	r2, [r3, #0]
 8000dd8:	4b51      	ldr	r3, [pc, #324]	; (8000f20 <updateLedBufferMode1+0x284>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	429a      	cmp	r2, r3
 8000dde:	dc21      	bgt.n	8000e24 <updateLedBufferMode1+0x188>
		led_buffer[2] = (GREEN - counter2 + 1) / 10;
 8000de0:	4b4f      	ldr	r3, [pc, #316]	; (8000f20 <updateLedBufferMode1+0x284>)
 8000de2:	681a      	ldr	r2, [r3, #0]
 8000de4:	4b50      	ldr	r3, [pc, #320]	; (8000f28 <updateLedBufferMode1+0x28c>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	1ad3      	subs	r3, r2, r3
 8000dea:	3301      	adds	r3, #1
 8000dec:	4a4a      	ldr	r2, [pc, #296]	; (8000f18 <updateLedBufferMode1+0x27c>)
 8000dee:	fb82 1203 	smull	r1, r2, r2, r3
 8000df2:	1092      	asrs	r2, r2, #2
 8000df4:	17db      	asrs	r3, r3, #31
 8000df6:	1ad3      	subs	r3, r2, r3
 8000df8:	4a48      	ldr	r2, [pc, #288]	; (8000f1c <updateLedBufferMode1+0x280>)
 8000dfa:	6093      	str	r3, [r2, #8]
		led_buffer[3] = (GREEN - counter2 + 1) % 10;
 8000dfc:	4b48      	ldr	r3, [pc, #288]	; (8000f20 <updateLedBufferMode1+0x284>)
 8000dfe:	681a      	ldr	r2, [r3, #0]
 8000e00:	4b49      	ldr	r3, [pc, #292]	; (8000f28 <updateLedBufferMode1+0x28c>)
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	1ad3      	subs	r3, r2, r3
 8000e06:	1c59      	adds	r1, r3, #1
 8000e08:	4b43      	ldr	r3, [pc, #268]	; (8000f18 <updateLedBufferMode1+0x27c>)
 8000e0a:	fb83 2301 	smull	r2, r3, r3, r1
 8000e0e:	109a      	asrs	r2, r3, #2
 8000e10:	17cb      	asrs	r3, r1, #31
 8000e12:	1ad2      	subs	r2, r2, r3
 8000e14:	4613      	mov	r3, r2
 8000e16:	009b      	lsls	r3, r3, #2
 8000e18:	4413      	add	r3, r2
 8000e1a:	005b      	lsls	r3, r3, #1
 8000e1c:	1aca      	subs	r2, r1, r3
 8000e1e:	4b3f      	ldr	r3, [pc, #252]	; (8000f1c <updateLedBufferMode1+0x280>)
 8000e20:	60da      	str	r2, [r3, #12]
 8000e22:	e05d      	b.n	8000ee0 <updateLedBufferMode1+0x244>
	}
	/* Turn on AMPER-Portrait (count down from AMPER -> 0) */
	else if (counter2 <= (AMBER + GREEN)){
 8000e24:	4b3f      	ldr	r3, [pc, #252]	; (8000f24 <updateLedBufferMode1+0x288>)
 8000e26:	681a      	ldr	r2, [r3, #0]
 8000e28:	4b3d      	ldr	r3, [pc, #244]	; (8000f20 <updateLedBufferMode1+0x284>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	441a      	add	r2, r3
 8000e2e:	4b3e      	ldr	r3, [pc, #248]	; (8000f28 <updateLedBufferMode1+0x28c>)
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	429a      	cmp	r2, r3
 8000e34:	db27      	blt.n	8000e86 <updateLedBufferMode1+0x1ea>
		led_buffer[2] = (AMBER + GREEN - counter2 + 1) / 10;
 8000e36:	4b3b      	ldr	r3, [pc, #236]	; (8000f24 <updateLedBufferMode1+0x288>)
 8000e38:	681a      	ldr	r2, [r3, #0]
 8000e3a:	4b39      	ldr	r3, [pc, #228]	; (8000f20 <updateLedBufferMode1+0x284>)
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	441a      	add	r2, r3
 8000e40:	4b39      	ldr	r3, [pc, #228]	; (8000f28 <updateLedBufferMode1+0x28c>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	1ad3      	subs	r3, r2, r3
 8000e46:	3301      	adds	r3, #1
 8000e48:	4a33      	ldr	r2, [pc, #204]	; (8000f18 <updateLedBufferMode1+0x27c>)
 8000e4a:	fb82 1203 	smull	r1, r2, r2, r3
 8000e4e:	1092      	asrs	r2, r2, #2
 8000e50:	17db      	asrs	r3, r3, #31
 8000e52:	1ad3      	subs	r3, r2, r3
 8000e54:	4a31      	ldr	r2, [pc, #196]	; (8000f1c <updateLedBufferMode1+0x280>)
 8000e56:	6093      	str	r3, [r2, #8]
		led_buffer[3] = (AMBER + GREEN - counter2 + 1) % 10;
 8000e58:	4b32      	ldr	r3, [pc, #200]	; (8000f24 <updateLedBufferMode1+0x288>)
 8000e5a:	681a      	ldr	r2, [r3, #0]
 8000e5c:	4b30      	ldr	r3, [pc, #192]	; (8000f20 <updateLedBufferMode1+0x284>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	441a      	add	r2, r3
 8000e62:	4b31      	ldr	r3, [pc, #196]	; (8000f28 <updateLedBufferMode1+0x28c>)
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	1ad3      	subs	r3, r2, r3
 8000e68:	1c59      	adds	r1, r3, #1
 8000e6a:	4b2b      	ldr	r3, [pc, #172]	; (8000f18 <updateLedBufferMode1+0x27c>)
 8000e6c:	fb83 2301 	smull	r2, r3, r3, r1
 8000e70:	109a      	asrs	r2, r3, #2
 8000e72:	17cb      	asrs	r3, r1, #31
 8000e74:	1ad2      	subs	r2, r2, r3
 8000e76:	4613      	mov	r3, r2
 8000e78:	009b      	lsls	r3, r3, #2
 8000e7a:	4413      	add	r3, r2
 8000e7c:	005b      	lsls	r3, r3, #1
 8000e7e:	1aca      	subs	r2, r1, r3
 8000e80:	4b26      	ldr	r3, [pc, #152]	; (8000f1c <updateLedBufferMode1+0x280>)
 8000e82:	60da      	str	r2, [r3, #12]
 8000e84:	e02c      	b.n	8000ee0 <updateLedBufferMode1+0x244>
	}
	/* Turn on RED-Portrait (count down from RED -> 0) */
	else {
		led_buffer[2] = (RED + GREEN + AMBER - counter2 + 1) / 10;
 8000e86:	4b23      	ldr	r3, [pc, #140]	; (8000f14 <updateLedBufferMode1+0x278>)
 8000e88:	681a      	ldr	r2, [r3, #0]
 8000e8a:	4b25      	ldr	r3, [pc, #148]	; (8000f20 <updateLedBufferMode1+0x284>)
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	441a      	add	r2, r3
 8000e90:	4b24      	ldr	r3, [pc, #144]	; (8000f24 <updateLedBufferMode1+0x288>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	441a      	add	r2, r3
 8000e96:	4b24      	ldr	r3, [pc, #144]	; (8000f28 <updateLedBufferMode1+0x28c>)
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	1ad3      	subs	r3, r2, r3
 8000e9c:	3301      	adds	r3, #1
 8000e9e:	4a1e      	ldr	r2, [pc, #120]	; (8000f18 <updateLedBufferMode1+0x27c>)
 8000ea0:	fb82 1203 	smull	r1, r2, r2, r3
 8000ea4:	1092      	asrs	r2, r2, #2
 8000ea6:	17db      	asrs	r3, r3, #31
 8000ea8:	1ad3      	subs	r3, r2, r3
 8000eaa:	4a1c      	ldr	r2, [pc, #112]	; (8000f1c <updateLedBufferMode1+0x280>)
 8000eac:	6093      	str	r3, [r2, #8]
		led_buffer[3] = (RED + GREEN + AMBER - counter2 + 1) % 10;
 8000eae:	4b19      	ldr	r3, [pc, #100]	; (8000f14 <updateLedBufferMode1+0x278>)
 8000eb0:	681a      	ldr	r2, [r3, #0]
 8000eb2:	4b1b      	ldr	r3, [pc, #108]	; (8000f20 <updateLedBufferMode1+0x284>)
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	441a      	add	r2, r3
 8000eb8:	4b1a      	ldr	r3, [pc, #104]	; (8000f24 <updateLedBufferMode1+0x288>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	441a      	add	r2, r3
 8000ebe:	4b1a      	ldr	r3, [pc, #104]	; (8000f28 <updateLedBufferMode1+0x28c>)
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	1ad3      	subs	r3, r2, r3
 8000ec4:	1c59      	adds	r1, r3, #1
 8000ec6:	4b14      	ldr	r3, [pc, #80]	; (8000f18 <updateLedBufferMode1+0x27c>)
 8000ec8:	fb83 2301 	smull	r2, r3, r3, r1
 8000ecc:	109a      	asrs	r2, r3, #2
 8000ece:	17cb      	asrs	r3, r1, #31
 8000ed0:	1ad2      	subs	r2, r2, r3
 8000ed2:	4613      	mov	r3, r2
 8000ed4:	009b      	lsls	r3, r3, #2
 8000ed6:	4413      	add	r3, r2
 8000ed8:	005b      	lsls	r3, r3, #1
 8000eda:	1aca      	subs	r2, r1, r3
 8000edc:	4b0f      	ldr	r3, [pc, #60]	; (8000f1c <updateLedBufferMode1+0x280>)
 8000ede:	60da      	str	r2, [r3, #12]
	}
	counter2++;
 8000ee0:	4b11      	ldr	r3, [pc, #68]	; (8000f28 <updateLedBufferMode1+0x28c>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	3301      	adds	r3, #1
 8000ee6:	4a10      	ldr	r2, [pc, #64]	; (8000f28 <updateLedBufferMode1+0x28c>)
 8000ee8:	6013      	str	r3, [r2, #0]
	/* Return to turn on GREEN-Portrait */
	if (counter2 > RED + AMBER + GREEN) counter2 = 1;
 8000eea:	4b0a      	ldr	r3, [pc, #40]	; (8000f14 <updateLedBufferMode1+0x278>)
 8000eec:	681a      	ldr	r2, [r3, #0]
 8000eee:	4b0d      	ldr	r3, [pc, #52]	; (8000f24 <updateLedBufferMode1+0x288>)
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	441a      	add	r2, r3
 8000ef4:	4b0a      	ldr	r3, [pc, #40]	; (8000f20 <updateLedBufferMode1+0x284>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	441a      	add	r2, r3
 8000efa:	4b0b      	ldr	r3, [pc, #44]	; (8000f28 <updateLedBufferMode1+0x28c>)
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	429a      	cmp	r2, r3
 8000f00:	da02      	bge.n	8000f08 <updateLedBufferMode1+0x26c>
 8000f02:	4b09      	ldr	r3, [pc, #36]	; (8000f28 <updateLedBufferMode1+0x28c>)
 8000f04:	2201      	movs	r2, #1
 8000f06:	601a      	str	r2, [r3, #0]
}
 8000f08:	bf00      	nop
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bc80      	pop	{r7}
 8000f0e:	4770      	bx	lr
 8000f10:	20000040 	.word	0x20000040
 8000f14:	20000048 	.word	0x20000048
 8000f18:	66666667 	.word	0x66666667
 8000f1c:	20000030 	.word	0x20000030
 8000f20:	20000050 	.word	0x20000050
 8000f24:	2000004c 	.word	0x2000004c
 8000f28:	20000044 	.word	0x20000044

08000f2c <updateLedBufferMode2>:

void updateLedBufferMode2(){
 8000f2c:	b480      	push	{r7}
 8000f2e:	af00      	add	r7, sp, #0
	// Display mode 2
	led_buffer[0] = 0;
 8000f30:	4b11      	ldr	r3, [pc, #68]	; (8000f78 <updateLedBufferMode2+0x4c>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	601a      	str	r2, [r3, #0]
	led_buffer[1] = 2;
 8000f36:	4b10      	ldr	r3, [pc, #64]	; (8000f78 <updateLedBufferMode2+0x4c>)
 8000f38:	2202      	movs	r2, #2
 8000f3a:	605a      	str	r2, [r3, #4]
	// Display value RED
	led_buffer[2] = RED / 10;
 8000f3c:	4b0f      	ldr	r3, [pc, #60]	; (8000f7c <updateLedBufferMode2+0x50>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	4a0f      	ldr	r2, [pc, #60]	; (8000f80 <updateLedBufferMode2+0x54>)
 8000f42:	fb82 1203 	smull	r1, r2, r2, r3
 8000f46:	1092      	asrs	r2, r2, #2
 8000f48:	17db      	asrs	r3, r3, #31
 8000f4a:	1ad3      	subs	r3, r2, r3
 8000f4c:	4a0a      	ldr	r2, [pc, #40]	; (8000f78 <updateLedBufferMode2+0x4c>)
 8000f4e:	6093      	str	r3, [r2, #8]
	led_buffer[3] = RED % 10;
 8000f50:	4b0a      	ldr	r3, [pc, #40]	; (8000f7c <updateLedBufferMode2+0x50>)
 8000f52:	6819      	ldr	r1, [r3, #0]
 8000f54:	4b0a      	ldr	r3, [pc, #40]	; (8000f80 <updateLedBufferMode2+0x54>)
 8000f56:	fb83 2301 	smull	r2, r3, r3, r1
 8000f5a:	109a      	asrs	r2, r3, #2
 8000f5c:	17cb      	asrs	r3, r1, #31
 8000f5e:	1ad2      	subs	r2, r2, r3
 8000f60:	4613      	mov	r3, r2
 8000f62:	009b      	lsls	r3, r3, #2
 8000f64:	4413      	add	r3, r2
 8000f66:	005b      	lsls	r3, r3, #1
 8000f68:	1aca      	subs	r2, r1, r3
 8000f6a:	4b03      	ldr	r3, [pc, #12]	; (8000f78 <updateLedBufferMode2+0x4c>)
 8000f6c:	60da      	str	r2, [r3, #12]
}
 8000f6e:	bf00      	nop
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bc80      	pop	{r7}
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop
 8000f78:	20000030 	.word	0x20000030
 8000f7c:	20000048 	.word	0x20000048
 8000f80:	66666667 	.word	0x66666667

08000f84 <updateLedBufferMode3>:

void updateLedBufferMode3(){
 8000f84:	b480      	push	{r7}
 8000f86:	af00      	add	r7, sp, #0
	// Display mode 3
	led_buffer[0] = 0;
 8000f88:	4b11      	ldr	r3, [pc, #68]	; (8000fd0 <updateLedBufferMode3+0x4c>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	601a      	str	r2, [r3, #0]
	led_buffer[1] = 3;
 8000f8e:	4b10      	ldr	r3, [pc, #64]	; (8000fd0 <updateLedBufferMode3+0x4c>)
 8000f90:	2203      	movs	r2, #3
 8000f92:	605a      	str	r2, [r3, #4]
	// Display value AMBER
	led_buffer[2] = AMBER / 10;
 8000f94:	4b0f      	ldr	r3, [pc, #60]	; (8000fd4 <updateLedBufferMode3+0x50>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	4a0f      	ldr	r2, [pc, #60]	; (8000fd8 <updateLedBufferMode3+0x54>)
 8000f9a:	fb82 1203 	smull	r1, r2, r2, r3
 8000f9e:	1092      	asrs	r2, r2, #2
 8000fa0:	17db      	asrs	r3, r3, #31
 8000fa2:	1ad3      	subs	r3, r2, r3
 8000fa4:	4a0a      	ldr	r2, [pc, #40]	; (8000fd0 <updateLedBufferMode3+0x4c>)
 8000fa6:	6093      	str	r3, [r2, #8]
	led_buffer[3] = AMBER % 10;
 8000fa8:	4b0a      	ldr	r3, [pc, #40]	; (8000fd4 <updateLedBufferMode3+0x50>)
 8000faa:	6819      	ldr	r1, [r3, #0]
 8000fac:	4b0a      	ldr	r3, [pc, #40]	; (8000fd8 <updateLedBufferMode3+0x54>)
 8000fae:	fb83 2301 	smull	r2, r3, r3, r1
 8000fb2:	109a      	asrs	r2, r3, #2
 8000fb4:	17cb      	asrs	r3, r1, #31
 8000fb6:	1ad2      	subs	r2, r2, r3
 8000fb8:	4613      	mov	r3, r2
 8000fba:	009b      	lsls	r3, r3, #2
 8000fbc:	4413      	add	r3, r2
 8000fbe:	005b      	lsls	r3, r3, #1
 8000fc0:	1aca      	subs	r2, r1, r3
 8000fc2:	4b03      	ldr	r3, [pc, #12]	; (8000fd0 <updateLedBufferMode3+0x4c>)
 8000fc4:	60da      	str	r2, [r3, #12]
}
 8000fc6:	bf00      	nop
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bc80      	pop	{r7}
 8000fcc:	4770      	bx	lr
 8000fce:	bf00      	nop
 8000fd0:	20000030 	.word	0x20000030
 8000fd4:	2000004c 	.word	0x2000004c
 8000fd8:	66666667 	.word	0x66666667

08000fdc <updateLedBufferMode4>:

void updateLedBufferMode4(){
 8000fdc:	b480      	push	{r7}
 8000fde:	af00      	add	r7, sp, #0
	// Display mode 4
	led_buffer[0] = 0;
 8000fe0:	4b11      	ldr	r3, [pc, #68]	; (8001028 <updateLedBufferMode4+0x4c>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	601a      	str	r2, [r3, #0]
	led_buffer[1] = 4;
 8000fe6:	4b10      	ldr	r3, [pc, #64]	; (8001028 <updateLedBufferMode4+0x4c>)
 8000fe8:	2204      	movs	r2, #4
 8000fea:	605a      	str	r2, [r3, #4]
	// Display value GREEN
	led_buffer[2] = GREEN / 10;
 8000fec:	4b0f      	ldr	r3, [pc, #60]	; (800102c <updateLedBufferMode4+0x50>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	4a0f      	ldr	r2, [pc, #60]	; (8001030 <updateLedBufferMode4+0x54>)
 8000ff2:	fb82 1203 	smull	r1, r2, r2, r3
 8000ff6:	1092      	asrs	r2, r2, #2
 8000ff8:	17db      	asrs	r3, r3, #31
 8000ffa:	1ad3      	subs	r3, r2, r3
 8000ffc:	4a0a      	ldr	r2, [pc, #40]	; (8001028 <updateLedBufferMode4+0x4c>)
 8000ffe:	6093      	str	r3, [r2, #8]
	led_buffer[3] = GREEN % 10;
 8001000:	4b0a      	ldr	r3, [pc, #40]	; (800102c <updateLedBufferMode4+0x50>)
 8001002:	6819      	ldr	r1, [r3, #0]
 8001004:	4b0a      	ldr	r3, [pc, #40]	; (8001030 <updateLedBufferMode4+0x54>)
 8001006:	fb83 2301 	smull	r2, r3, r3, r1
 800100a:	109a      	asrs	r2, r3, #2
 800100c:	17cb      	asrs	r3, r1, #31
 800100e:	1ad2      	subs	r2, r2, r3
 8001010:	4613      	mov	r3, r2
 8001012:	009b      	lsls	r3, r3, #2
 8001014:	4413      	add	r3, r2
 8001016:	005b      	lsls	r3, r3, #1
 8001018:	1aca      	subs	r2, r1, r3
 800101a:	4b03      	ldr	r3, [pc, #12]	; (8001028 <updateLedBufferMode4+0x4c>)
 800101c:	60da      	str	r2, [r3, #12]
}
 800101e:	bf00      	nop
 8001020:	46bd      	mov	sp, r7
 8001022:	bc80      	pop	{r7}
 8001024:	4770      	bx	lr
 8001026:	bf00      	nop
 8001028:	20000030 	.word	0x20000030
 800102c:	20000050 	.word	0x20000050
 8001030:	66666667 	.word	0x66666667

08001034 <fsm_traffic_light>:
#include "fsm_traffic_light.h"

int status = INIT;

void fsm_traffic_light(){
 8001034:	b580      	push	{r7, lr}
 8001036:	af00      	add	r7, sp, #0
	switch(status){
 8001038:	4bc3      	ldr	r3, [pc, #780]	; (8001348 <fsm_traffic_light+0x314>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	2b29      	cmp	r3, #41	; 0x29
 800103e:	f200 83af 	bhi.w	80017a0 <fsm_traffic_light+0x76c>
 8001042:	a201      	add	r2, pc, #4	; (adr r2, 8001048 <fsm_traffic_light+0x14>)
 8001044:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001048:	080010f1 	.word	0x080010f1
 800104c:	080010f9 	.word	0x080010f9
 8001050:	080013e9 	.word	0x080013e9
 8001054:	0800151b 	.word	0x0800151b
 8001058:	0800166d 	.word	0x0800166d
 800105c:	080017a1 	.word	0x080017a1
 8001060:	080017a1 	.word	0x080017a1
 8001064:	080017a1 	.word	0x080017a1
 8001068:	080017a1 	.word	0x080017a1
 800106c:	080017a1 	.word	0x080017a1
 8001070:	080017a1 	.word	0x080017a1
 8001074:	08001197 	.word	0x08001197
 8001078:	0800122f 	.word	0x0800122f
 800107c:	080012af 	.word	0x080012af
 8001080:	08001369 	.word	0x08001369
 8001084:	080017a1 	.word	0x080017a1
 8001088:	080017a1 	.word	0x080017a1
 800108c:	080017a1 	.word	0x080017a1
 8001090:	080017a1 	.word	0x080017a1
 8001094:	080017a1 	.word	0x080017a1
 8001098:	080017a1 	.word	0x080017a1
 800109c:	08001473 	.word	0x08001473
 80010a0:	080017a1 	.word	0x080017a1
 80010a4:	080017a1 	.word	0x080017a1
 80010a8:	080017a1 	.word	0x080017a1
 80010ac:	080017a1 	.word	0x080017a1
 80010b0:	080017a1 	.word	0x080017a1
 80010b4:	080017a1 	.word	0x080017a1
 80010b8:	080017a1 	.word	0x080017a1
 80010bc:	080017a1 	.word	0x080017a1
 80010c0:	080017a1 	.word	0x080017a1
 80010c4:	080015a5 	.word	0x080015a5
 80010c8:	080017a1 	.word	0x080017a1
 80010cc:	080017a1 	.word	0x080017a1
 80010d0:	080017a1 	.word	0x080017a1
 80010d4:	080017a1 	.word	0x080017a1
 80010d8:	080017a1 	.word	0x080017a1
 80010dc:	080017a1 	.word	0x080017a1
 80010e0:	080017a1 	.word	0x080017a1
 80010e4:	080017a1 	.word	0x080017a1
 80010e8:	080017a1 	.word	0x080017a1
 80010ec:	080016f7 	.word	0x080016f7

	//INIT
	case INIT:
		status = MODE1;
 80010f0:	4b95      	ldr	r3, [pc, #596]	; (8001348 <fsm_traffic_light+0x314>)
 80010f2:	2201      	movs	r2, #1
 80010f4:	601a      	str	r2, [r3, #0]
		break;
 80010f6:	e362      	b.n	80017be <fsm_traffic_light+0x78a>

	//MODE1
	case MODE1:
		status = RED_GREEN;
 80010f8:	4b93      	ldr	r3, [pc, #588]	; (8001348 <fsm_traffic_light+0x314>)
 80010fa:	220b      	movs	r2, #11
 80010fc:	601a      	str	r2, [r3, #0]
		//Set up LED
		HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin, RESET);
 80010fe:	2200      	movs	r2, #0
 8001100:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001104:	4891      	ldr	r0, [pc, #580]	; (800134c <fsm_traffic_light+0x318>)
 8001106:	f001 f8f0 	bl	80022ea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(A1_GPIO_Port, A1_Pin, SET);
 800110a:	2201      	movs	r2, #1
 800110c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001110:	488e      	ldr	r0, [pc, #568]	; (800134c <fsm_traffic_light+0x318>)
 8001112:	f001 f8ea 	bl	80022ea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(G1_GPIO_Port, G1_Pin, SET);
 8001116:	2201      	movs	r2, #1
 8001118:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800111c:	488b      	ldr	r0, [pc, #556]	; (800134c <fsm_traffic_light+0x318>)
 800111e:	f001 f8e4 	bl	80022ea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin, SET);
 8001122:	2201      	movs	r2, #1
 8001124:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001128:	4888      	ldr	r0, [pc, #544]	; (800134c <fsm_traffic_light+0x318>)
 800112a:	f001 f8de 	bl	80022ea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(A2_GPIO_Port, A2_Pin, SET);
 800112e:	2201      	movs	r2, #1
 8001130:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001134:	4885      	ldr	r0, [pc, #532]	; (800134c <fsm_traffic_light+0x318>)
 8001136:	f001 f8d8 	bl	80022ea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(G2_GPIO_Port, G2_Pin, RESET);
 800113a:	2200      	movs	r2, #0
 800113c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001140:	4882      	ldr	r0, [pc, #520]	; (800134c <fsm_traffic_light+0x318>)
 8001142:	f001 f8d2 	bl	80022ea <HAL_GPIO_WritePin>

		//Set up default value
		counter1 = counter2 = 1;
 8001146:	4b82      	ldr	r3, [pc, #520]	; (8001350 <fsm_traffic_light+0x31c>)
 8001148:	2201      	movs	r2, #1
 800114a:	601a      	str	r2, [r3, #0]
 800114c:	4b80      	ldr	r3, [pc, #512]	; (8001350 <fsm_traffic_light+0x31c>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	4a80      	ldr	r2, [pc, #512]	; (8001354 <fsm_traffic_light+0x320>)
 8001152:	6013      	str	r3, [r2, #0]
		index_led = 0;
 8001154:	4b80      	ldr	r3, [pc, #512]	; (8001358 <fsm_traffic_light+0x324>)
 8001156:	2200      	movs	r2, #0
 8001158:	601a      	str	r2, [r3, #0]
		updateLedBufferMode1();
 800115a:	f7ff fd9f 	bl	8000c9c <updateLedBufferMode1>
		update7SEG(index_led);
 800115e:	4b7e      	ldr	r3, [pc, #504]	; (8001358 <fsm_traffic_light+0x324>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	4618      	mov	r0, r3
 8001164:	f7ff fd0c 	bl	8000b80 <update7SEG>

		//Set timer
		setTimer(0, GREEN * 1000);	// Set timer for RED_GREEN
 8001168:	4b7c      	ldr	r3, [pc, #496]	; (800135c <fsm_traffic_light+0x328>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001170:	fb02 f303 	mul.w	r3, r2, r3
 8001174:	4619      	mov	r1, r3
 8001176:	2000      	movs	r0, #0
 8001178:	f000 fc9c 	bl	8001ab4 <setTimer>
		setTimer(1, 1000);			// Set timer for updateLedBufferMode1
 800117c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001180:	2001      	movs	r0, #1
 8001182:	f000 fc97 	bl	8001ab4 <setTimer>
		setTimer(2, 200);			// Set timer for 7SEG LED
 8001186:	21c8      	movs	r1, #200	; 0xc8
 8001188:	2002      	movs	r0, #2
 800118a:	f000 fc93 	bl	8001ab4 <setTimer>
		clearTimer(3);				// Clear timer for blinking LED
 800118e:	2003      	movs	r0, #3
 8001190:	f000 fcae 	bl	8001af0 <clearTimer>

		break;
 8001194:	e313      	b.n	80017be <fsm_traffic_light+0x78a>

	case RED_GREEN:
		//Set up LED
		HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin, RESET);
 8001196:	2200      	movs	r2, #0
 8001198:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800119c:	486b      	ldr	r0, [pc, #428]	; (800134c <fsm_traffic_light+0x318>)
 800119e:	f001 f8a4 	bl	80022ea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(A1_GPIO_Port, A1_Pin, SET);
 80011a2:	2201      	movs	r2, #1
 80011a4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80011a8:	4868      	ldr	r0, [pc, #416]	; (800134c <fsm_traffic_light+0x318>)
 80011aa:	f001 f89e 	bl	80022ea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(R2_GPIO_Port, R2_Pin, SET);
 80011ae:	2201      	movs	r2, #1
 80011b0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80011b4:	4865      	ldr	r0, [pc, #404]	; (800134c <fsm_traffic_light+0x318>)
 80011b6:	f001 f898 	bl	80022ea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(G2_GPIO_Port, G2_Pin, RESET);
 80011ba:	2200      	movs	r2, #0
 80011bc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80011c0:	4862      	ldr	r0, [pc, #392]	; (800134c <fsm_traffic_light+0x318>)
 80011c2:	f001 f892 	bl	80022ea <HAL_GPIO_WritePin>

		if (timer_flag[0] == 1){
 80011c6:	4b66      	ldr	r3, [pc, #408]	; (8001360 <fsm_traffic_light+0x32c>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	2b01      	cmp	r3, #1
 80011cc:	d10c      	bne.n	80011e8 <fsm_traffic_light+0x1b4>
			status = RED_AMBER;
 80011ce:	4b5e      	ldr	r3, [pc, #376]	; (8001348 <fsm_traffic_light+0x314>)
 80011d0:	220c      	movs	r2, #12
 80011d2:	601a      	str	r2, [r3, #0]
			setTimer(0, AMBER * 1000);
 80011d4:	4b63      	ldr	r3, [pc, #396]	; (8001364 <fsm_traffic_light+0x330>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80011dc:	fb02 f303 	mul.w	r3, r2, r3
 80011e0:	4619      	mov	r1, r3
 80011e2:	2000      	movs	r0, #0
 80011e4:	f000 fc66 	bl	8001ab4 <setTimer>
		}

		if (timer_flag[1] == 1){
 80011e8:	4b5d      	ldr	r3, [pc, #372]	; (8001360 <fsm_traffic_light+0x32c>)
 80011ea:	685b      	ldr	r3, [r3, #4]
 80011ec:	2b01      	cmp	r3, #1
 80011ee:	d106      	bne.n	80011fe <fsm_traffic_light+0x1ca>
			updateLedBufferMode1();
 80011f0:	f7ff fd54 	bl	8000c9c <updateLedBufferMode1>
			setTimer(1, 1000);
 80011f4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80011f8:	2001      	movs	r0, #1
 80011fa:	f000 fc5b 	bl	8001ab4 <setTimer>
		}

		if (timer_flag[2] == 1){
 80011fe:	4b58      	ldr	r3, [pc, #352]	; (8001360 <fsm_traffic_light+0x32c>)
 8001200:	689b      	ldr	r3, [r3, #8]
 8001202:	2b01      	cmp	r3, #1
 8001204:	d108      	bne.n	8001218 <fsm_traffic_light+0x1e4>
			update7SEG(index_led);
 8001206:	4b54      	ldr	r3, [pc, #336]	; (8001358 <fsm_traffic_light+0x324>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	4618      	mov	r0, r3
 800120c:	f7ff fcb8 	bl	8000b80 <update7SEG>
			setTimer(2, 200);
 8001210:	21c8      	movs	r1, #200	; 0xc8
 8001212:	2002      	movs	r0, #2
 8001214:	f000 fc4e 	bl	8001ab4 <setTimer>
		}
		// If button 1 is pressed, come to MODE2
		if (isButtonPressed(0) == 1){
 8001218:	2000      	movs	r0, #0
 800121a:	f7ff fb8f 	bl	800093c <isButtonPressed>
 800121e:	4603      	mov	r3, r0
 8001220:	2b01      	cmp	r3, #1
 8001222:	f040 82bf 	bne.w	80017a4 <fsm_traffic_light+0x770>
			status = MODE2;
 8001226:	4b48      	ldr	r3, [pc, #288]	; (8001348 <fsm_traffic_light+0x314>)
 8001228:	2202      	movs	r2, #2
 800122a:	601a      	str	r2, [r3, #0]
		}
		break;
 800122c:	e2ba      	b.n	80017a4 <fsm_traffic_light+0x770>

	case RED_AMBER:
		//Set up LED
		HAL_GPIO_WritePin(G2_GPIO_Port, G2_Pin, SET);
 800122e:	2201      	movs	r2, #1
 8001230:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001234:	4845      	ldr	r0, [pc, #276]	; (800134c <fsm_traffic_light+0x318>)
 8001236:	f001 f858 	bl	80022ea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(A2_GPIO_Port, A2_Pin, RESET);
 800123a:	2200      	movs	r2, #0
 800123c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001240:	4842      	ldr	r0, [pc, #264]	; (800134c <fsm_traffic_light+0x318>)
 8001242:	f001 f852 	bl	80022ea <HAL_GPIO_WritePin>

		if (timer_flag[0] == 1){
 8001246:	4b46      	ldr	r3, [pc, #280]	; (8001360 <fsm_traffic_light+0x32c>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	2b01      	cmp	r3, #1
 800124c:	d10c      	bne.n	8001268 <fsm_traffic_light+0x234>
			status = GREEN_RED;
 800124e:	4b3e      	ldr	r3, [pc, #248]	; (8001348 <fsm_traffic_light+0x314>)
 8001250:	220d      	movs	r2, #13
 8001252:	601a      	str	r2, [r3, #0]
			setTimer(0, GREEN * 1000);
 8001254:	4b41      	ldr	r3, [pc, #260]	; (800135c <fsm_traffic_light+0x328>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800125c:	fb02 f303 	mul.w	r3, r2, r3
 8001260:	4619      	mov	r1, r3
 8001262:	2000      	movs	r0, #0
 8001264:	f000 fc26 	bl	8001ab4 <setTimer>
		}

		if (timer_flag[1] == 1){
 8001268:	4b3d      	ldr	r3, [pc, #244]	; (8001360 <fsm_traffic_light+0x32c>)
 800126a:	685b      	ldr	r3, [r3, #4]
 800126c:	2b01      	cmp	r3, #1
 800126e:	d106      	bne.n	800127e <fsm_traffic_light+0x24a>
			updateLedBufferMode1();
 8001270:	f7ff fd14 	bl	8000c9c <updateLedBufferMode1>
			setTimer(1, 1000);
 8001274:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001278:	2001      	movs	r0, #1
 800127a:	f000 fc1b 	bl	8001ab4 <setTimer>
		}

		if (timer_flag[2] == 1){
 800127e:	4b38      	ldr	r3, [pc, #224]	; (8001360 <fsm_traffic_light+0x32c>)
 8001280:	689b      	ldr	r3, [r3, #8]
 8001282:	2b01      	cmp	r3, #1
 8001284:	d108      	bne.n	8001298 <fsm_traffic_light+0x264>
			update7SEG(index_led);
 8001286:	4b34      	ldr	r3, [pc, #208]	; (8001358 <fsm_traffic_light+0x324>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	4618      	mov	r0, r3
 800128c:	f7ff fc78 	bl	8000b80 <update7SEG>
			setTimer(2, 200);
 8001290:	21c8      	movs	r1, #200	; 0xc8
 8001292:	2002      	movs	r0, #2
 8001294:	f000 fc0e 	bl	8001ab4 <setTimer>
		}
		// If button 1 is pressed, come to MODE2
		if (isButtonPressed(0) == 1){
 8001298:	2000      	movs	r0, #0
 800129a:	f7ff fb4f 	bl	800093c <isButtonPressed>
 800129e:	4603      	mov	r3, r0
 80012a0:	2b01      	cmp	r3, #1
 80012a2:	f040 8281 	bne.w	80017a8 <fsm_traffic_light+0x774>
			status = MODE2;
 80012a6:	4b28      	ldr	r3, [pc, #160]	; (8001348 <fsm_traffic_light+0x314>)
 80012a8:	2202      	movs	r2, #2
 80012aa:	601a      	str	r2, [r3, #0]
		}
		break;
 80012ac:	e27c      	b.n	80017a8 <fsm_traffic_light+0x774>

	case GREEN_RED:
		//Set up LED
		HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin, SET);
 80012ae:	2201      	movs	r2, #1
 80012b0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80012b4:	4825      	ldr	r0, [pc, #148]	; (800134c <fsm_traffic_light+0x318>)
 80012b6:	f001 f818 	bl	80022ea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(G1_GPIO_Port, G1_Pin, RESET);
 80012ba:	2200      	movs	r2, #0
 80012bc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80012c0:	4822      	ldr	r0, [pc, #136]	; (800134c <fsm_traffic_light+0x318>)
 80012c2:	f001 f812 	bl	80022ea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(A2_GPIO_Port, A2_Pin, SET);
 80012c6:	2201      	movs	r2, #1
 80012c8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80012cc:	481f      	ldr	r0, [pc, #124]	; (800134c <fsm_traffic_light+0x318>)
 80012ce:	f001 f80c 	bl	80022ea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(R2_GPIO_Port, R2_Pin, RESET);
 80012d2:	2200      	movs	r2, #0
 80012d4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80012d8:	481c      	ldr	r0, [pc, #112]	; (800134c <fsm_traffic_light+0x318>)
 80012da:	f001 f806 	bl	80022ea <HAL_GPIO_WritePin>

		if (timer_flag[0] == 1){
 80012de:	4b20      	ldr	r3, [pc, #128]	; (8001360 <fsm_traffic_light+0x32c>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	2b01      	cmp	r3, #1
 80012e4:	d10c      	bne.n	8001300 <fsm_traffic_light+0x2cc>
			status = AMBER_RED;
 80012e6:	4b18      	ldr	r3, [pc, #96]	; (8001348 <fsm_traffic_light+0x314>)
 80012e8:	220e      	movs	r2, #14
 80012ea:	601a      	str	r2, [r3, #0]
			setTimer(0, AMBER * 1000);
 80012ec:	4b1d      	ldr	r3, [pc, #116]	; (8001364 <fsm_traffic_light+0x330>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80012f4:	fb02 f303 	mul.w	r3, r2, r3
 80012f8:	4619      	mov	r1, r3
 80012fa:	2000      	movs	r0, #0
 80012fc:	f000 fbda 	bl	8001ab4 <setTimer>
		}

		if (timer_flag[1] == 1){
 8001300:	4b17      	ldr	r3, [pc, #92]	; (8001360 <fsm_traffic_light+0x32c>)
 8001302:	685b      	ldr	r3, [r3, #4]
 8001304:	2b01      	cmp	r3, #1
 8001306:	d106      	bne.n	8001316 <fsm_traffic_light+0x2e2>
			updateLedBufferMode1();
 8001308:	f7ff fcc8 	bl	8000c9c <updateLedBufferMode1>
			setTimer(1, 1000);
 800130c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001310:	2001      	movs	r0, #1
 8001312:	f000 fbcf 	bl	8001ab4 <setTimer>
		}

		if (timer_flag[2] == 1){
 8001316:	4b12      	ldr	r3, [pc, #72]	; (8001360 <fsm_traffic_light+0x32c>)
 8001318:	689b      	ldr	r3, [r3, #8]
 800131a:	2b01      	cmp	r3, #1
 800131c:	d108      	bne.n	8001330 <fsm_traffic_light+0x2fc>
			update7SEG(index_led);
 800131e:	4b0e      	ldr	r3, [pc, #56]	; (8001358 <fsm_traffic_light+0x324>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	4618      	mov	r0, r3
 8001324:	f7ff fc2c 	bl	8000b80 <update7SEG>
			setTimer(2, 200);
 8001328:	21c8      	movs	r1, #200	; 0xc8
 800132a:	2002      	movs	r0, #2
 800132c:	f000 fbc2 	bl	8001ab4 <setTimer>
		}
		// If button 1 is pressed, come to MODE2
		if (isButtonPressed(0) == 1){
 8001330:	2000      	movs	r0, #0
 8001332:	f7ff fb03 	bl	800093c <isButtonPressed>
 8001336:	4603      	mov	r3, r0
 8001338:	2b01      	cmp	r3, #1
 800133a:	f040 8237 	bne.w	80017ac <fsm_traffic_light+0x778>
			status = MODE2;
 800133e:	4b02      	ldr	r3, [pc, #8]	; (8001348 <fsm_traffic_light+0x314>)
 8001340:	2202      	movs	r2, #2
 8001342:	601a      	str	r2, [r3, #0]
		}
		break;
 8001344:	e232      	b.n	80017ac <fsm_traffic_light+0x778>
 8001346:	bf00      	nop
 8001348:	200000a4 	.word	0x200000a4
 800134c:	40010800 	.word	0x40010800
 8001350:	20000044 	.word	0x20000044
 8001354:	20000040 	.word	0x20000040
 8001358:	200000a0 	.word	0x200000a0
 800135c:	20000050 	.word	0x20000050
 8001360:	200000bc 	.word	0x200000bc
 8001364:	2000004c 	.word	0x2000004c

	case AMBER_RED:
		//Set up LED
		HAL_GPIO_WritePin(A1_GPIO_Port, A1_Pin, RESET);
 8001368:	2200      	movs	r2, #0
 800136a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800136e:	48b7      	ldr	r0, [pc, #732]	; (800164c <fsm_traffic_light+0x618>)
 8001370:	f000 ffbb 	bl	80022ea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(G1_GPIO_Port, G1_Pin, SET);
 8001374:	2201      	movs	r2, #1
 8001376:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800137a:	48b4      	ldr	r0, [pc, #720]	; (800164c <fsm_traffic_light+0x618>)
 800137c:	f000 ffb5 	bl	80022ea <HAL_GPIO_WritePin>

		if (timer_flag[0] == 1){
 8001380:	4bb3      	ldr	r3, [pc, #716]	; (8001650 <fsm_traffic_light+0x61c>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	2b01      	cmp	r3, #1
 8001386:	d10c      	bne.n	80013a2 <fsm_traffic_light+0x36e>
			status = RED_GREEN;
 8001388:	4bb2      	ldr	r3, [pc, #712]	; (8001654 <fsm_traffic_light+0x620>)
 800138a:	220b      	movs	r2, #11
 800138c:	601a      	str	r2, [r3, #0]
			setTimer(0, GREEN * 1000);
 800138e:	4bb2      	ldr	r3, [pc, #712]	; (8001658 <fsm_traffic_light+0x624>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001396:	fb02 f303 	mul.w	r3, r2, r3
 800139a:	4619      	mov	r1, r3
 800139c:	2000      	movs	r0, #0
 800139e:	f000 fb89 	bl	8001ab4 <setTimer>
		}

		if (timer_flag[1] == 1){
 80013a2:	4bab      	ldr	r3, [pc, #684]	; (8001650 <fsm_traffic_light+0x61c>)
 80013a4:	685b      	ldr	r3, [r3, #4]
 80013a6:	2b01      	cmp	r3, #1
 80013a8:	d106      	bne.n	80013b8 <fsm_traffic_light+0x384>
			updateLedBufferMode1();
 80013aa:	f7ff fc77 	bl	8000c9c <updateLedBufferMode1>
			setTimer(1, 1000);
 80013ae:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80013b2:	2001      	movs	r0, #1
 80013b4:	f000 fb7e 	bl	8001ab4 <setTimer>
		}

		if (timer_flag[2] == 1){
 80013b8:	4ba5      	ldr	r3, [pc, #660]	; (8001650 <fsm_traffic_light+0x61c>)
 80013ba:	689b      	ldr	r3, [r3, #8]
 80013bc:	2b01      	cmp	r3, #1
 80013be:	d108      	bne.n	80013d2 <fsm_traffic_light+0x39e>
			update7SEG(index_led);
 80013c0:	4ba6      	ldr	r3, [pc, #664]	; (800165c <fsm_traffic_light+0x628>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	4618      	mov	r0, r3
 80013c6:	f7ff fbdb 	bl	8000b80 <update7SEG>
			setTimer(2, 200);
 80013ca:	21c8      	movs	r1, #200	; 0xc8
 80013cc:	2002      	movs	r0, #2
 80013ce:	f000 fb71 	bl	8001ab4 <setTimer>
		}
		// If button 1 is pressed, come to MODE2
		if (isButtonPressed(0) == 1){
 80013d2:	2000      	movs	r0, #0
 80013d4:	f7ff fab2 	bl	800093c <isButtonPressed>
 80013d8:	4603      	mov	r3, r0
 80013da:	2b01      	cmp	r3, #1
 80013dc:	f040 81e8 	bne.w	80017b0 <fsm_traffic_light+0x77c>
			status = MODE2;
 80013e0:	4b9c      	ldr	r3, [pc, #624]	; (8001654 <fsm_traffic_light+0x620>)
 80013e2:	2202      	movs	r2, #2
 80013e4:	601a      	str	r2, [r3, #0]
		}
		break;
 80013e6:	e1e3      	b.n	80017b0 <fsm_traffic_light+0x77c>

	//MODE2
	case MODE2:
		status = AUTO_RED;
 80013e8:	4b9a      	ldr	r3, [pc, #616]	; (8001654 <fsm_traffic_light+0x620>)
 80013ea:	2215      	movs	r2, #21
 80013ec:	601a      	str	r2, [r3, #0]
		//Set up RED LED
		HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin, RESET);
 80013ee:	2200      	movs	r2, #0
 80013f0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80013f4:	4895      	ldr	r0, [pc, #596]	; (800164c <fsm_traffic_light+0x618>)
 80013f6:	f000 ff78 	bl	80022ea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(A1_GPIO_Port, A1_Pin, SET);
 80013fa:	2201      	movs	r2, #1
 80013fc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001400:	4892      	ldr	r0, [pc, #584]	; (800164c <fsm_traffic_light+0x618>)
 8001402:	f000 ff72 	bl	80022ea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(G1_GPIO_Port, G1_Pin, SET);
 8001406:	2201      	movs	r2, #1
 8001408:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800140c:	488f      	ldr	r0, [pc, #572]	; (800164c <fsm_traffic_light+0x618>)
 800140e:	f000 ff6c 	bl	80022ea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin, RESET);
 8001412:	2200      	movs	r2, #0
 8001414:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001418:	488c      	ldr	r0, [pc, #560]	; (800164c <fsm_traffic_light+0x618>)
 800141a:	f000 ff66 	bl	80022ea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(A2_GPIO_Port, A2_Pin, SET);
 800141e:	2201      	movs	r2, #1
 8001420:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001424:	4889      	ldr	r0, [pc, #548]	; (800164c <fsm_traffic_light+0x618>)
 8001426:	f000 ff60 	bl	80022ea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(G2_GPIO_Port, G2_Pin, SET);
 800142a:	2201      	movs	r2, #1
 800142c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001430:	4886      	ldr	r0, [pc, #536]	; (800164c <fsm_traffic_light+0x618>)
 8001432:	f000 ff5a 	bl	80022ea <HAL_GPIO_WritePin>

		index_led = 0;
 8001436:	4b89      	ldr	r3, [pc, #548]	; (800165c <fsm_traffic_light+0x628>)
 8001438:	2200      	movs	r2, #0
 800143a:	601a      	str	r2, [r3, #0]
		updateLedBufferMode2();
 800143c:	f7ff fd76 	bl	8000f2c <updateLedBufferMode2>
		update7SEG(index_led);
 8001440:	4b86      	ldr	r3, [pc, #536]	; (800165c <fsm_traffic_light+0x628>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	4618      	mov	r0, r3
 8001446:	f7ff fb9b 	bl	8000b80 <update7SEG>

		setTimer(2, 200);			// Set timer for 7SEG LED
 800144a:	21c8      	movs	r1, #200	; 0xc8
 800144c:	2002      	movs	r0, #2
 800144e:	f000 fb31 	bl	8001ab4 <setTimer>
		setTimer(3, 500);			// Set timer for blinking LED
 8001452:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001456:	2003      	movs	r0, #3
 8001458:	f000 fb2c 	bl	8001ab4 <setTimer>
		clearTimer(0);				// Clear timer display LED in MODE1
 800145c:	2000      	movs	r0, #0
 800145e:	f000 fb47 	bl	8001af0 <clearTimer>
		clearTimer(1);				// Clear timer update buffer
 8001462:	2001      	movs	r0, #1
 8001464:	f000 fb44 	bl	8001af0 <clearTimer>
		t = RED;
 8001468:	4b7d      	ldr	r3, [pc, #500]	; (8001660 <fsm_traffic_light+0x62c>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	4a7d      	ldr	r2, [pc, #500]	; (8001664 <fsm_traffic_light+0x630>)
 800146e:	6013      	str	r3, [r2, #0]
		break;
 8001470:	e1a5      	b.n	80017be <fsm_traffic_light+0x78a>

	case AUTO_RED:
		if (timer_flag[2] == 1){
 8001472:	4b77      	ldr	r3, [pc, #476]	; (8001650 <fsm_traffic_light+0x61c>)
 8001474:	689b      	ldr	r3, [r3, #8]
 8001476:	2b01      	cmp	r3, #1
 8001478:	d10a      	bne.n	8001490 <fsm_traffic_light+0x45c>
			updateLedBufferMode2();
 800147a:	f7ff fd57 	bl	8000f2c <updateLedBufferMode2>
			update7SEG(index_led);
 800147e:	4b77      	ldr	r3, [pc, #476]	; (800165c <fsm_traffic_light+0x628>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	4618      	mov	r0, r3
 8001484:	f7ff fb7c 	bl	8000b80 <update7SEG>
			setTimer(2, 200);
 8001488:	21c8      	movs	r1, #200	; 0xc8
 800148a:	2002      	movs	r0, #2
 800148c:	f000 fb12 	bl	8001ab4 <setTimer>
		}
		if (timer_flag[3] == 1){
 8001490:	4b6f      	ldr	r3, [pc, #444]	; (8001650 <fsm_traffic_light+0x61c>)
 8001492:	68db      	ldr	r3, [r3, #12]
 8001494:	2b01      	cmp	r3, #1
 8001496:	d10d      	bne.n	80014b4 <fsm_traffic_light+0x480>
			HAL_GPIO_TogglePin(R1_GPIO_Port, R1_Pin);
 8001498:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800149c:	486b      	ldr	r0, [pc, #428]	; (800164c <fsm_traffic_light+0x618>)
 800149e:	f000 ff3c 	bl	800231a <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(R2_GPIO_Port, R2_Pin);
 80014a2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80014a6:	4869      	ldr	r0, [pc, #420]	; (800164c <fsm_traffic_light+0x618>)
 80014a8:	f000 ff37 	bl	800231a <HAL_GPIO_TogglePin>
			setTimer(3, 200);
 80014ac:	21c8      	movs	r1, #200	; 0xc8
 80014ae:	2003      	movs	r0, #3
 80014b0:	f000 fb00 	bl	8001ab4 <setTimer>
		}
		if (isButtonPressed(0) == 1){
 80014b4:	2000      	movs	r0, #0
 80014b6:	f7ff fa41 	bl	800093c <isButtonPressed>
 80014ba:	4603      	mov	r3, r0
 80014bc:	2b01      	cmp	r3, #1
 80014be:	d102      	bne.n	80014c6 <fsm_traffic_light+0x492>
			status = MODE3;
 80014c0:	4b64      	ldr	r3, [pc, #400]	; (8001654 <fsm_traffic_light+0x620>)
 80014c2:	2203      	movs	r2, #3
 80014c4:	601a      	str	r2, [r3, #0]
		}

		if (isButtonPressed(1) == 1){
 80014c6:	2001      	movs	r0, #1
 80014c8:	f7ff fa38 	bl	800093c <isButtonPressed>
 80014cc:	4603      	mov	r3, r0
 80014ce:	2b01      	cmp	r3, #1
 80014d0:	d114      	bne.n	80014fc <fsm_traffic_light+0x4c8>
			if (t > 99) {
 80014d2:	4b64      	ldr	r3, [pc, #400]	; (8001664 <fsm_traffic_light+0x630>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	2b63      	cmp	r3, #99	; 0x63
 80014d8:	dd06      	ble.n	80014e8 <fsm_traffic_light+0x4b4>
				t = 0;
 80014da:	4b62      	ldr	r3, [pc, #392]	; (8001664 <fsm_traffic_light+0x630>)
 80014dc:	2200      	movs	r2, #0
 80014de:	601a      	str	r2, [r3, #0]
				RED = 0;
 80014e0:	4b5f      	ldr	r3, [pc, #380]	; (8001660 <fsm_traffic_light+0x62c>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	601a      	str	r2, [r3, #0]
 80014e6:	e009      	b.n	80014fc <fsm_traffic_light+0x4c8>
			} else {
					t++;
 80014e8:	4b5e      	ldr	r3, [pc, #376]	; (8001664 <fsm_traffic_light+0x630>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	3301      	adds	r3, #1
 80014ee:	4a5d      	ldr	r2, [pc, #372]	; (8001664 <fsm_traffic_light+0x630>)
 80014f0:	6013      	str	r3, [r2, #0]
					RED++;
 80014f2:	4b5b      	ldr	r3, [pc, #364]	; (8001660 <fsm_traffic_light+0x62c>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	3301      	adds	r3, #1
 80014f8:	4a59      	ldr	r2, [pc, #356]	; (8001660 <fsm_traffic_light+0x62c>)
 80014fa:	6013      	str	r3, [r2, #0]
				}
		}

		if (isButtonPressed(2) == 1){
 80014fc:	2002      	movs	r0, #2
 80014fe:	f7ff fa1d 	bl	800093c <isButtonPressed>
 8001502:	4603      	mov	r3, r0
 8001504:	2b01      	cmp	r3, #1
 8001506:	f040 8155 	bne.w	80017b4 <fsm_traffic_light+0x780>
			status = MODE3;
 800150a:	4b52      	ldr	r3, [pc, #328]	; (8001654 <fsm_traffic_light+0x620>)
 800150c:	2203      	movs	r2, #3
 800150e:	601a      	str	r2, [r3, #0]
			RED = t;
 8001510:	4b54      	ldr	r3, [pc, #336]	; (8001664 <fsm_traffic_light+0x630>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	4a52      	ldr	r2, [pc, #328]	; (8001660 <fsm_traffic_light+0x62c>)
 8001516:	6013      	str	r3, [r2, #0]
		}
		break;
 8001518:	e14c      	b.n	80017b4 <fsm_traffic_light+0x780>

	//MODE3
	case MODE3:
		status = AUTO_AMBER;
 800151a:	4b4e      	ldr	r3, [pc, #312]	; (8001654 <fsm_traffic_light+0x620>)
 800151c:	221f      	movs	r2, #31
 800151e:	601a      	str	r2, [r3, #0]
		//Set up AMBER LED
		HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin, SET);
 8001520:	2201      	movs	r2, #1
 8001522:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001526:	4849      	ldr	r0, [pc, #292]	; (800164c <fsm_traffic_light+0x618>)
 8001528:	f000 fedf 	bl	80022ea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(A1_GPIO_Port, A1_Pin, RESET);
 800152c:	2200      	movs	r2, #0
 800152e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001532:	4846      	ldr	r0, [pc, #280]	; (800164c <fsm_traffic_light+0x618>)
 8001534:	f000 fed9 	bl	80022ea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(G1_GPIO_Port, G1_Pin, SET);
 8001538:	2201      	movs	r2, #1
 800153a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800153e:	4843      	ldr	r0, [pc, #268]	; (800164c <fsm_traffic_light+0x618>)
 8001540:	f000 fed3 	bl	80022ea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(R2_GPIO_Port, R2_Pin, SET);
 8001544:	2201      	movs	r2, #1
 8001546:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800154a:	4840      	ldr	r0, [pc, #256]	; (800164c <fsm_traffic_light+0x618>)
 800154c:	f000 fecd 	bl	80022ea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(A2_GPIO_Port, A2_Pin, RESET);
 8001550:	2200      	movs	r2, #0
 8001552:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001556:	483d      	ldr	r0, [pc, #244]	; (800164c <fsm_traffic_light+0x618>)
 8001558:	f000 fec7 	bl	80022ea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(G2_GPIO_Port, G2_Pin, SET);
 800155c:	2201      	movs	r2, #1
 800155e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001562:	483a      	ldr	r0, [pc, #232]	; (800164c <fsm_traffic_light+0x618>)
 8001564:	f000 fec1 	bl	80022ea <HAL_GPIO_WritePin>

		index_led = 0;
 8001568:	4b3c      	ldr	r3, [pc, #240]	; (800165c <fsm_traffic_light+0x628>)
 800156a:	2200      	movs	r2, #0
 800156c:	601a      	str	r2, [r3, #0]
		updateLedBufferMode3();
 800156e:	f7ff fd09 	bl	8000f84 <updateLedBufferMode3>
		update7SEG(index_led);
 8001572:	4b3a      	ldr	r3, [pc, #232]	; (800165c <fsm_traffic_light+0x628>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	4618      	mov	r0, r3
 8001578:	f7ff fb02 	bl	8000b80 <update7SEG>

		setTimer(2, 200);			// Set timer for 7SEG LED
 800157c:	21c8      	movs	r1, #200	; 0xc8
 800157e:	2002      	movs	r0, #2
 8001580:	f000 fa98 	bl	8001ab4 <setTimer>
		setTimer(3, 500);			// Set timer for blinking LED
 8001584:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001588:	2003      	movs	r0, #3
 800158a:	f000 fa93 	bl	8001ab4 <setTimer>
		clearTimer(0);				// Clear timer display LED in MODE1
 800158e:	2000      	movs	r0, #0
 8001590:	f000 faae 	bl	8001af0 <clearTimer>
		clearTimer(1);				// Clear timer update buffer
 8001594:	2001      	movs	r0, #1
 8001596:	f000 faab 	bl	8001af0 <clearTimer>
		t = AMBER;
 800159a:	4b33      	ldr	r3, [pc, #204]	; (8001668 <fsm_traffic_light+0x634>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	4a31      	ldr	r2, [pc, #196]	; (8001664 <fsm_traffic_light+0x630>)
 80015a0:	6013      	str	r3, [r2, #0]
		break;
 80015a2:	e10c      	b.n	80017be <fsm_traffic_light+0x78a>

	case AUTO_AMBER:
		if (timer_flag[2] == 1){
 80015a4:	4b2a      	ldr	r3, [pc, #168]	; (8001650 <fsm_traffic_light+0x61c>)
 80015a6:	689b      	ldr	r3, [r3, #8]
 80015a8:	2b01      	cmp	r3, #1
 80015aa:	d10a      	bne.n	80015c2 <fsm_traffic_light+0x58e>
			updateLedBufferMode3();
 80015ac:	f7ff fcea 	bl	8000f84 <updateLedBufferMode3>
			update7SEG(index_led);
 80015b0:	4b2a      	ldr	r3, [pc, #168]	; (800165c <fsm_traffic_light+0x628>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	4618      	mov	r0, r3
 80015b6:	f7ff fae3 	bl	8000b80 <update7SEG>
			setTimer(2, 200);
 80015ba:	21c8      	movs	r1, #200	; 0xc8
 80015bc:	2002      	movs	r0, #2
 80015be:	f000 fa79 	bl	8001ab4 <setTimer>
		}
		if (timer_flag[3] == 1){
 80015c2:	4b23      	ldr	r3, [pc, #140]	; (8001650 <fsm_traffic_light+0x61c>)
 80015c4:	68db      	ldr	r3, [r3, #12]
 80015c6:	2b01      	cmp	r3, #1
 80015c8:	d10d      	bne.n	80015e6 <fsm_traffic_light+0x5b2>
			HAL_GPIO_TogglePin(A1_GPIO_Port, A1_Pin);
 80015ca:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80015ce:	481f      	ldr	r0, [pc, #124]	; (800164c <fsm_traffic_light+0x618>)
 80015d0:	f000 fea3 	bl	800231a <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(A2_GPIO_Port, A2_Pin);
 80015d4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80015d8:	481c      	ldr	r0, [pc, #112]	; (800164c <fsm_traffic_light+0x618>)
 80015da:	f000 fe9e 	bl	800231a <HAL_GPIO_TogglePin>
			setTimer(3, 200);
 80015de:	21c8      	movs	r1, #200	; 0xc8
 80015e0:	2003      	movs	r0, #3
 80015e2:	f000 fa67 	bl	8001ab4 <setTimer>
		}
		if (isButtonPressed(0) == 1){
 80015e6:	2000      	movs	r0, #0
 80015e8:	f7ff f9a8 	bl	800093c <isButtonPressed>
 80015ec:	4603      	mov	r3, r0
 80015ee:	2b01      	cmp	r3, #1
 80015f0:	d102      	bne.n	80015f8 <fsm_traffic_light+0x5c4>
			status = MODE4;
 80015f2:	4b18      	ldr	r3, [pc, #96]	; (8001654 <fsm_traffic_light+0x620>)
 80015f4:	2204      	movs	r2, #4
 80015f6:	601a      	str	r2, [r3, #0]
		}
		if (isButtonPressed(1) == 1){
 80015f8:	2001      	movs	r0, #1
 80015fa:	f7ff f99f 	bl	800093c <isButtonPressed>
 80015fe:	4603      	mov	r3, r0
 8001600:	2b01      	cmp	r3, #1
 8001602:	d114      	bne.n	800162e <fsm_traffic_light+0x5fa>
			if (t > 99) {
 8001604:	4b17      	ldr	r3, [pc, #92]	; (8001664 <fsm_traffic_light+0x630>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	2b63      	cmp	r3, #99	; 0x63
 800160a:	dd06      	ble.n	800161a <fsm_traffic_light+0x5e6>
				t = 0;
 800160c:	4b15      	ldr	r3, [pc, #84]	; (8001664 <fsm_traffic_light+0x630>)
 800160e:	2200      	movs	r2, #0
 8001610:	601a      	str	r2, [r3, #0]
				AMBER = 0;
 8001612:	4b15      	ldr	r3, [pc, #84]	; (8001668 <fsm_traffic_light+0x634>)
 8001614:	2200      	movs	r2, #0
 8001616:	601a      	str	r2, [r3, #0]
 8001618:	e009      	b.n	800162e <fsm_traffic_light+0x5fa>
			} else {
				t++;
 800161a:	4b12      	ldr	r3, [pc, #72]	; (8001664 <fsm_traffic_light+0x630>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	3301      	adds	r3, #1
 8001620:	4a10      	ldr	r2, [pc, #64]	; (8001664 <fsm_traffic_light+0x630>)
 8001622:	6013      	str	r3, [r2, #0]
				AMBER++;
 8001624:	4b10      	ldr	r3, [pc, #64]	; (8001668 <fsm_traffic_light+0x634>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	3301      	adds	r3, #1
 800162a:	4a0f      	ldr	r2, [pc, #60]	; (8001668 <fsm_traffic_light+0x634>)
 800162c:	6013      	str	r3, [r2, #0]
			}
		}

		if (isButtonPressed(2) == 1){
 800162e:	2002      	movs	r0, #2
 8001630:	f7ff f984 	bl	800093c <isButtonPressed>
 8001634:	4603      	mov	r3, r0
 8001636:	2b01      	cmp	r3, #1
 8001638:	f040 80be 	bne.w	80017b8 <fsm_traffic_light+0x784>
			status = MODE4;
 800163c:	4b05      	ldr	r3, [pc, #20]	; (8001654 <fsm_traffic_light+0x620>)
 800163e:	2204      	movs	r2, #4
 8001640:	601a      	str	r2, [r3, #0]
			AMBER = t;
 8001642:	4b08      	ldr	r3, [pc, #32]	; (8001664 <fsm_traffic_light+0x630>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	4a08      	ldr	r2, [pc, #32]	; (8001668 <fsm_traffic_light+0x634>)
 8001648:	6013      	str	r3, [r2, #0]
		}

		break;
 800164a:	e0b5      	b.n	80017b8 <fsm_traffic_light+0x784>
 800164c:	40010800 	.word	0x40010800
 8001650:	200000bc 	.word	0x200000bc
 8001654:	200000a4 	.word	0x200000a4
 8001658:	20000050 	.word	0x20000050
 800165c:	200000a0 	.word	0x200000a0
 8001660:	20000048 	.word	0x20000048
 8001664:	200000a8 	.word	0x200000a8
 8001668:	2000004c 	.word	0x2000004c
	//MODE4
	case MODE4:
		status = AUTO_GREEN;
 800166c:	4b55      	ldr	r3, [pc, #340]	; (80017c4 <fsm_traffic_light+0x790>)
 800166e:	2229      	movs	r2, #41	; 0x29
 8001670:	601a      	str	r2, [r3, #0]
		//Set up GREEN LED
		HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin, SET);
 8001672:	2201      	movs	r2, #1
 8001674:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001678:	4853      	ldr	r0, [pc, #332]	; (80017c8 <fsm_traffic_light+0x794>)
 800167a:	f000 fe36 	bl	80022ea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(A1_GPIO_Port, A1_Pin, SET);
 800167e:	2201      	movs	r2, #1
 8001680:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001684:	4850      	ldr	r0, [pc, #320]	; (80017c8 <fsm_traffic_light+0x794>)
 8001686:	f000 fe30 	bl	80022ea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(G1_GPIO_Port, G1_Pin, RESET);
 800168a:	2200      	movs	r2, #0
 800168c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001690:	484d      	ldr	r0, [pc, #308]	; (80017c8 <fsm_traffic_light+0x794>)
 8001692:	f000 fe2a 	bl	80022ea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(R2_GPIO_Port, R2_Pin, SET);
 8001696:	2201      	movs	r2, #1
 8001698:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800169c:	484a      	ldr	r0, [pc, #296]	; (80017c8 <fsm_traffic_light+0x794>)
 800169e:	f000 fe24 	bl	80022ea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(A2_GPIO_Port, A2_Pin, SET);
 80016a2:	2201      	movs	r2, #1
 80016a4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80016a8:	4847      	ldr	r0, [pc, #284]	; (80017c8 <fsm_traffic_light+0x794>)
 80016aa:	f000 fe1e 	bl	80022ea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(G2_GPIO_Port, G2_Pin, RESET);
 80016ae:	2200      	movs	r2, #0
 80016b0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80016b4:	4844      	ldr	r0, [pc, #272]	; (80017c8 <fsm_traffic_light+0x794>)
 80016b6:	f000 fe18 	bl	80022ea <HAL_GPIO_WritePin>

		index_led = 0;
 80016ba:	4b44      	ldr	r3, [pc, #272]	; (80017cc <fsm_traffic_light+0x798>)
 80016bc:	2200      	movs	r2, #0
 80016be:	601a      	str	r2, [r3, #0]
		updateLedBufferMode4();
 80016c0:	f7ff fc8c 	bl	8000fdc <updateLedBufferMode4>
		update7SEG(index_led);
 80016c4:	4b41      	ldr	r3, [pc, #260]	; (80017cc <fsm_traffic_light+0x798>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	4618      	mov	r0, r3
 80016ca:	f7ff fa59 	bl	8000b80 <update7SEG>

		setTimer(2, 200);			// Set timer for 7SEG LED
 80016ce:	21c8      	movs	r1, #200	; 0xc8
 80016d0:	2002      	movs	r0, #2
 80016d2:	f000 f9ef 	bl	8001ab4 <setTimer>
		setTimer(3, 500);			// Set timer for blinking LED
 80016d6:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80016da:	2003      	movs	r0, #3
 80016dc:	f000 f9ea 	bl	8001ab4 <setTimer>
		clearTimer(0);				// Clear timer display LED in MODE1
 80016e0:	2000      	movs	r0, #0
 80016e2:	f000 fa05 	bl	8001af0 <clearTimer>
		clearTimer(1);				// Clear timer update buffer
 80016e6:	2001      	movs	r0, #1
 80016e8:	f000 fa02 	bl	8001af0 <clearTimer>
		t = GREEN;
 80016ec:	4b38      	ldr	r3, [pc, #224]	; (80017d0 <fsm_traffic_light+0x79c>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	4a38      	ldr	r2, [pc, #224]	; (80017d4 <fsm_traffic_light+0x7a0>)
 80016f2:	6013      	str	r3, [r2, #0]
		break;
 80016f4:	e063      	b.n	80017be <fsm_traffic_light+0x78a>

	case AUTO_GREEN:
		if (timer_flag[2] == 1){
 80016f6:	4b38      	ldr	r3, [pc, #224]	; (80017d8 <fsm_traffic_light+0x7a4>)
 80016f8:	689b      	ldr	r3, [r3, #8]
 80016fa:	2b01      	cmp	r3, #1
 80016fc:	d10a      	bne.n	8001714 <fsm_traffic_light+0x6e0>
			updateLedBufferMode4();
 80016fe:	f7ff fc6d 	bl	8000fdc <updateLedBufferMode4>
			update7SEG(index_led);
 8001702:	4b32      	ldr	r3, [pc, #200]	; (80017cc <fsm_traffic_light+0x798>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	4618      	mov	r0, r3
 8001708:	f7ff fa3a 	bl	8000b80 <update7SEG>
			setTimer(2, 200);
 800170c:	21c8      	movs	r1, #200	; 0xc8
 800170e:	2002      	movs	r0, #2
 8001710:	f000 f9d0 	bl	8001ab4 <setTimer>
		}
		if (timer_flag[3] == 1){
 8001714:	4b30      	ldr	r3, [pc, #192]	; (80017d8 <fsm_traffic_light+0x7a4>)
 8001716:	68db      	ldr	r3, [r3, #12]
 8001718:	2b01      	cmp	r3, #1
 800171a:	d10d      	bne.n	8001738 <fsm_traffic_light+0x704>
			HAL_GPIO_TogglePin(G1_GPIO_Port, G1_Pin);
 800171c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001720:	4829      	ldr	r0, [pc, #164]	; (80017c8 <fsm_traffic_light+0x794>)
 8001722:	f000 fdfa 	bl	800231a <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(G2_GPIO_Port, G2_Pin);
 8001726:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800172a:	4827      	ldr	r0, [pc, #156]	; (80017c8 <fsm_traffic_light+0x794>)
 800172c:	f000 fdf5 	bl	800231a <HAL_GPIO_TogglePin>
			setTimer(3, 200);
 8001730:	21c8      	movs	r1, #200	; 0xc8
 8001732:	2003      	movs	r0, #3
 8001734:	f000 f9be 	bl	8001ab4 <setTimer>
		}
		if (isButtonPressed(0) == 1){
 8001738:	2000      	movs	r0, #0
 800173a:	f7ff f8ff 	bl	800093c <isButtonPressed>
 800173e:	4603      	mov	r3, r0
 8001740:	2b01      	cmp	r3, #1
 8001742:	d102      	bne.n	800174a <fsm_traffic_light+0x716>
			status = MODE1;
 8001744:	4b1f      	ldr	r3, [pc, #124]	; (80017c4 <fsm_traffic_light+0x790>)
 8001746:	2201      	movs	r2, #1
 8001748:	601a      	str	r2, [r3, #0]
		}
		if (isButtonPressed(1) == 1){
 800174a:	2001      	movs	r0, #1
 800174c:	f7ff f8f6 	bl	800093c <isButtonPressed>
 8001750:	4603      	mov	r3, r0
 8001752:	2b01      	cmp	r3, #1
 8001754:	d114      	bne.n	8001780 <fsm_traffic_light+0x74c>
			if (t > 99) {
 8001756:	4b1f      	ldr	r3, [pc, #124]	; (80017d4 <fsm_traffic_light+0x7a0>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	2b63      	cmp	r3, #99	; 0x63
 800175c:	dd06      	ble.n	800176c <fsm_traffic_light+0x738>
				t = 0;
 800175e:	4b1d      	ldr	r3, [pc, #116]	; (80017d4 <fsm_traffic_light+0x7a0>)
 8001760:	2200      	movs	r2, #0
 8001762:	601a      	str	r2, [r3, #0]
				GREEN = 0;
 8001764:	4b1a      	ldr	r3, [pc, #104]	; (80017d0 <fsm_traffic_light+0x79c>)
 8001766:	2200      	movs	r2, #0
 8001768:	601a      	str	r2, [r3, #0]
 800176a:	e009      	b.n	8001780 <fsm_traffic_light+0x74c>
			} else {
				t++;
 800176c:	4b19      	ldr	r3, [pc, #100]	; (80017d4 <fsm_traffic_light+0x7a0>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	3301      	adds	r3, #1
 8001772:	4a18      	ldr	r2, [pc, #96]	; (80017d4 <fsm_traffic_light+0x7a0>)
 8001774:	6013      	str	r3, [r2, #0]
				GREEN++;
 8001776:	4b16      	ldr	r3, [pc, #88]	; (80017d0 <fsm_traffic_light+0x79c>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	3301      	adds	r3, #1
 800177c:	4a14      	ldr	r2, [pc, #80]	; (80017d0 <fsm_traffic_light+0x79c>)
 800177e:	6013      	str	r3, [r2, #0]
			}
		}

		if (isButtonPressed(2) == 1){
 8001780:	2002      	movs	r0, #2
 8001782:	f7ff f8db 	bl	800093c <isButtonPressed>
 8001786:	4603      	mov	r3, r0
 8001788:	2b01      	cmp	r3, #1
 800178a:	d117      	bne.n	80017bc <fsm_traffic_light+0x788>
			GREEN = t;
 800178c:	4b11      	ldr	r3, [pc, #68]	; (80017d4 <fsm_traffic_light+0x7a0>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	4a0f      	ldr	r2, [pc, #60]	; (80017d0 <fsm_traffic_light+0x79c>)
 8001792:	6013      	str	r3, [r2, #0]
			update();
 8001794:	f000 f822 	bl	80017dc <update>
			status = MODE1;
 8001798:	4b0a      	ldr	r3, [pc, #40]	; (80017c4 <fsm_traffic_light+0x790>)
 800179a:	2201      	movs	r2, #1
 800179c:	601a      	str	r2, [r3, #0]
		}
		break;
 800179e:	e00d      	b.n	80017bc <fsm_traffic_light+0x788>
	default:
		break;
 80017a0:	bf00      	nop
 80017a2:	e00c      	b.n	80017be <fsm_traffic_light+0x78a>
		break;
 80017a4:	bf00      	nop
 80017a6:	e00a      	b.n	80017be <fsm_traffic_light+0x78a>
		break;
 80017a8:	bf00      	nop
 80017aa:	e008      	b.n	80017be <fsm_traffic_light+0x78a>
		break;
 80017ac:	bf00      	nop
 80017ae:	e006      	b.n	80017be <fsm_traffic_light+0x78a>
		break;
 80017b0:	bf00      	nop
 80017b2:	e004      	b.n	80017be <fsm_traffic_light+0x78a>
		break;
 80017b4:	bf00      	nop
 80017b6:	e002      	b.n	80017be <fsm_traffic_light+0x78a>
		break;
 80017b8:	bf00      	nop
 80017ba:	e000      	b.n	80017be <fsm_traffic_light+0x78a>
		break;
 80017bc:	bf00      	nop

	}
}
 80017be:	bf00      	nop
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	200000a4 	.word	0x200000a4
 80017c8:	40010800 	.word	0x40010800
 80017cc:	200000a0 	.word	0x200000a0
 80017d0:	20000050 	.word	0x20000050
 80017d4:	200000a8 	.word	0x200000a8
 80017d8:	200000bc 	.word	0x200000bc

080017dc <update>:
int AMBER = 2;
int GREEN = 3;

int t = 0;

void update() {
 80017dc:	b480      	push	{r7}
 80017de:	af00      	add	r7, sp, #0
	if (RED != AMBER + GREEN) {
 80017e0:	4b0a      	ldr	r3, [pc, #40]	; (800180c <update+0x30>)
 80017e2:	681a      	ldr	r2, [r3, #0]
 80017e4:	4b0a      	ldr	r3, [pc, #40]	; (8001810 <update+0x34>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	441a      	add	r2, r3
 80017ea:	4b0a      	ldr	r3, [pc, #40]	; (8001814 <update+0x38>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	429a      	cmp	r2, r3
 80017f0:	d008      	beq.n	8001804 <update+0x28>
		RED = 5;
 80017f2:	4b08      	ldr	r3, [pc, #32]	; (8001814 <update+0x38>)
 80017f4:	2205      	movs	r2, #5
 80017f6:	601a      	str	r2, [r3, #0]
		GREEN = 3;
 80017f8:	4b05      	ldr	r3, [pc, #20]	; (8001810 <update+0x34>)
 80017fa:	2203      	movs	r2, #3
 80017fc:	601a      	str	r2, [r3, #0]
		AMBER = 2;
 80017fe:	4b03      	ldr	r3, [pc, #12]	; (800180c <update+0x30>)
 8001800:	2202      	movs	r2, #2
 8001802:	601a      	str	r2, [r3, #0]
	}
}
 8001804:	bf00      	nop
 8001806:	46bd      	mov	sp, r7
 8001808:	bc80      	pop	{r7}
 800180a:	4770      	bx	lr
 800180c:	2000004c 	.word	0x2000004c
 8001810:	20000050 	.word	0x20000050
 8001814:	20000048 	.word	0x20000048

08001818 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800181c:	f000 fa64 	bl	8001ce8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001820:	f000 f80c 	bl	800183c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001824:	f000 f8d4 	bl	80019d0 <MX_GPIO_Init>
  MX_TIM2_Init();
 8001828:	f000 f846 	bl	80018b8 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT (& htim2);
 800182c:	4802      	ldr	r0, [pc, #8]	; (8001838 <main+0x20>)
 800182e:	f001 f9b9 	bl	8002ba4 <HAL_TIM_Base_Start_IT>
  {

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  fsm_traffic_light();
 8001832:	f7ff fbff 	bl	8001034 <fsm_traffic_light>
 8001836:	e7fc      	b.n	8001832 <main+0x1a>
 8001838:	200000cc 	.word	0x200000cc

0800183c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b090      	sub	sp, #64	; 0x40
 8001840:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001842:	f107 0318 	add.w	r3, r7, #24
 8001846:	2228      	movs	r2, #40	; 0x28
 8001848:	2100      	movs	r1, #0
 800184a:	4618      	mov	r0, r3
 800184c:	f001 fd66 	bl	800331c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001850:	1d3b      	adds	r3, r7, #4
 8001852:	2200      	movs	r2, #0
 8001854:	601a      	str	r2, [r3, #0]
 8001856:	605a      	str	r2, [r3, #4]
 8001858:	609a      	str	r2, [r3, #8]
 800185a:	60da      	str	r2, [r3, #12]
 800185c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800185e:	2302      	movs	r3, #2
 8001860:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001862:	2301      	movs	r3, #1
 8001864:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001866:	2310      	movs	r3, #16
 8001868:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800186a:	2300      	movs	r3, #0
 800186c:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800186e:	f107 0318 	add.w	r3, r7, #24
 8001872:	4618      	mov	r0, r3
 8001874:	f000 fd6a 	bl	800234c <HAL_RCC_OscConfig>
 8001878:	4603      	mov	r3, r0
 800187a:	2b00      	cmp	r3, #0
 800187c:	d001      	beq.n	8001882 <SystemClock_Config+0x46>
  {
    Error_Handler();
 800187e:	f000 f913 	bl	8001aa8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001882:	230f      	movs	r3, #15
 8001884:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001886:	2300      	movs	r3, #0
 8001888:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800188a:	2300      	movs	r3, #0
 800188c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800188e:	2300      	movs	r3, #0
 8001890:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001892:	2300      	movs	r3, #0
 8001894:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001896:	1d3b      	adds	r3, r7, #4
 8001898:	2100      	movs	r1, #0
 800189a:	4618      	mov	r0, r3
 800189c:	f000 ffd6 	bl	800284c <HAL_RCC_ClockConfig>
 80018a0:	4603      	mov	r3, r0
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d001      	beq.n	80018aa <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80018a6:	f000 f8ff 	bl	8001aa8 <Error_Handler>
  }
}
 80018aa:	bf00      	nop
 80018ac:	3740      	adds	r7, #64	; 0x40
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}
 80018b2:	0000      	movs	r0, r0
 80018b4:	0000      	movs	r0, r0
	...

080018b8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80018b8:	b5b0      	push	{r4, r5, r7, lr}
 80018ba:	b086      	sub	sp, #24
 80018bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018be:	f107 0308 	add.w	r3, r7, #8
 80018c2:	2200      	movs	r2, #0
 80018c4:	601a      	str	r2, [r3, #0]
 80018c6:	605a      	str	r2, [r3, #4]
 80018c8:	609a      	str	r2, [r3, #8]
 80018ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018cc:	463b      	mov	r3, r7
 80018ce:	2200      	movs	r2, #0
 80018d0:	601a      	str	r2, [r3, #0]
 80018d2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80018d4:	4b3a      	ldr	r3, [pc, #232]	; (80019c0 <MX_TIM2_Init+0x108>)
 80018d6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80018da:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 80018dc:	4b38      	ldr	r3, [pc, #224]	; (80019c0 <MX_TIM2_Init+0x108>)
 80018de:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80018e2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018e4:	4b36      	ldr	r3, [pc, #216]	; (80019c0 <MX_TIM2_Init+0x108>)
 80018e6:	2200      	movs	r2, #0
 80018e8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 80018ea:	4b35      	ldr	r3, [pc, #212]	; (80019c0 <MX_TIM2_Init+0x108>)
 80018ec:	2209      	movs	r2, #9
 80018ee:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018f0:	4b33      	ldr	r3, [pc, #204]	; (80019c0 <MX_TIM2_Init+0x108>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018f6:	4b32      	ldr	r3, [pc, #200]	; (80019c0 <MX_TIM2_Init+0x108>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80018fc:	4830      	ldr	r0, [pc, #192]	; (80019c0 <MX_TIM2_Init+0x108>)
 80018fe:	f001 f901 	bl	8002b04 <HAL_TIM_Base_Init>
 8001902:	4603      	mov	r3, r0
 8001904:	2b00      	cmp	r3, #0
 8001906:	d001      	beq.n	800190c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001908:	f000 f8ce 	bl	8001aa8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800190c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001910:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001912:	f107 0308 	add.w	r3, r7, #8
 8001916:	4619      	mov	r1, r3
 8001918:	4829      	ldr	r0, [pc, #164]	; (80019c0 <MX_TIM2_Init+0x108>)
 800191a:	f001 fa97 	bl	8002e4c <HAL_TIM_ConfigClockSource>
 800191e:	4603      	mov	r3, r0
 8001920:	2b00      	cmp	r3, #0
 8001922:	d001      	beq.n	8001928 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001924:	f000 f8c0 	bl	8001aa8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001928:	2300      	movs	r3, #0
 800192a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800192c:	2300      	movs	r3, #0
 800192e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001930:	463b      	mov	r3, r7
 8001932:	4619      	mov	r1, r3
 8001934:	4822      	ldr	r0, [pc, #136]	; (80019c0 <MX_TIM2_Init+0x108>)
 8001936:	f001 fc63 	bl	8003200 <HAL_TIMEx_MasterConfigSynchronization>
 800193a:	4603      	mov	r3, r0
 800193c:	2b00      	cmp	r3, #0
 800193e:	d001      	beq.n	8001944 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001940:	f000 f8b2 	bl	8001aa8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
  TIME_CYCLE = 1/(8e6/(htim2.Init.Prescaler + 1)/(htim2.Init.Period + 1)) * 1000;
 8001944:	4b1e      	ldr	r3, [pc, #120]	; (80019c0 <MX_TIM2_Init+0x108>)
 8001946:	685b      	ldr	r3, [r3, #4]
 8001948:	3301      	adds	r3, #1
 800194a:	4618      	mov	r0, r3
 800194c:	f7fe fd42 	bl	80003d4 <__aeabi_ui2d>
 8001950:	4602      	mov	r2, r0
 8001952:	460b      	mov	r3, r1
 8001954:	a118      	add	r1, pc, #96	; (adr r1, 80019b8 <MX_TIM2_Init+0x100>)
 8001956:	e9d1 0100 	ldrd	r0, r1, [r1]
 800195a:	f7fe fedf 	bl	800071c <__aeabi_ddiv>
 800195e:	4602      	mov	r2, r0
 8001960:	460b      	mov	r3, r1
 8001962:	4614      	mov	r4, r2
 8001964:	461d      	mov	r5, r3
 8001966:	4b16      	ldr	r3, [pc, #88]	; (80019c0 <MX_TIM2_Init+0x108>)
 8001968:	68db      	ldr	r3, [r3, #12]
 800196a:	3301      	adds	r3, #1
 800196c:	4618      	mov	r0, r3
 800196e:	f7fe fd31 	bl	80003d4 <__aeabi_ui2d>
 8001972:	4602      	mov	r2, r0
 8001974:	460b      	mov	r3, r1
 8001976:	4620      	mov	r0, r4
 8001978:	4629      	mov	r1, r5
 800197a:	f7fe fecf 	bl	800071c <__aeabi_ddiv>
 800197e:	4602      	mov	r2, r0
 8001980:	460b      	mov	r3, r1
 8001982:	f04f 0000 	mov.w	r0, #0
 8001986:	490f      	ldr	r1, [pc, #60]	; (80019c4 <MX_TIM2_Init+0x10c>)
 8001988:	f7fe fec8 	bl	800071c <__aeabi_ddiv>
 800198c:	4602      	mov	r2, r0
 800198e:	460b      	mov	r3, r1
 8001990:	4610      	mov	r0, r2
 8001992:	4619      	mov	r1, r3
 8001994:	f04f 0200 	mov.w	r2, #0
 8001998:	4b0b      	ldr	r3, [pc, #44]	; (80019c8 <MX_TIM2_Init+0x110>)
 800199a:	f7fe fd95 	bl	80004c8 <__aeabi_dmul>
 800199e:	4602      	mov	r2, r0
 80019a0:	460b      	mov	r3, r1
 80019a2:	4610      	mov	r0, r2
 80019a4:	4619      	mov	r1, r3
 80019a6:	f7fe ffa1 	bl	80008ec <__aeabi_d2iz>
 80019aa:	4603      	mov	r3, r0
 80019ac:	4a07      	ldr	r2, [pc, #28]	; (80019cc <MX_TIM2_Init+0x114>)
 80019ae:	6013      	str	r3, [r2, #0]
  /* USER CODE END TIM2_Init 2 */

}
 80019b0:	bf00      	nop
 80019b2:	3718      	adds	r7, #24
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bdb0      	pop	{r4, r5, r7, pc}
 80019b8:	00000000 	.word	0x00000000
 80019bc:	415e8480 	.word	0x415e8480
 80019c0:	200000cc 	.word	0x200000cc
 80019c4:	3ff00000 	.word	0x3ff00000
 80019c8:	408f4000 	.word	0x408f4000
 80019cc:	20000114 	.word	0x20000114

080019d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b086      	sub	sp, #24
 80019d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019d6:	f107 0308 	add.w	r3, r7, #8
 80019da:	2200      	movs	r2, #0
 80019dc:	601a      	str	r2, [r3, #0]
 80019de:	605a      	str	r2, [r3, #4]
 80019e0:	609a      	str	r2, [r3, #8]
 80019e2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019e4:	4b27      	ldr	r3, [pc, #156]	; (8001a84 <MX_GPIO_Init+0xb4>)
 80019e6:	699b      	ldr	r3, [r3, #24]
 80019e8:	4a26      	ldr	r2, [pc, #152]	; (8001a84 <MX_GPIO_Init+0xb4>)
 80019ea:	f043 0304 	orr.w	r3, r3, #4
 80019ee:	6193      	str	r3, [r2, #24]
 80019f0:	4b24      	ldr	r3, [pc, #144]	; (8001a84 <MX_GPIO_Init+0xb4>)
 80019f2:	699b      	ldr	r3, [r3, #24]
 80019f4:	f003 0304 	and.w	r3, r3, #4
 80019f8:	607b      	str	r3, [r7, #4]
 80019fa:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80019fc:	4b21      	ldr	r3, [pc, #132]	; (8001a84 <MX_GPIO_Init+0xb4>)
 80019fe:	699b      	ldr	r3, [r3, #24]
 8001a00:	4a20      	ldr	r2, [pc, #128]	; (8001a84 <MX_GPIO_Init+0xb4>)
 8001a02:	f043 0308 	orr.w	r3, r3, #8
 8001a06:	6193      	str	r3, [r2, #24]
 8001a08:	4b1e      	ldr	r3, [pc, #120]	; (8001a84 <MX_GPIO_Init+0xb4>)
 8001a0a:	699b      	ldr	r3, [r3, #24]
 8001a0c:	f003 0308 	and.w	r3, r3, #8
 8001a10:	603b      	str	r3, [r7, #0]
 8001a12:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, EN0_Pin|EN1_Pin|EN2_Pin|EN3_Pin
 8001a14:	2200      	movs	r2, #0
 8001a16:	f64f 71c0 	movw	r1, #65472	; 0xffc0
 8001a1a:	481b      	ldr	r0, [pc, #108]	; (8001a88 <MX_GPIO_Init+0xb8>)
 8001a1c:	f000 fc65 	bl	80022ea <HAL_GPIO_WritePin>
                          |R1_Pin|A1_Pin|G1_Pin|R2_Pin
                          |A2_Pin|G2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SEG0_Pin|SEG1_Pin|SEG2_Pin|SEG3_Pin
 8001a20:	2200      	movs	r2, #0
 8001a22:	217f      	movs	r1, #127	; 0x7f
 8001a24:	4819      	ldr	r0, [pc, #100]	; (8001a8c <MX_GPIO_Init+0xbc>)
 8001a26:	f000 fc60 	bl	80022ea <HAL_GPIO_WritePin>
                          |SEG4_Pin|SEG5_Pin|SEG6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : BTN1_Pin BTN2_Pin BTN3_Pin */
  GPIO_InitStruct.Pin = BTN1_Pin|BTN2_Pin|BTN3_Pin;
 8001a2a:	2338      	movs	r3, #56	; 0x38
 8001a2c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a32:	2301      	movs	r3, #1
 8001a34:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a36:	f107 0308 	add.w	r3, r7, #8
 8001a3a:	4619      	mov	r1, r3
 8001a3c:	4812      	ldr	r0, [pc, #72]	; (8001a88 <MX_GPIO_Init+0xb8>)
 8001a3e:	f000 fac3 	bl	8001fc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : EN0_Pin EN1_Pin EN2_Pin EN3_Pin
                           R1_Pin A1_Pin G1_Pin R2_Pin
                           A2_Pin G2_Pin */
  GPIO_InitStruct.Pin = EN0_Pin|EN1_Pin|EN2_Pin|EN3_Pin
 8001a42:	f64f 73c0 	movw	r3, #65472	; 0xffc0
 8001a46:	60bb      	str	r3, [r7, #8]
                          |R1_Pin|A1_Pin|G1_Pin|R2_Pin
                          |A2_Pin|G2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a48:	2301      	movs	r3, #1
 8001a4a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a50:	2302      	movs	r3, #2
 8001a52:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a54:	f107 0308 	add.w	r3, r7, #8
 8001a58:	4619      	mov	r1, r3
 8001a5a:	480b      	ldr	r0, [pc, #44]	; (8001a88 <MX_GPIO_Init+0xb8>)
 8001a5c:	f000 fab4 	bl	8001fc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG0_Pin SEG1_Pin SEG2_Pin SEG3_Pin
                           SEG4_Pin SEG5_Pin SEG6_Pin */
  GPIO_InitStruct.Pin = SEG0_Pin|SEG1_Pin|SEG2_Pin|SEG3_Pin
 8001a60:	237f      	movs	r3, #127	; 0x7f
 8001a62:	60bb      	str	r3, [r7, #8]
                          |SEG4_Pin|SEG5_Pin|SEG6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a64:	2301      	movs	r3, #1
 8001a66:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a6c:	2302      	movs	r3, #2
 8001a6e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a70:	f107 0308 	add.w	r3, r7, #8
 8001a74:	4619      	mov	r1, r3
 8001a76:	4805      	ldr	r0, [pc, #20]	; (8001a8c <MX_GPIO_Init+0xbc>)
 8001a78:	f000 faa6 	bl	8001fc8 <HAL_GPIO_Init>

}
 8001a7c:	bf00      	nop
 8001a7e:	3718      	adds	r7, #24
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bd80      	pop	{r7, pc}
 8001a84:	40021000 	.word	0x40021000
 8001a88:	40010800 	.word	0x40010800
 8001a8c:	40010c00 	.word	0x40010c00

08001a90 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback (TIM_HandleTypeDef * htim){
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b082      	sub	sp, #8
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
	timerRun();
 8001a98:	f000 f842 	bl	8001b20 <timerRun>
	getKeyInput();
 8001a9c:	f7fe ff78 	bl	8000990 <getKeyInput>
}
 8001aa0:	bf00      	nop
 8001aa2:	3708      	adds	r7, #8
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bd80      	pop	{r7, pc}

08001aa8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001aac:	b672      	cpsid	i
}
 8001aae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ab0:	e7fe      	b.n	8001ab0 <Error_Handler+0x8>
	...

08001ab4 <setTimer>:
int TIME_CYCLE;

int timer_counter[NUM_OF_TIMERS] = {0};
int timer_flag[NUM_OF_TIMERS] = {0};

void setTimer(int index, int duration){
 8001ab4:	b480      	push	{r7}
 8001ab6:	b083      	sub	sp, #12
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
 8001abc:	6039      	str	r1, [r7, #0]
	timer_counter[index] = duration / TIME_CYCLE;
 8001abe:	4b09      	ldr	r3, [pc, #36]	; (8001ae4 <setTimer+0x30>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	683a      	ldr	r2, [r7, #0]
 8001ac4:	fb92 f2f3 	sdiv	r2, r2, r3
 8001ac8:	4907      	ldr	r1, [pc, #28]	; (8001ae8 <setTimer+0x34>)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	timer_flag[index] = 0;
 8001ad0:	4a06      	ldr	r2, [pc, #24]	; (8001aec <setTimer+0x38>)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	2100      	movs	r1, #0
 8001ad6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8001ada:	bf00      	nop
 8001adc:	370c      	adds	r7, #12
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bc80      	pop	{r7}
 8001ae2:	4770      	bx	lr
 8001ae4:	20000114 	.word	0x20000114
 8001ae8:	200000ac 	.word	0x200000ac
 8001aec:	200000bc 	.word	0x200000bc

08001af0 <clearTimer>:

void clearTimer(int index){
 8001af0:	b480      	push	{r7}
 8001af2:	b083      	sub	sp, #12
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
	timer_counter[index] = 0;
 8001af8:	4a07      	ldr	r2, [pc, #28]	; (8001b18 <clearTimer+0x28>)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	2100      	movs	r1, #0
 8001afe:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	timer_flag[index] = 0;
 8001b02:	4a06      	ldr	r2, [pc, #24]	; (8001b1c <clearTimer+0x2c>)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	2100      	movs	r1, #0
 8001b08:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8001b0c:	bf00      	nop
 8001b0e:	370c      	adds	r7, #12
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bc80      	pop	{r7}
 8001b14:	4770      	bx	lr
 8001b16:	bf00      	nop
 8001b18:	200000ac 	.word	0x200000ac
 8001b1c:	200000bc 	.word	0x200000bc

08001b20 <timerRun>:

void timerRun(){
 8001b20:	b480      	push	{r7}
 8001b22:	b083      	sub	sp, #12
 8001b24:	af00      	add	r7, sp, #0
	for (int i = 0; i < NUM_OF_TIMERS; i++){
 8001b26:	2300      	movs	r3, #0
 8001b28:	607b      	str	r3, [r7, #4]
 8001b2a:	e01c      	b.n	8001b66 <timerRun+0x46>
		if (timer_counter[i] > 0){
 8001b2c:	4a12      	ldr	r2, [pc, #72]	; (8001b78 <timerRun+0x58>)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	dd13      	ble.n	8001b60 <timerRun+0x40>
			timer_counter[i]--;
 8001b38:	4a0f      	ldr	r2, [pc, #60]	; (8001b78 <timerRun+0x58>)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b40:	1e5a      	subs	r2, r3, #1
 8001b42:	490d      	ldr	r1, [pc, #52]	; (8001b78 <timerRun+0x58>)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if (timer_counter[i] <= 0){
 8001b4a:	4a0b      	ldr	r2, [pc, #44]	; (8001b78 <timerRun+0x58>)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	dc04      	bgt.n	8001b60 <timerRun+0x40>
				timer_flag[i] = 1;
 8001b56:	4a09      	ldr	r2, [pc, #36]	; (8001b7c <timerRun+0x5c>)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2101      	movs	r1, #1
 8001b5c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < NUM_OF_TIMERS; i++){
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	3301      	adds	r3, #1
 8001b64:	607b      	str	r3, [r7, #4]
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	2b03      	cmp	r3, #3
 8001b6a:	dddf      	ble.n	8001b2c <timerRun+0xc>
			}
		}
	}
}
 8001b6c:	bf00      	nop
 8001b6e:	bf00      	nop
 8001b70:	370c      	adds	r7, #12
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bc80      	pop	{r7}
 8001b76:	4770      	bx	lr
 8001b78:	200000ac 	.word	0x200000ac
 8001b7c:	200000bc 	.word	0x200000bc

08001b80 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b80:	b480      	push	{r7}
 8001b82:	b085      	sub	sp, #20
 8001b84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001b86:	4b15      	ldr	r3, [pc, #84]	; (8001bdc <HAL_MspInit+0x5c>)
 8001b88:	699b      	ldr	r3, [r3, #24]
 8001b8a:	4a14      	ldr	r2, [pc, #80]	; (8001bdc <HAL_MspInit+0x5c>)
 8001b8c:	f043 0301 	orr.w	r3, r3, #1
 8001b90:	6193      	str	r3, [r2, #24]
 8001b92:	4b12      	ldr	r3, [pc, #72]	; (8001bdc <HAL_MspInit+0x5c>)
 8001b94:	699b      	ldr	r3, [r3, #24]
 8001b96:	f003 0301 	and.w	r3, r3, #1
 8001b9a:	60bb      	str	r3, [r7, #8]
 8001b9c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b9e:	4b0f      	ldr	r3, [pc, #60]	; (8001bdc <HAL_MspInit+0x5c>)
 8001ba0:	69db      	ldr	r3, [r3, #28]
 8001ba2:	4a0e      	ldr	r2, [pc, #56]	; (8001bdc <HAL_MspInit+0x5c>)
 8001ba4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ba8:	61d3      	str	r3, [r2, #28]
 8001baa:	4b0c      	ldr	r3, [pc, #48]	; (8001bdc <HAL_MspInit+0x5c>)
 8001bac:	69db      	ldr	r3, [r3, #28]
 8001bae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bb2:	607b      	str	r3, [r7, #4]
 8001bb4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8001bb6:	4b0a      	ldr	r3, [pc, #40]	; (8001be0 <HAL_MspInit+0x60>)
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	60fb      	str	r3, [r7, #12]
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001bc2:	60fb      	str	r3, [r7, #12]
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001bca:	60fb      	str	r3, [r7, #12]
 8001bcc:	4a04      	ldr	r2, [pc, #16]	; (8001be0 <HAL_MspInit+0x60>)
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001bd2:	bf00      	nop
 8001bd4:	3714      	adds	r7, #20
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bc80      	pop	{r7}
 8001bda:	4770      	bx	lr
 8001bdc:	40021000 	.word	0x40021000
 8001be0:	40010000 	.word	0x40010000

08001be4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b084      	sub	sp, #16
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001bf4:	d113      	bne.n	8001c1e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001bf6:	4b0c      	ldr	r3, [pc, #48]	; (8001c28 <HAL_TIM_Base_MspInit+0x44>)
 8001bf8:	69db      	ldr	r3, [r3, #28]
 8001bfa:	4a0b      	ldr	r2, [pc, #44]	; (8001c28 <HAL_TIM_Base_MspInit+0x44>)
 8001bfc:	f043 0301 	orr.w	r3, r3, #1
 8001c00:	61d3      	str	r3, [r2, #28]
 8001c02:	4b09      	ldr	r3, [pc, #36]	; (8001c28 <HAL_TIM_Base_MspInit+0x44>)
 8001c04:	69db      	ldr	r3, [r3, #28]
 8001c06:	f003 0301 	and.w	r3, r3, #1
 8001c0a:	60fb      	str	r3, [r7, #12]
 8001c0c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001c0e:	2200      	movs	r2, #0
 8001c10:	2100      	movs	r1, #0
 8001c12:	201c      	movs	r0, #28
 8001c14:	f000 f9a1 	bl	8001f5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001c18:	201c      	movs	r0, #28
 8001c1a:	f000 f9ba 	bl	8001f92 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001c1e:	bf00      	nop
 8001c20:	3710      	adds	r7, #16
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}
 8001c26:	bf00      	nop
 8001c28:	40021000 	.word	0x40021000

08001c2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c30:	e7fe      	b.n	8001c30 <NMI_Handler+0x4>

08001c32 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c32:	b480      	push	{r7}
 8001c34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c36:	e7fe      	b.n	8001c36 <HardFault_Handler+0x4>

08001c38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c3c:	e7fe      	b.n	8001c3c <MemManage_Handler+0x4>

08001c3e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c3e:	b480      	push	{r7}
 8001c40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c42:	e7fe      	b.n	8001c42 <BusFault_Handler+0x4>

08001c44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c44:	b480      	push	{r7}
 8001c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c48:	e7fe      	b.n	8001c48 <UsageFault_Handler+0x4>

08001c4a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c4a:	b480      	push	{r7}
 8001c4c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c4e:	bf00      	nop
 8001c50:	46bd      	mov	sp, r7
 8001c52:	bc80      	pop	{r7}
 8001c54:	4770      	bx	lr

08001c56 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c56:	b480      	push	{r7}
 8001c58:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c5a:	bf00      	nop
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bc80      	pop	{r7}
 8001c60:	4770      	bx	lr

08001c62 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c62:	b480      	push	{r7}
 8001c64:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c66:	bf00      	nop
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bc80      	pop	{r7}
 8001c6c:	4770      	bx	lr

08001c6e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c6e:	b580      	push	{r7, lr}
 8001c70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c72:	f000 f87f 	bl	8001d74 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c76:	bf00      	nop
 8001c78:	bd80      	pop	{r7, pc}
	...

08001c7c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001c80:	4802      	ldr	r0, [pc, #8]	; (8001c8c <TIM2_IRQHandler+0x10>)
 8001c82:	f000 ffdb 	bl	8002c3c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001c86:	bf00      	nop
 8001c88:	bd80      	pop	{r7, pc}
 8001c8a:	bf00      	nop
 8001c8c:	200000cc 	.word	0x200000cc

08001c90 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001c90:	b480      	push	{r7}
 8001c92:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c94:	bf00      	nop
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bc80      	pop	{r7}
 8001c9a:	4770      	bx	lr

08001c9c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001c9c:	f7ff fff8 	bl	8001c90 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ca0:	480b      	ldr	r0, [pc, #44]	; (8001cd0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001ca2:	490c      	ldr	r1, [pc, #48]	; (8001cd4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001ca4:	4a0c      	ldr	r2, [pc, #48]	; (8001cd8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001ca6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ca8:	e002      	b.n	8001cb0 <LoopCopyDataInit>

08001caa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001caa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001cac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001cae:	3304      	adds	r3, #4

08001cb0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001cb0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001cb2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001cb4:	d3f9      	bcc.n	8001caa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001cb6:	4a09      	ldr	r2, [pc, #36]	; (8001cdc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001cb8:	4c09      	ldr	r4, [pc, #36]	; (8001ce0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001cba:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001cbc:	e001      	b.n	8001cc2 <LoopFillZerobss>

08001cbe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001cbe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001cc0:	3204      	adds	r2, #4

08001cc2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001cc2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001cc4:	d3fb      	bcc.n	8001cbe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001cc6:	f001 fb05 	bl	80032d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001cca:	f7ff fda5 	bl	8001818 <main>
  bx lr
 8001cce:	4770      	bx	lr
  ldr r0, =_sdata
 8001cd0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001cd4:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8001cd8:	0800337c 	.word	0x0800337c
  ldr r2, =_sbss
 8001cdc:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8001ce0:	2000011c 	.word	0x2000011c

08001ce4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001ce4:	e7fe      	b.n	8001ce4 <ADC1_2_IRQHandler>
	...

08001ce8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001cec:	4b08      	ldr	r3, [pc, #32]	; (8001d10 <HAL_Init+0x28>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	4a07      	ldr	r2, [pc, #28]	; (8001d10 <HAL_Init+0x28>)
 8001cf2:	f043 0310 	orr.w	r3, r3, #16
 8001cf6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001cf8:	2003      	movs	r0, #3
 8001cfa:	f000 f923 	bl	8001f44 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001cfe:	200f      	movs	r0, #15
 8001d00:	f000 f808 	bl	8001d14 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d04:	f7ff ff3c 	bl	8001b80 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d08:	2300      	movs	r3, #0
}
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	bd80      	pop	{r7, pc}
 8001d0e:	bf00      	nop
 8001d10:	40022000 	.word	0x40022000

08001d14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b082      	sub	sp, #8
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d1c:	4b12      	ldr	r3, [pc, #72]	; (8001d68 <HAL_InitTick+0x54>)
 8001d1e:	681a      	ldr	r2, [r3, #0]
 8001d20:	4b12      	ldr	r3, [pc, #72]	; (8001d6c <HAL_InitTick+0x58>)
 8001d22:	781b      	ldrb	r3, [r3, #0]
 8001d24:	4619      	mov	r1, r3
 8001d26:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d2a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d32:	4618      	mov	r0, r3
 8001d34:	f000 f93b 	bl	8001fae <HAL_SYSTICK_Config>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d001      	beq.n	8001d42 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001d3e:	2301      	movs	r3, #1
 8001d40:	e00e      	b.n	8001d60 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	2b0f      	cmp	r3, #15
 8001d46:	d80a      	bhi.n	8001d5e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d48:	2200      	movs	r2, #0
 8001d4a:	6879      	ldr	r1, [r7, #4]
 8001d4c:	f04f 30ff 	mov.w	r0, #4294967295
 8001d50:	f000 f903 	bl	8001f5a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d54:	4a06      	ldr	r2, [pc, #24]	; (8001d70 <HAL_InitTick+0x5c>)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	e000      	b.n	8001d60 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d5e:	2301      	movs	r3, #1
}
 8001d60:	4618      	mov	r0, r3
 8001d62:	3708      	adds	r7, #8
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bd80      	pop	{r7, pc}
 8001d68:	20000054 	.word	0x20000054
 8001d6c:	2000005c 	.word	0x2000005c
 8001d70:	20000058 	.word	0x20000058

08001d74 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d74:	b480      	push	{r7}
 8001d76:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d78:	4b05      	ldr	r3, [pc, #20]	; (8001d90 <HAL_IncTick+0x1c>)
 8001d7a:	781b      	ldrb	r3, [r3, #0]
 8001d7c:	461a      	mov	r2, r3
 8001d7e:	4b05      	ldr	r3, [pc, #20]	; (8001d94 <HAL_IncTick+0x20>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	4413      	add	r3, r2
 8001d84:	4a03      	ldr	r2, [pc, #12]	; (8001d94 <HAL_IncTick+0x20>)
 8001d86:	6013      	str	r3, [r2, #0]
}
 8001d88:	bf00      	nop
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bc80      	pop	{r7}
 8001d8e:	4770      	bx	lr
 8001d90:	2000005c 	.word	0x2000005c
 8001d94:	20000118 	.word	0x20000118

08001d98 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	af00      	add	r7, sp, #0
  return uwTick;
 8001d9c:	4b02      	ldr	r3, [pc, #8]	; (8001da8 <HAL_GetTick+0x10>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
}
 8001da0:	4618      	mov	r0, r3
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bc80      	pop	{r7}
 8001da6:	4770      	bx	lr
 8001da8:	20000118 	.word	0x20000118

08001dac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001dac:	b480      	push	{r7}
 8001dae:	b085      	sub	sp, #20
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	f003 0307 	and.w	r3, r3, #7
 8001dba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001dbc:	4b0c      	ldr	r3, [pc, #48]	; (8001df0 <__NVIC_SetPriorityGrouping+0x44>)
 8001dbe:	68db      	ldr	r3, [r3, #12]
 8001dc0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001dc2:	68ba      	ldr	r2, [r7, #8]
 8001dc4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001dc8:	4013      	ands	r3, r2
 8001dca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001dd0:	68bb      	ldr	r3, [r7, #8]
 8001dd2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001dd4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001dd8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ddc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001dde:	4a04      	ldr	r2, [pc, #16]	; (8001df0 <__NVIC_SetPriorityGrouping+0x44>)
 8001de0:	68bb      	ldr	r3, [r7, #8]
 8001de2:	60d3      	str	r3, [r2, #12]
}
 8001de4:	bf00      	nop
 8001de6:	3714      	adds	r7, #20
 8001de8:	46bd      	mov	sp, r7
 8001dea:	bc80      	pop	{r7}
 8001dec:	4770      	bx	lr
 8001dee:	bf00      	nop
 8001df0:	e000ed00 	.word	0xe000ed00

08001df4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001df4:	b480      	push	{r7}
 8001df6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001df8:	4b04      	ldr	r3, [pc, #16]	; (8001e0c <__NVIC_GetPriorityGrouping+0x18>)
 8001dfa:	68db      	ldr	r3, [r3, #12]
 8001dfc:	0a1b      	lsrs	r3, r3, #8
 8001dfe:	f003 0307 	and.w	r3, r3, #7
}
 8001e02:	4618      	mov	r0, r3
 8001e04:	46bd      	mov	sp, r7
 8001e06:	bc80      	pop	{r7}
 8001e08:	4770      	bx	lr
 8001e0a:	bf00      	nop
 8001e0c:	e000ed00 	.word	0xe000ed00

08001e10 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e10:	b480      	push	{r7}
 8001e12:	b083      	sub	sp, #12
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	4603      	mov	r3, r0
 8001e18:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	db0b      	blt.n	8001e3a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e22:	79fb      	ldrb	r3, [r7, #7]
 8001e24:	f003 021f 	and.w	r2, r3, #31
 8001e28:	4906      	ldr	r1, [pc, #24]	; (8001e44 <__NVIC_EnableIRQ+0x34>)
 8001e2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e2e:	095b      	lsrs	r3, r3, #5
 8001e30:	2001      	movs	r0, #1
 8001e32:	fa00 f202 	lsl.w	r2, r0, r2
 8001e36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001e3a:	bf00      	nop
 8001e3c:	370c      	adds	r7, #12
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bc80      	pop	{r7}
 8001e42:	4770      	bx	lr
 8001e44:	e000e100 	.word	0xe000e100

08001e48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	b083      	sub	sp, #12
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	4603      	mov	r3, r0
 8001e50:	6039      	str	r1, [r7, #0]
 8001e52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	db0a      	blt.n	8001e72 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	b2da      	uxtb	r2, r3
 8001e60:	490c      	ldr	r1, [pc, #48]	; (8001e94 <__NVIC_SetPriority+0x4c>)
 8001e62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e66:	0112      	lsls	r2, r2, #4
 8001e68:	b2d2      	uxtb	r2, r2
 8001e6a:	440b      	add	r3, r1
 8001e6c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e70:	e00a      	b.n	8001e88 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	b2da      	uxtb	r2, r3
 8001e76:	4908      	ldr	r1, [pc, #32]	; (8001e98 <__NVIC_SetPriority+0x50>)
 8001e78:	79fb      	ldrb	r3, [r7, #7]
 8001e7a:	f003 030f 	and.w	r3, r3, #15
 8001e7e:	3b04      	subs	r3, #4
 8001e80:	0112      	lsls	r2, r2, #4
 8001e82:	b2d2      	uxtb	r2, r2
 8001e84:	440b      	add	r3, r1
 8001e86:	761a      	strb	r2, [r3, #24]
}
 8001e88:	bf00      	nop
 8001e8a:	370c      	adds	r7, #12
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	bc80      	pop	{r7}
 8001e90:	4770      	bx	lr
 8001e92:	bf00      	nop
 8001e94:	e000e100 	.word	0xe000e100
 8001e98:	e000ed00 	.word	0xe000ed00

08001e9c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	b089      	sub	sp, #36	; 0x24
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	60f8      	str	r0, [r7, #12]
 8001ea4:	60b9      	str	r1, [r7, #8]
 8001ea6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	f003 0307 	and.w	r3, r3, #7
 8001eae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001eb0:	69fb      	ldr	r3, [r7, #28]
 8001eb2:	f1c3 0307 	rsb	r3, r3, #7
 8001eb6:	2b04      	cmp	r3, #4
 8001eb8:	bf28      	it	cs
 8001eba:	2304      	movcs	r3, #4
 8001ebc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ebe:	69fb      	ldr	r3, [r7, #28]
 8001ec0:	3304      	adds	r3, #4
 8001ec2:	2b06      	cmp	r3, #6
 8001ec4:	d902      	bls.n	8001ecc <NVIC_EncodePriority+0x30>
 8001ec6:	69fb      	ldr	r3, [r7, #28]
 8001ec8:	3b03      	subs	r3, #3
 8001eca:	e000      	b.n	8001ece <NVIC_EncodePriority+0x32>
 8001ecc:	2300      	movs	r3, #0
 8001ece:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ed0:	f04f 32ff 	mov.w	r2, #4294967295
 8001ed4:	69bb      	ldr	r3, [r7, #24]
 8001ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eda:	43da      	mvns	r2, r3
 8001edc:	68bb      	ldr	r3, [r7, #8]
 8001ede:	401a      	ands	r2, r3
 8001ee0:	697b      	ldr	r3, [r7, #20]
 8001ee2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ee4:	f04f 31ff 	mov.w	r1, #4294967295
 8001ee8:	697b      	ldr	r3, [r7, #20]
 8001eea:	fa01 f303 	lsl.w	r3, r1, r3
 8001eee:	43d9      	mvns	r1, r3
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ef4:	4313      	orrs	r3, r2
         );
}
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	3724      	adds	r7, #36	; 0x24
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bc80      	pop	{r7}
 8001efe:	4770      	bx	lr

08001f00 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b082      	sub	sp, #8
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	3b01      	subs	r3, #1
 8001f0c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f10:	d301      	bcc.n	8001f16 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f12:	2301      	movs	r3, #1
 8001f14:	e00f      	b.n	8001f36 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f16:	4a0a      	ldr	r2, [pc, #40]	; (8001f40 <SysTick_Config+0x40>)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	3b01      	subs	r3, #1
 8001f1c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f1e:	210f      	movs	r1, #15
 8001f20:	f04f 30ff 	mov.w	r0, #4294967295
 8001f24:	f7ff ff90 	bl	8001e48 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f28:	4b05      	ldr	r3, [pc, #20]	; (8001f40 <SysTick_Config+0x40>)
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f2e:	4b04      	ldr	r3, [pc, #16]	; (8001f40 <SysTick_Config+0x40>)
 8001f30:	2207      	movs	r2, #7
 8001f32:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f34:	2300      	movs	r3, #0
}
 8001f36:	4618      	mov	r0, r3
 8001f38:	3708      	adds	r7, #8
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd80      	pop	{r7, pc}
 8001f3e:	bf00      	nop
 8001f40:	e000e010 	.word	0xe000e010

08001f44 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b082      	sub	sp, #8
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f4c:	6878      	ldr	r0, [r7, #4]
 8001f4e:	f7ff ff2d 	bl	8001dac <__NVIC_SetPriorityGrouping>
}
 8001f52:	bf00      	nop
 8001f54:	3708      	adds	r7, #8
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bd80      	pop	{r7, pc}

08001f5a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f5a:	b580      	push	{r7, lr}
 8001f5c:	b086      	sub	sp, #24
 8001f5e:	af00      	add	r7, sp, #0
 8001f60:	4603      	mov	r3, r0
 8001f62:	60b9      	str	r1, [r7, #8]
 8001f64:	607a      	str	r2, [r7, #4]
 8001f66:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f6c:	f7ff ff42 	bl	8001df4 <__NVIC_GetPriorityGrouping>
 8001f70:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f72:	687a      	ldr	r2, [r7, #4]
 8001f74:	68b9      	ldr	r1, [r7, #8]
 8001f76:	6978      	ldr	r0, [r7, #20]
 8001f78:	f7ff ff90 	bl	8001e9c <NVIC_EncodePriority>
 8001f7c:	4602      	mov	r2, r0
 8001f7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f82:	4611      	mov	r1, r2
 8001f84:	4618      	mov	r0, r3
 8001f86:	f7ff ff5f 	bl	8001e48 <__NVIC_SetPriority>
}
 8001f8a:	bf00      	nop
 8001f8c:	3718      	adds	r7, #24
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bd80      	pop	{r7, pc}

08001f92 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f92:	b580      	push	{r7, lr}
 8001f94:	b082      	sub	sp, #8
 8001f96:	af00      	add	r7, sp, #0
 8001f98:	4603      	mov	r3, r0
 8001f9a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	f7ff ff35 	bl	8001e10 <__NVIC_EnableIRQ>
}
 8001fa6:	bf00      	nop
 8001fa8:	3708      	adds	r7, #8
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bd80      	pop	{r7, pc}

08001fae <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001fae:	b580      	push	{r7, lr}
 8001fb0:	b082      	sub	sp, #8
 8001fb2:	af00      	add	r7, sp, #0
 8001fb4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001fb6:	6878      	ldr	r0, [r7, #4]
 8001fb8:	f7ff ffa2 	bl	8001f00 <SysTick_Config>
 8001fbc:	4603      	mov	r3, r0
}
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	3708      	adds	r7, #8
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bd80      	pop	{r7, pc}
	...

08001fc8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	b08b      	sub	sp, #44	; 0x2c
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
 8001fd0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001fda:	e148      	b.n	800226e <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001fdc:	2201      	movs	r2, #1
 8001fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	69fa      	ldr	r2, [r7, #28]
 8001fec:	4013      	ands	r3, r2
 8001fee:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001ff0:	69ba      	ldr	r2, [r7, #24]
 8001ff2:	69fb      	ldr	r3, [r7, #28]
 8001ff4:	429a      	cmp	r2, r3
 8001ff6:	f040 8137 	bne.w	8002268 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	4aa3      	ldr	r2, [pc, #652]	; (800228c <HAL_GPIO_Init+0x2c4>)
 8002000:	4293      	cmp	r3, r2
 8002002:	d05e      	beq.n	80020c2 <HAL_GPIO_Init+0xfa>
 8002004:	4aa1      	ldr	r2, [pc, #644]	; (800228c <HAL_GPIO_Init+0x2c4>)
 8002006:	4293      	cmp	r3, r2
 8002008:	d875      	bhi.n	80020f6 <HAL_GPIO_Init+0x12e>
 800200a:	4aa1      	ldr	r2, [pc, #644]	; (8002290 <HAL_GPIO_Init+0x2c8>)
 800200c:	4293      	cmp	r3, r2
 800200e:	d058      	beq.n	80020c2 <HAL_GPIO_Init+0xfa>
 8002010:	4a9f      	ldr	r2, [pc, #636]	; (8002290 <HAL_GPIO_Init+0x2c8>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d86f      	bhi.n	80020f6 <HAL_GPIO_Init+0x12e>
 8002016:	4a9f      	ldr	r2, [pc, #636]	; (8002294 <HAL_GPIO_Init+0x2cc>)
 8002018:	4293      	cmp	r3, r2
 800201a:	d052      	beq.n	80020c2 <HAL_GPIO_Init+0xfa>
 800201c:	4a9d      	ldr	r2, [pc, #628]	; (8002294 <HAL_GPIO_Init+0x2cc>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d869      	bhi.n	80020f6 <HAL_GPIO_Init+0x12e>
 8002022:	4a9d      	ldr	r2, [pc, #628]	; (8002298 <HAL_GPIO_Init+0x2d0>)
 8002024:	4293      	cmp	r3, r2
 8002026:	d04c      	beq.n	80020c2 <HAL_GPIO_Init+0xfa>
 8002028:	4a9b      	ldr	r2, [pc, #620]	; (8002298 <HAL_GPIO_Init+0x2d0>)
 800202a:	4293      	cmp	r3, r2
 800202c:	d863      	bhi.n	80020f6 <HAL_GPIO_Init+0x12e>
 800202e:	4a9b      	ldr	r2, [pc, #620]	; (800229c <HAL_GPIO_Init+0x2d4>)
 8002030:	4293      	cmp	r3, r2
 8002032:	d046      	beq.n	80020c2 <HAL_GPIO_Init+0xfa>
 8002034:	4a99      	ldr	r2, [pc, #612]	; (800229c <HAL_GPIO_Init+0x2d4>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d85d      	bhi.n	80020f6 <HAL_GPIO_Init+0x12e>
 800203a:	2b12      	cmp	r3, #18
 800203c:	d82a      	bhi.n	8002094 <HAL_GPIO_Init+0xcc>
 800203e:	2b12      	cmp	r3, #18
 8002040:	d859      	bhi.n	80020f6 <HAL_GPIO_Init+0x12e>
 8002042:	a201      	add	r2, pc, #4	; (adr r2, 8002048 <HAL_GPIO_Init+0x80>)
 8002044:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002048:	080020c3 	.word	0x080020c3
 800204c:	0800209d 	.word	0x0800209d
 8002050:	080020af 	.word	0x080020af
 8002054:	080020f1 	.word	0x080020f1
 8002058:	080020f7 	.word	0x080020f7
 800205c:	080020f7 	.word	0x080020f7
 8002060:	080020f7 	.word	0x080020f7
 8002064:	080020f7 	.word	0x080020f7
 8002068:	080020f7 	.word	0x080020f7
 800206c:	080020f7 	.word	0x080020f7
 8002070:	080020f7 	.word	0x080020f7
 8002074:	080020f7 	.word	0x080020f7
 8002078:	080020f7 	.word	0x080020f7
 800207c:	080020f7 	.word	0x080020f7
 8002080:	080020f7 	.word	0x080020f7
 8002084:	080020f7 	.word	0x080020f7
 8002088:	080020f7 	.word	0x080020f7
 800208c:	080020a5 	.word	0x080020a5
 8002090:	080020b9 	.word	0x080020b9
 8002094:	4a82      	ldr	r2, [pc, #520]	; (80022a0 <HAL_GPIO_Init+0x2d8>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d013      	beq.n	80020c2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800209a:	e02c      	b.n	80020f6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	68db      	ldr	r3, [r3, #12]
 80020a0:	623b      	str	r3, [r7, #32]
          break;
 80020a2:	e029      	b.n	80020f8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	68db      	ldr	r3, [r3, #12]
 80020a8:	3304      	adds	r3, #4
 80020aa:	623b      	str	r3, [r7, #32]
          break;
 80020ac:	e024      	b.n	80020f8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	68db      	ldr	r3, [r3, #12]
 80020b2:	3308      	adds	r3, #8
 80020b4:	623b      	str	r3, [r7, #32]
          break;
 80020b6:	e01f      	b.n	80020f8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	68db      	ldr	r3, [r3, #12]
 80020bc:	330c      	adds	r3, #12
 80020be:	623b      	str	r3, [r7, #32]
          break;
 80020c0:	e01a      	b.n	80020f8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	689b      	ldr	r3, [r3, #8]
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d102      	bne.n	80020d0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80020ca:	2304      	movs	r3, #4
 80020cc:	623b      	str	r3, [r7, #32]
          break;
 80020ce:	e013      	b.n	80020f8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	689b      	ldr	r3, [r3, #8]
 80020d4:	2b01      	cmp	r3, #1
 80020d6:	d105      	bne.n	80020e4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80020d8:	2308      	movs	r3, #8
 80020da:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	69fa      	ldr	r2, [r7, #28]
 80020e0:	611a      	str	r2, [r3, #16]
          break;
 80020e2:	e009      	b.n	80020f8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80020e4:	2308      	movs	r3, #8
 80020e6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	69fa      	ldr	r2, [r7, #28]
 80020ec:	615a      	str	r2, [r3, #20]
          break;
 80020ee:	e003      	b.n	80020f8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80020f0:	2300      	movs	r3, #0
 80020f2:	623b      	str	r3, [r7, #32]
          break;
 80020f4:	e000      	b.n	80020f8 <HAL_GPIO_Init+0x130>
          break;
 80020f6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80020f8:	69bb      	ldr	r3, [r7, #24]
 80020fa:	2bff      	cmp	r3, #255	; 0xff
 80020fc:	d801      	bhi.n	8002102 <HAL_GPIO_Init+0x13a>
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	e001      	b.n	8002106 <HAL_GPIO_Init+0x13e>
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	3304      	adds	r3, #4
 8002106:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002108:	69bb      	ldr	r3, [r7, #24]
 800210a:	2bff      	cmp	r3, #255	; 0xff
 800210c:	d802      	bhi.n	8002114 <HAL_GPIO_Init+0x14c>
 800210e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002110:	009b      	lsls	r3, r3, #2
 8002112:	e002      	b.n	800211a <HAL_GPIO_Init+0x152>
 8002114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002116:	3b08      	subs	r3, #8
 8002118:	009b      	lsls	r3, r3, #2
 800211a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800211c:	697b      	ldr	r3, [r7, #20]
 800211e:	681a      	ldr	r2, [r3, #0]
 8002120:	210f      	movs	r1, #15
 8002122:	693b      	ldr	r3, [r7, #16]
 8002124:	fa01 f303 	lsl.w	r3, r1, r3
 8002128:	43db      	mvns	r3, r3
 800212a:	401a      	ands	r2, r3
 800212c:	6a39      	ldr	r1, [r7, #32]
 800212e:	693b      	ldr	r3, [r7, #16]
 8002130:	fa01 f303 	lsl.w	r3, r1, r3
 8002134:	431a      	orrs	r2, r3
 8002136:	697b      	ldr	r3, [r7, #20]
 8002138:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	685b      	ldr	r3, [r3, #4]
 800213e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002142:	2b00      	cmp	r3, #0
 8002144:	f000 8090 	beq.w	8002268 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002148:	4b56      	ldr	r3, [pc, #344]	; (80022a4 <HAL_GPIO_Init+0x2dc>)
 800214a:	699b      	ldr	r3, [r3, #24]
 800214c:	4a55      	ldr	r2, [pc, #340]	; (80022a4 <HAL_GPIO_Init+0x2dc>)
 800214e:	f043 0301 	orr.w	r3, r3, #1
 8002152:	6193      	str	r3, [r2, #24]
 8002154:	4b53      	ldr	r3, [pc, #332]	; (80022a4 <HAL_GPIO_Init+0x2dc>)
 8002156:	699b      	ldr	r3, [r3, #24]
 8002158:	f003 0301 	and.w	r3, r3, #1
 800215c:	60bb      	str	r3, [r7, #8]
 800215e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002160:	4a51      	ldr	r2, [pc, #324]	; (80022a8 <HAL_GPIO_Init+0x2e0>)
 8002162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002164:	089b      	lsrs	r3, r3, #2
 8002166:	3302      	adds	r3, #2
 8002168:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800216c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800216e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002170:	f003 0303 	and.w	r3, r3, #3
 8002174:	009b      	lsls	r3, r3, #2
 8002176:	220f      	movs	r2, #15
 8002178:	fa02 f303 	lsl.w	r3, r2, r3
 800217c:	43db      	mvns	r3, r3
 800217e:	68fa      	ldr	r2, [r7, #12]
 8002180:	4013      	ands	r3, r2
 8002182:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	4a49      	ldr	r2, [pc, #292]	; (80022ac <HAL_GPIO_Init+0x2e4>)
 8002188:	4293      	cmp	r3, r2
 800218a:	d00d      	beq.n	80021a8 <HAL_GPIO_Init+0x1e0>
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	4a48      	ldr	r2, [pc, #288]	; (80022b0 <HAL_GPIO_Init+0x2e8>)
 8002190:	4293      	cmp	r3, r2
 8002192:	d007      	beq.n	80021a4 <HAL_GPIO_Init+0x1dc>
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	4a47      	ldr	r2, [pc, #284]	; (80022b4 <HAL_GPIO_Init+0x2ec>)
 8002198:	4293      	cmp	r3, r2
 800219a:	d101      	bne.n	80021a0 <HAL_GPIO_Init+0x1d8>
 800219c:	2302      	movs	r3, #2
 800219e:	e004      	b.n	80021aa <HAL_GPIO_Init+0x1e2>
 80021a0:	2303      	movs	r3, #3
 80021a2:	e002      	b.n	80021aa <HAL_GPIO_Init+0x1e2>
 80021a4:	2301      	movs	r3, #1
 80021a6:	e000      	b.n	80021aa <HAL_GPIO_Init+0x1e2>
 80021a8:	2300      	movs	r3, #0
 80021aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021ac:	f002 0203 	and.w	r2, r2, #3
 80021b0:	0092      	lsls	r2, r2, #2
 80021b2:	4093      	lsls	r3, r2
 80021b4:	68fa      	ldr	r2, [r7, #12]
 80021b6:	4313      	orrs	r3, r2
 80021b8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80021ba:	493b      	ldr	r1, [pc, #236]	; (80022a8 <HAL_GPIO_Init+0x2e0>)
 80021bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021be:	089b      	lsrs	r3, r3, #2
 80021c0:	3302      	adds	r3, #2
 80021c2:	68fa      	ldr	r2, [r7, #12]
 80021c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d006      	beq.n	80021e2 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80021d4:	4b38      	ldr	r3, [pc, #224]	; (80022b8 <HAL_GPIO_Init+0x2f0>)
 80021d6:	689a      	ldr	r2, [r3, #8]
 80021d8:	4937      	ldr	r1, [pc, #220]	; (80022b8 <HAL_GPIO_Init+0x2f0>)
 80021da:	69bb      	ldr	r3, [r7, #24]
 80021dc:	4313      	orrs	r3, r2
 80021de:	608b      	str	r3, [r1, #8]
 80021e0:	e006      	b.n	80021f0 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80021e2:	4b35      	ldr	r3, [pc, #212]	; (80022b8 <HAL_GPIO_Init+0x2f0>)
 80021e4:	689a      	ldr	r2, [r3, #8]
 80021e6:	69bb      	ldr	r3, [r7, #24]
 80021e8:	43db      	mvns	r3, r3
 80021ea:	4933      	ldr	r1, [pc, #204]	; (80022b8 <HAL_GPIO_Init+0x2f0>)
 80021ec:	4013      	ands	r3, r2
 80021ee:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d006      	beq.n	800220a <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80021fc:	4b2e      	ldr	r3, [pc, #184]	; (80022b8 <HAL_GPIO_Init+0x2f0>)
 80021fe:	68da      	ldr	r2, [r3, #12]
 8002200:	492d      	ldr	r1, [pc, #180]	; (80022b8 <HAL_GPIO_Init+0x2f0>)
 8002202:	69bb      	ldr	r3, [r7, #24]
 8002204:	4313      	orrs	r3, r2
 8002206:	60cb      	str	r3, [r1, #12]
 8002208:	e006      	b.n	8002218 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800220a:	4b2b      	ldr	r3, [pc, #172]	; (80022b8 <HAL_GPIO_Init+0x2f0>)
 800220c:	68da      	ldr	r2, [r3, #12]
 800220e:	69bb      	ldr	r3, [r7, #24]
 8002210:	43db      	mvns	r3, r3
 8002212:	4929      	ldr	r1, [pc, #164]	; (80022b8 <HAL_GPIO_Init+0x2f0>)
 8002214:	4013      	ands	r3, r2
 8002216:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002220:	2b00      	cmp	r3, #0
 8002222:	d006      	beq.n	8002232 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002224:	4b24      	ldr	r3, [pc, #144]	; (80022b8 <HAL_GPIO_Init+0x2f0>)
 8002226:	685a      	ldr	r2, [r3, #4]
 8002228:	4923      	ldr	r1, [pc, #140]	; (80022b8 <HAL_GPIO_Init+0x2f0>)
 800222a:	69bb      	ldr	r3, [r7, #24]
 800222c:	4313      	orrs	r3, r2
 800222e:	604b      	str	r3, [r1, #4]
 8002230:	e006      	b.n	8002240 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002232:	4b21      	ldr	r3, [pc, #132]	; (80022b8 <HAL_GPIO_Init+0x2f0>)
 8002234:	685a      	ldr	r2, [r3, #4]
 8002236:	69bb      	ldr	r3, [r7, #24]
 8002238:	43db      	mvns	r3, r3
 800223a:	491f      	ldr	r1, [pc, #124]	; (80022b8 <HAL_GPIO_Init+0x2f0>)
 800223c:	4013      	ands	r3, r2
 800223e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002248:	2b00      	cmp	r3, #0
 800224a:	d006      	beq.n	800225a <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800224c:	4b1a      	ldr	r3, [pc, #104]	; (80022b8 <HAL_GPIO_Init+0x2f0>)
 800224e:	681a      	ldr	r2, [r3, #0]
 8002250:	4919      	ldr	r1, [pc, #100]	; (80022b8 <HAL_GPIO_Init+0x2f0>)
 8002252:	69bb      	ldr	r3, [r7, #24]
 8002254:	4313      	orrs	r3, r2
 8002256:	600b      	str	r3, [r1, #0]
 8002258:	e006      	b.n	8002268 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800225a:	4b17      	ldr	r3, [pc, #92]	; (80022b8 <HAL_GPIO_Init+0x2f0>)
 800225c:	681a      	ldr	r2, [r3, #0]
 800225e:	69bb      	ldr	r3, [r7, #24]
 8002260:	43db      	mvns	r3, r3
 8002262:	4915      	ldr	r1, [pc, #84]	; (80022b8 <HAL_GPIO_Init+0x2f0>)
 8002264:	4013      	ands	r3, r2
 8002266:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800226a:	3301      	adds	r3, #1
 800226c:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	681a      	ldr	r2, [r3, #0]
 8002272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002274:	fa22 f303 	lsr.w	r3, r2, r3
 8002278:	2b00      	cmp	r3, #0
 800227a:	f47f aeaf 	bne.w	8001fdc <HAL_GPIO_Init+0x14>
  }
}
 800227e:	bf00      	nop
 8002280:	bf00      	nop
 8002282:	372c      	adds	r7, #44	; 0x2c
 8002284:	46bd      	mov	sp, r7
 8002286:	bc80      	pop	{r7}
 8002288:	4770      	bx	lr
 800228a:	bf00      	nop
 800228c:	10320000 	.word	0x10320000
 8002290:	10310000 	.word	0x10310000
 8002294:	10220000 	.word	0x10220000
 8002298:	10210000 	.word	0x10210000
 800229c:	10120000 	.word	0x10120000
 80022a0:	10110000 	.word	0x10110000
 80022a4:	40021000 	.word	0x40021000
 80022a8:	40010000 	.word	0x40010000
 80022ac:	40010800 	.word	0x40010800
 80022b0:	40010c00 	.word	0x40010c00
 80022b4:	40011000 	.word	0x40011000
 80022b8:	40010400 	.word	0x40010400

080022bc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80022bc:	b480      	push	{r7}
 80022be:	b085      	sub	sp, #20
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
 80022c4:	460b      	mov	r3, r1
 80022c6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	689a      	ldr	r2, [r3, #8]
 80022cc:	887b      	ldrh	r3, [r7, #2]
 80022ce:	4013      	ands	r3, r2
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d002      	beq.n	80022da <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80022d4:	2301      	movs	r3, #1
 80022d6:	73fb      	strb	r3, [r7, #15]
 80022d8:	e001      	b.n	80022de <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80022da:	2300      	movs	r3, #0
 80022dc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80022de:	7bfb      	ldrb	r3, [r7, #15]
}
 80022e0:	4618      	mov	r0, r3
 80022e2:	3714      	adds	r7, #20
 80022e4:	46bd      	mov	sp, r7
 80022e6:	bc80      	pop	{r7}
 80022e8:	4770      	bx	lr

080022ea <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80022ea:	b480      	push	{r7}
 80022ec:	b083      	sub	sp, #12
 80022ee:	af00      	add	r7, sp, #0
 80022f0:	6078      	str	r0, [r7, #4]
 80022f2:	460b      	mov	r3, r1
 80022f4:	807b      	strh	r3, [r7, #2]
 80022f6:	4613      	mov	r3, r2
 80022f8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80022fa:	787b      	ldrb	r3, [r7, #1]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d003      	beq.n	8002308 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002300:	887a      	ldrh	r2, [r7, #2]
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002306:	e003      	b.n	8002310 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002308:	887b      	ldrh	r3, [r7, #2]
 800230a:	041a      	lsls	r2, r3, #16
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	611a      	str	r2, [r3, #16]
}
 8002310:	bf00      	nop
 8002312:	370c      	adds	r7, #12
 8002314:	46bd      	mov	sp, r7
 8002316:	bc80      	pop	{r7}
 8002318:	4770      	bx	lr

0800231a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800231a:	b480      	push	{r7}
 800231c:	b085      	sub	sp, #20
 800231e:	af00      	add	r7, sp, #0
 8002320:	6078      	str	r0, [r7, #4]
 8002322:	460b      	mov	r3, r1
 8002324:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	68db      	ldr	r3, [r3, #12]
 800232a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800232c:	887a      	ldrh	r2, [r7, #2]
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	4013      	ands	r3, r2
 8002332:	041a      	lsls	r2, r3, #16
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	43d9      	mvns	r1, r3
 8002338:	887b      	ldrh	r3, [r7, #2]
 800233a:	400b      	ands	r3, r1
 800233c:	431a      	orrs	r2, r3
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	611a      	str	r2, [r3, #16]
}
 8002342:	bf00      	nop
 8002344:	3714      	adds	r7, #20
 8002346:	46bd      	mov	sp, r7
 8002348:	bc80      	pop	{r7}
 800234a:	4770      	bx	lr

0800234c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b086      	sub	sp, #24
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2b00      	cmp	r3, #0
 8002358:	d101      	bne.n	800235e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800235a:	2301      	movs	r3, #1
 800235c:	e26c      	b.n	8002838 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f003 0301 	and.w	r3, r3, #1
 8002366:	2b00      	cmp	r3, #0
 8002368:	f000 8087 	beq.w	800247a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800236c:	4b92      	ldr	r3, [pc, #584]	; (80025b8 <HAL_RCC_OscConfig+0x26c>)
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	f003 030c 	and.w	r3, r3, #12
 8002374:	2b04      	cmp	r3, #4
 8002376:	d00c      	beq.n	8002392 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002378:	4b8f      	ldr	r3, [pc, #572]	; (80025b8 <HAL_RCC_OscConfig+0x26c>)
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	f003 030c 	and.w	r3, r3, #12
 8002380:	2b08      	cmp	r3, #8
 8002382:	d112      	bne.n	80023aa <HAL_RCC_OscConfig+0x5e>
 8002384:	4b8c      	ldr	r3, [pc, #560]	; (80025b8 <HAL_RCC_OscConfig+0x26c>)
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800238c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002390:	d10b      	bne.n	80023aa <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002392:	4b89      	ldr	r3, [pc, #548]	; (80025b8 <HAL_RCC_OscConfig+0x26c>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800239a:	2b00      	cmp	r3, #0
 800239c:	d06c      	beq.n	8002478 <HAL_RCC_OscConfig+0x12c>
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d168      	bne.n	8002478 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80023a6:	2301      	movs	r3, #1
 80023a8:	e246      	b.n	8002838 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023b2:	d106      	bne.n	80023c2 <HAL_RCC_OscConfig+0x76>
 80023b4:	4b80      	ldr	r3, [pc, #512]	; (80025b8 <HAL_RCC_OscConfig+0x26c>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	4a7f      	ldr	r2, [pc, #508]	; (80025b8 <HAL_RCC_OscConfig+0x26c>)
 80023ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023be:	6013      	str	r3, [r2, #0]
 80023c0:	e02e      	b.n	8002420 <HAL_RCC_OscConfig+0xd4>
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	685b      	ldr	r3, [r3, #4]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d10c      	bne.n	80023e4 <HAL_RCC_OscConfig+0x98>
 80023ca:	4b7b      	ldr	r3, [pc, #492]	; (80025b8 <HAL_RCC_OscConfig+0x26c>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	4a7a      	ldr	r2, [pc, #488]	; (80025b8 <HAL_RCC_OscConfig+0x26c>)
 80023d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023d4:	6013      	str	r3, [r2, #0]
 80023d6:	4b78      	ldr	r3, [pc, #480]	; (80025b8 <HAL_RCC_OscConfig+0x26c>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	4a77      	ldr	r2, [pc, #476]	; (80025b8 <HAL_RCC_OscConfig+0x26c>)
 80023dc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023e0:	6013      	str	r3, [r2, #0]
 80023e2:	e01d      	b.n	8002420 <HAL_RCC_OscConfig+0xd4>
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80023ec:	d10c      	bne.n	8002408 <HAL_RCC_OscConfig+0xbc>
 80023ee:	4b72      	ldr	r3, [pc, #456]	; (80025b8 <HAL_RCC_OscConfig+0x26c>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	4a71      	ldr	r2, [pc, #452]	; (80025b8 <HAL_RCC_OscConfig+0x26c>)
 80023f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80023f8:	6013      	str	r3, [r2, #0]
 80023fa:	4b6f      	ldr	r3, [pc, #444]	; (80025b8 <HAL_RCC_OscConfig+0x26c>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	4a6e      	ldr	r2, [pc, #440]	; (80025b8 <HAL_RCC_OscConfig+0x26c>)
 8002400:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002404:	6013      	str	r3, [r2, #0]
 8002406:	e00b      	b.n	8002420 <HAL_RCC_OscConfig+0xd4>
 8002408:	4b6b      	ldr	r3, [pc, #428]	; (80025b8 <HAL_RCC_OscConfig+0x26c>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4a6a      	ldr	r2, [pc, #424]	; (80025b8 <HAL_RCC_OscConfig+0x26c>)
 800240e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002412:	6013      	str	r3, [r2, #0]
 8002414:	4b68      	ldr	r3, [pc, #416]	; (80025b8 <HAL_RCC_OscConfig+0x26c>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	4a67      	ldr	r2, [pc, #412]	; (80025b8 <HAL_RCC_OscConfig+0x26c>)
 800241a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800241e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	2b00      	cmp	r3, #0
 8002426:	d013      	beq.n	8002450 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002428:	f7ff fcb6 	bl	8001d98 <HAL_GetTick>
 800242c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800242e:	e008      	b.n	8002442 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002430:	f7ff fcb2 	bl	8001d98 <HAL_GetTick>
 8002434:	4602      	mov	r2, r0
 8002436:	693b      	ldr	r3, [r7, #16]
 8002438:	1ad3      	subs	r3, r2, r3
 800243a:	2b64      	cmp	r3, #100	; 0x64
 800243c:	d901      	bls.n	8002442 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800243e:	2303      	movs	r3, #3
 8002440:	e1fa      	b.n	8002838 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002442:	4b5d      	ldr	r3, [pc, #372]	; (80025b8 <HAL_RCC_OscConfig+0x26c>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800244a:	2b00      	cmp	r3, #0
 800244c:	d0f0      	beq.n	8002430 <HAL_RCC_OscConfig+0xe4>
 800244e:	e014      	b.n	800247a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002450:	f7ff fca2 	bl	8001d98 <HAL_GetTick>
 8002454:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002456:	e008      	b.n	800246a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002458:	f7ff fc9e 	bl	8001d98 <HAL_GetTick>
 800245c:	4602      	mov	r2, r0
 800245e:	693b      	ldr	r3, [r7, #16]
 8002460:	1ad3      	subs	r3, r2, r3
 8002462:	2b64      	cmp	r3, #100	; 0x64
 8002464:	d901      	bls.n	800246a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002466:	2303      	movs	r3, #3
 8002468:	e1e6      	b.n	8002838 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800246a:	4b53      	ldr	r3, [pc, #332]	; (80025b8 <HAL_RCC_OscConfig+0x26c>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002472:	2b00      	cmp	r3, #0
 8002474:	d1f0      	bne.n	8002458 <HAL_RCC_OscConfig+0x10c>
 8002476:	e000      	b.n	800247a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002478:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f003 0302 	and.w	r3, r3, #2
 8002482:	2b00      	cmp	r3, #0
 8002484:	d063      	beq.n	800254e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002486:	4b4c      	ldr	r3, [pc, #304]	; (80025b8 <HAL_RCC_OscConfig+0x26c>)
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	f003 030c 	and.w	r3, r3, #12
 800248e:	2b00      	cmp	r3, #0
 8002490:	d00b      	beq.n	80024aa <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002492:	4b49      	ldr	r3, [pc, #292]	; (80025b8 <HAL_RCC_OscConfig+0x26c>)
 8002494:	685b      	ldr	r3, [r3, #4]
 8002496:	f003 030c 	and.w	r3, r3, #12
 800249a:	2b08      	cmp	r3, #8
 800249c:	d11c      	bne.n	80024d8 <HAL_RCC_OscConfig+0x18c>
 800249e:	4b46      	ldr	r3, [pc, #280]	; (80025b8 <HAL_RCC_OscConfig+0x26c>)
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d116      	bne.n	80024d8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024aa:	4b43      	ldr	r3, [pc, #268]	; (80025b8 <HAL_RCC_OscConfig+0x26c>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f003 0302 	and.w	r3, r3, #2
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d005      	beq.n	80024c2 <HAL_RCC_OscConfig+0x176>
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	691b      	ldr	r3, [r3, #16]
 80024ba:	2b01      	cmp	r3, #1
 80024bc:	d001      	beq.n	80024c2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80024be:	2301      	movs	r3, #1
 80024c0:	e1ba      	b.n	8002838 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024c2:	4b3d      	ldr	r3, [pc, #244]	; (80025b8 <HAL_RCC_OscConfig+0x26c>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	695b      	ldr	r3, [r3, #20]
 80024ce:	00db      	lsls	r3, r3, #3
 80024d0:	4939      	ldr	r1, [pc, #228]	; (80025b8 <HAL_RCC_OscConfig+0x26c>)
 80024d2:	4313      	orrs	r3, r2
 80024d4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024d6:	e03a      	b.n	800254e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	691b      	ldr	r3, [r3, #16]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d020      	beq.n	8002522 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80024e0:	4b36      	ldr	r3, [pc, #216]	; (80025bc <HAL_RCC_OscConfig+0x270>)
 80024e2:	2201      	movs	r2, #1
 80024e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024e6:	f7ff fc57 	bl	8001d98 <HAL_GetTick>
 80024ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024ec:	e008      	b.n	8002500 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024ee:	f7ff fc53 	bl	8001d98 <HAL_GetTick>
 80024f2:	4602      	mov	r2, r0
 80024f4:	693b      	ldr	r3, [r7, #16]
 80024f6:	1ad3      	subs	r3, r2, r3
 80024f8:	2b02      	cmp	r3, #2
 80024fa:	d901      	bls.n	8002500 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80024fc:	2303      	movs	r3, #3
 80024fe:	e19b      	b.n	8002838 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002500:	4b2d      	ldr	r3, [pc, #180]	; (80025b8 <HAL_RCC_OscConfig+0x26c>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f003 0302 	and.w	r3, r3, #2
 8002508:	2b00      	cmp	r3, #0
 800250a:	d0f0      	beq.n	80024ee <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800250c:	4b2a      	ldr	r3, [pc, #168]	; (80025b8 <HAL_RCC_OscConfig+0x26c>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	695b      	ldr	r3, [r3, #20]
 8002518:	00db      	lsls	r3, r3, #3
 800251a:	4927      	ldr	r1, [pc, #156]	; (80025b8 <HAL_RCC_OscConfig+0x26c>)
 800251c:	4313      	orrs	r3, r2
 800251e:	600b      	str	r3, [r1, #0]
 8002520:	e015      	b.n	800254e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002522:	4b26      	ldr	r3, [pc, #152]	; (80025bc <HAL_RCC_OscConfig+0x270>)
 8002524:	2200      	movs	r2, #0
 8002526:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002528:	f7ff fc36 	bl	8001d98 <HAL_GetTick>
 800252c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800252e:	e008      	b.n	8002542 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002530:	f7ff fc32 	bl	8001d98 <HAL_GetTick>
 8002534:	4602      	mov	r2, r0
 8002536:	693b      	ldr	r3, [r7, #16]
 8002538:	1ad3      	subs	r3, r2, r3
 800253a:	2b02      	cmp	r3, #2
 800253c:	d901      	bls.n	8002542 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800253e:	2303      	movs	r3, #3
 8002540:	e17a      	b.n	8002838 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002542:	4b1d      	ldr	r3, [pc, #116]	; (80025b8 <HAL_RCC_OscConfig+0x26c>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f003 0302 	and.w	r3, r3, #2
 800254a:	2b00      	cmp	r3, #0
 800254c:	d1f0      	bne.n	8002530 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f003 0308 	and.w	r3, r3, #8
 8002556:	2b00      	cmp	r3, #0
 8002558:	d03a      	beq.n	80025d0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	699b      	ldr	r3, [r3, #24]
 800255e:	2b00      	cmp	r3, #0
 8002560:	d019      	beq.n	8002596 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002562:	4b17      	ldr	r3, [pc, #92]	; (80025c0 <HAL_RCC_OscConfig+0x274>)
 8002564:	2201      	movs	r2, #1
 8002566:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002568:	f7ff fc16 	bl	8001d98 <HAL_GetTick>
 800256c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800256e:	e008      	b.n	8002582 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002570:	f7ff fc12 	bl	8001d98 <HAL_GetTick>
 8002574:	4602      	mov	r2, r0
 8002576:	693b      	ldr	r3, [r7, #16]
 8002578:	1ad3      	subs	r3, r2, r3
 800257a:	2b02      	cmp	r3, #2
 800257c:	d901      	bls.n	8002582 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800257e:	2303      	movs	r3, #3
 8002580:	e15a      	b.n	8002838 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002582:	4b0d      	ldr	r3, [pc, #52]	; (80025b8 <HAL_RCC_OscConfig+0x26c>)
 8002584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002586:	f003 0302 	and.w	r3, r3, #2
 800258a:	2b00      	cmp	r3, #0
 800258c:	d0f0      	beq.n	8002570 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800258e:	2001      	movs	r0, #1
 8002590:	f000 fa9a 	bl	8002ac8 <RCC_Delay>
 8002594:	e01c      	b.n	80025d0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002596:	4b0a      	ldr	r3, [pc, #40]	; (80025c0 <HAL_RCC_OscConfig+0x274>)
 8002598:	2200      	movs	r2, #0
 800259a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800259c:	f7ff fbfc 	bl	8001d98 <HAL_GetTick>
 80025a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025a2:	e00f      	b.n	80025c4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025a4:	f7ff fbf8 	bl	8001d98 <HAL_GetTick>
 80025a8:	4602      	mov	r2, r0
 80025aa:	693b      	ldr	r3, [r7, #16]
 80025ac:	1ad3      	subs	r3, r2, r3
 80025ae:	2b02      	cmp	r3, #2
 80025b0:	d908      	bls.n	80025c4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80025b2:	2303      	movs	r3, #3
 80025b4:	e140      	b.n	8002838 <HAL_RCC_OscConfig+0x4ec>
 80025b6:	bf00      	nop
 80025b8:	40021000 	.word	0x40021000
 80025bc:	42420000 	.word	0x42420000
 80025c0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025c4:	4b9e      	ldr	r3, [pc, #632]	; (8002840 <HAL_RCC_OscConfig+0x4f4>)
 80025c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025c8:	f003 0302 	and.w	r3, r3, #2
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d1e9      	bne.n	80025a4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f003 0304 	and.w	r3, r3, #4
 80025d8:	2b00      	cmp	r3, #0
 80025da:	f000 80a6 	beq.w	800272a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80025de:	2300      	movs	r3, #0
 80025e0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025e2:	4b97      	ldr	r3, [pc, #604]	; (8002840 <HAL_RCC_OscConfig+0x4f4>)
 80025e4:	69db      	ldr	r3, [r3, #28]
 80025e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d10d      	bne.n	800260a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025ee:	4b94      	ldr	r3, [pc, #592]	; (8002840 <HAL_RCC_OscConfig+0x4f4>)
 80025f0:	69db      	ldr	r3, [r3, #28]
 80025f2:	4a93      	ldr	r2, [pc, #588]	; (8002840 <HAL_RCC_OscConfig+0x4f4>)
 80025f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025f8:	61d3      	str	r3, [r2, #28]
 80025fa:	4b91      	ldr	r3, [pc, #580]	; (8002840 <HAL_RCC_OscConfig+0x4f4>)
 80025fc:	69db      	ldr	r3, [r3, #28]
 80025fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002602:	60bb      	str	r3, [r7, #8]
 8002604:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002606:	2301      	movs	r3, #1
 8002608:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800260a:	4b8e      	ldr	r3, [pc, #568]	; (8002844 <HAL_RCC_OscConfig+0x4f8>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002612:	2b00      	cmp	r3, #0
 8002614:	d118      	bne.n	8002648 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002616:	4b8b      	ldr	r3, [pc, #556]	; (8002844 <HAL_RCC_OscConfig+0x4f8>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4a8a      	ldr	r2, [pc, #552]	; (8002844 <HAL_RCC_OscConfig+0x4f8>)
 800261c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002620:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002622:	f7ff fbb9 	bl	8001d98 <HAL_GetTick>
 8002626:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002628:	e008      	b.n	800263c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800262a:	f7ff fbb5 	bl	8001d98 <HAL_GetTick>
 800262e:	4602      	mov	r2, r0
 8002630:	693b      	ldr	r3, [r7, #16]
 8002632:	1ad3      	subs	r3, r2, r3
 8002634:	2b64      	cmp	r3, #100	; 0x64
 8002636:	d901      	bls.n	800263c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002638:	2303      	movs	r3, #3
 800263a:	e0fd      	b.n	8002838 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800263c:	4b81      	ldr	r3, [pc, #516]	; (8002844 <HAL_RCC_OscConfig+0x4f8>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002644:	2b00      	cmp	r3, #0
 8002646:	d0f0      	beq.n	800262a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	68db      	ldr	r3, [r3, #12]
 800264c:	2b01      	cmp	r3, #1
 800264e:	d106      	bne.n	800265e <HAL_RCC_OscConfig+0x312>
 8002650:	4b7b      	ldr	r3, [pc, #492]	; (8002840 <HAL_RCC_OscConfig+0x4f4>)
 8002652:	6a1b      	ldr	r3, [r3, #32]
 8002654:	4a7a      	ldr	r2, [pc, #488]	; (8002840 <HAL_RCC_OscConfig+0x4f4>)
 8002656:	f043 0301 	orr.w	r3, r3, #1
 800265a:	6213      	str	r3, [r2, #32]
 800265c:	e02d      	b.n	80026ba <HAL_RCC_OscConfig+0x36e>
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	68db      	ldr	r3, [r3, #12]
 8002662:	2b00      	cmp	r3, #0
 8002664:	d10c      	bne.n	8002680 <HAL_RCC_OscConfig+0x334>
 8002666:	4b76      	ldr	r3, [pc, #472]	; (8002840 <HAL_RCC_OscConfig+0x4f4>)
 8002668:	6a1b      	ldr	r3, [r3, #32]
 800266a:	4a75      	ldr	r2, [pc, #468]	; (8002840 <HAL_RCC_OscConfig+0x4f4>)
 800266c:	f023 0301 	bic.w	r3, r3, #1
 8002670:	6213      	str	r3, [r2, #32]
 8002672:	4b73      	ldr	r3, [pc, #460]	; (8002840 <HAL_RCC_OscConfig+0x4f4>)
 8002674:	6a1b      	ldr	r3, [r3, #32]
 8002676:	4a72      	ldr	r2, [pc, #456]	; (8002840 <HAL_RCC_OscConfig+0x4f4>)
 8002678:	f023 0304 	bic.w	r3, r3, #4
 800267c:	6213      	str	r3, [r2, #32]
 800267e:	e01c      	b.n	80026ba <HAL_RCC_OscConfig+0x36e>
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	68db      	ldr	r3, [r3, #12]
 8002684:	2b05      	cmp	r3, #5
 8002686:	d10c      	bne.n	80026a2 <HAL_RCC_OscConfig+0x356>
 8002688:	4b6d      	ldr	r3, [pc, #436]	; (8002840 <HAL_RCC_OscConfig+0x4f4>)
 800268a:	6a1b      	ldr	r3, [r3, #32]
 800268c:	4a6c      	ldr	r2, [pc, #432]	; (8002840 <HAL_RCC_OscConfig+0x4f4>)
 800268e:	f043 0304 	orr.w	r3, r3, #4
 8002692:	6213      	str	r3, [r2, #32]
 8002694:	4b6a      	ldr	r3, [pc, #424]	; (8002840 <HAL_RCC_OscConfig+0x4f4>)
 8002696:	6a1b      	ldr	r3, [r3, #32]
 8002698:	4a69      	ldr	r2, [pc, #420]	; (8002840 <HAL_RCC_OscConfig+0x4f4>)
 800269a:	f043 0301 	orr.w	r3, r3, #1
 800269e:	6213      	str	r3, [r2, #32]
 80026a0:	e00b      	b.n	80026ba <HAL_RCC_OscConfig+0x36e>
 80026a2:	4b67      	ldr	r3, [pc, #412]	; (8002840 <HAL_RCC_OscConfig+0x4f4>)
 80026a4:	6a1b      	ldr	r3, [r3, #32]
 80026a6:	4a66      	ldr	r2, [pc, #408]	; (8002840 <HAL_RCC_OscConfig+0x4f4>)
 80026a8:	f023 0301 	bic.w	r3, r3, #1
 80026ac:	6213      	str	r3, [r2, #32]
 80026ae:	4b64      	ldr	r3, [pc, #400]	; (8002840 <HAL_RCC_OscConfig+0x4f4>)
 80026b0:	6a1b      	ldr	r3, [r3, #32]
 80026b2:	4a63      	ldr	r2, [pc, #396]	; (8002840 <HAL_RCC_OscConfig+0x4f4>)
 80026b4:	f023 0304 	bic.w	r3, r3, #4
 80026b8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	68db      	ldr	r3, [r3, #12]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d015      	beq.n	80026ee <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026c2:	f7ff fb69 	bl	8001d98 <HAL_GetTick>
 80026c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026c8:	e00a      	b.n	80026e0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026ca:	f7ff fb65 	bl	8001d98 <HAL_GetTick>
 80026ce:	4602      	mov	r2, r0
 80026d0:	693b      	ldr	r3, [r7, #16]
 80026d2:	1ad3      	subs	r3, r2, r3
 80026d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80026d8:	4293      	cmp	r3, r2
 80026da:	d901      	bls.n	80026e0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80026dc:	2303      	movs	r3, #3
 80026de:	e0ab      	b.n	8002838 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026e0:	4b57      	ldr	r3, [pc, #348]	; (8002840 <HAL_RCC_OscConfig+0x4f4>)
 80026e2:	6a1b      	ldr	r3, [r3, #32]
 80026e4:	f003 0302 	and.w	r3, r3, #2
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d0ee      	beq.n	80026ca <HAL_RCC_OscConfig+0x37e>
 80026ec:	e014      	b.n	8002718 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026ee:	f7ff fb53 	bl	8001d98 <HAL_GetTick>
 80026f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026f4:	e00a      	b.n	800270c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026f6:	f7ff fb4f 	bl	8001d98 <HAL_GetTick>
 80026fa:	4602      	mov	r2, r0
 80026fc:	693b      	ldr	r3, [r7, #16]
 80026fe:	1ad3      	subs	r3, r2, r3
 8002700:	f241 3288 	movw	r2, #5000	; 0x1388
 8002704:	4293      	cmp	r3, r2
 8002706:	d901      	bls.n	800270c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002708:	2303      	movs	r3, #3
 800270a:	e095      	b.n	8002838 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800270c:	4b4c      	ldr	r3, [pc, #304]	; (8002840 <HAL_RCC_OscConfig+0x4f4>)
 800270e:	6a1b      	ldr	r3, [r3, #32]
 8002710:	f003 0302 	and.w	r3, r3, #2
 8002714:	2b00      	cmp	r3, #0
 8002716:	d1ee      	bne.n	80026f6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002718:	7dfb      	ldrb	r3, [r7, #23]
 800271a:	2b01      	cmp	r3, #1
 800271c:	d105      	bne.n	800272a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800271e:	4b48      	ldr	r3, [pc, #288]	; (8002840 <HAL_RCC_OscConfig+0x4f4>)
 8002720:	69db      	ldr	r3, [r3, #28]
 8002722:	4a47      	ldr	r2, [pc, #284]	; (8002840 <HAL_RCC_OscConfig+0x4f4>)
 8002724:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002728:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	69db      	ldr	r3, [r3, #28]
 800272e:	2b00      	cmp	r3, #0
 8002730:	f000 8081 	beq.w	8002836 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002734:	4b42      	ldr	r3, [pc, #264]	; (8002840 <HAL_RCC_OscConfig+0x4f4>)
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	f003 030c 	and.w	r3, r3, #12
 800273c:	2b08      	cmp	r3, #8
 800273e:	d061      	beq.n	8002804 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	69db      	ldr	r3, [r3, #28]
 8002744:	2b02      	cmp	r3, #2
 8002746:	d146      	bne.n	80027d6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002748:	4b3f      	ldr	r3, [pc, #252]	; (8002848 <HAL_RCC_OscConfig+0x4fc>)
 800274a:	2200      	movs	r2, #0
 800274c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800274e:	f7ff fb23 	bl	8001d98 <HAL_GetTick>
 8002752:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002754:	e008      	b.n	8002768 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002756:	f7ff fb1f 	bl	8001d98 <HAL_GetTick>
 800275a:	4602      	mov	r2, r0
 800275c:	693b      	ldr	r3, [r7, #16]
 800275e:	1ad3      	subs	r3, r2, r3
 8002760:	2b02      	cmp	r3, #2
 8002762:	d901      	bls.n	8002768 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002764:	2303      	movs	r3, #3
 8002766:	e067      	b.n	8002838 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002768:	4b35      	ldr	r3, [pc, #212]	; (8002840 <HAL_RCC_OscConfig+0x4f4>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002770:	2b00      	cmp	r3, #0
 8002772:	d1f0      	bne.n	8002756 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6a1b      	ldr	r3, [r3, #32]
 8002778:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800277c:	d108      	bne.n	8002790 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800277e:	4b30      	ldr	r3, [pc, #192]	; (8002840 <HAL_RCC_OscConfig+0x4f4>)
 8002780:	685b      	ldr	r3, [r3, #4]
 8002782:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	689b      	ldr	r3, [r3, #8]
 800278a:	492d      	ldr	r1, [pc, #180]	; (8002840 <HAL_RCC_OscConfig+0x4f4>)
 800278c:	4313      	orrs	r3, r2
 800278e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002790:	4b2b      	ldr	r3, [pc, #172]	; (8002840 <HAL_RCC_OscConfig+0x4f4>)
 8002792:	685b      	ldr	r3, [r3, #4]
 8002794:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6a19      	ldr	r1, [r3, #32]
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027a0:	430b      	orrs	r3, r1
 80027a2:	4927      	ldr	r1, [pc, #156]	; (8002840 <HAL_RCC_OscConfig+0x4f4>)
 80027a4:	4313      	orrs	r3, r2
 80027a6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80027a8:	4b27      	ldr	r3, [pc, #156]	; (8002848 <HAL_RCC_OscConfig+0x4fc>)
 80027aa:	2201      	movs	r2, #1
 80027ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027ae:	f7ff faf3 	bl	8001d98 <HAL_GetTick>
 80027b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80027b4:	e008      	b.n	80027c8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027b6:	f7ff faef 	bl	8001d98 <HAL_GetTick>
 80027ba:	4602      	mov	r2, r0
 80027bc:	693b      	ldr	r3, [r7, #16]
 80027be:	1ad3      	subs	r3, r2, r3
 80027c0:	2b02      	cmp	r3, #2
 80027c2:	d901      	bls.n	80027c8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80027c4:	2303      	movs	r3, #3
 80027c6:	e037      	b.n	8002838 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80027c8:	4b1d      	ldr	r3, [pc, #116]	; (8002840 <HAL_RCC_OscConfig+0x4f4>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d0f0      	beq.n	80027b6 <HAL_RCC_OscConfig+0x46a>
 80027d4:	e02f      	b.n	8002836 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027d6:	4b1c      	ldr	r3, [pc, #112]	; (8002848 <HAL_RCC_OscConfig+0x4fc>)
 80027d8:	2200      	movs	r2, #0
 80027da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027dc:	f7ff fadc 	bl	8001d98 <HAL_GetTick>
 80027e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027e2:	e008      	b.n	80027f6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027e4:	f7ff fad8 	bl	8001d98 <HAL_GetTick>
 80027e8:	4602      	mov	r2, r0
 80027ea:	693b      	ldr	r3, [r7, #16]
 80027ec:	1ad3      	subs	r3, r2, r3
 80027ee:	2b02      	cmp	r3, #2
 80027f0:	d901      	bls.n	80027f6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80027f2:	2303      	movs	r3, #3
 80027f4:	e020      	b.n	8002838 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027f6:	4b12      	ldr	r3, [pc, #72]	; (8002840 <HAL_RCC_OscConfig+0x4f4>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d1f0      	bne.n	80027e4 <HAL_RCC_OscConfig+0x498>
 8002802:	e018      	b.n	8002836 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	69db      	ldr	r3, [r3, #28]
 8002808:	2b01      	cmp	r3, #1
 800280a:	d101      	bne.n	8002810 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800280c:	2301      	movs	r3, #1
 800280e:	e013      	b.n	8002838 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002810:	4b0b      	ldr	r3, [pc, #44]	; (8002840 <HAL_RCC_OscConfig+0x4f4>)
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6a1b      	ldr	r3, [r3, #32]
 8002820:	429a      	cmp	r2, r3
 8002822:	d106      	bne.n	8002832 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800282e:	429a      	cmp	r2, r3
 8002830:	d001      	beq.n	8002836 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002832:	2301      	movs	r3, #1
 8002834:	e000      	b.n	8002838 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002836:	2300      	movs	r3, #0
}
 8002838:	4618      	mov	r0, r3
 800283a:	3718      	adds	r7, #24
 800283c:	46bd      	mov	sp, r7
 800283e:	bd80      	pop	{r7, pc}
 8002840:	40021000 	.word	0x40021000
 8002844:	40007000 	.word	0x40007000
 8002848:	42420060 	.word	0x42420060

0800284c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b084      	sub	sp, #16
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
 8002854:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	2b00      	cmp	r3, #0
 800285a:	d101      	bne.n	8002860 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800285c:	2301      	movs	r3, #1
 800285e:	e0d0      	b.n	8002a02 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002860:	4b6a      	ldr	r3, [pc, #424]	; (8002a0c <HAL_RCC_ClockConfig+0x1c0>)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f003 0307 	and.w	r3, r3, #7
 8002868:	683a      	ldr	r2, [r7, #0]
 800286a:	429a      	cmp	r2, r3
 800286c:	d910      	bls.n	8002890 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800286e:	4b67      	ldr	r3, [pc, #412]	; (8002a0c <HAL_RCC_ClockConfig+0x1c0>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f023 0207 	bic.w	r2, r3, #7
 8002876:	4965      	ldr	r1, [pc, #404]	; (8002a0c <HAL_RCC_ClockConfig+0x1c0>)
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	4313      	orrs	r3, r2
 800287c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800287e:	4b63      	ldr	r3, [pc, #396]	; (8002a0c <HAL_RCC_ClockConfig+0x1c0>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f003 0307 	and.w	r3, r3, #7
 8002886:	683a      	ldr	r2, [r7, #0]
 8002888:	429a      	cmp	r2, r3
 800288a:	d001      	beq.n	8002890 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800288c:	2301      	movs	r3, #1
 800288e:	e0b8      	b.n	8002a02 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f003 0302 	and.w	r3, r3, #2
 8002898:	2b00      	cmp	r3, #0
 800289a:	d020      	beq.n	80028de <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f003 0304 	and.w	r3, r3, #4
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d005      	beq.n	80028b4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80028a8:	4b59      	ldr	r3, [pc, #356]	; (8002a10 <HAL_RCC_ClockConfig+0x1c4>)
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	4a58      	ldr	r2, [pc, #352]	; (8002a10 <HAL_RCC_ClockConfig+0x1c4>)
 80028ae:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80028b2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f003 0308 	and.w	r3, r3, #8
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d005      	beq.n	80028cc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80028c0:	4b53      	ldr	r3, [pc, #332]	; (8002a10 <HAL_RCC_ClockConfig+0x1c4>)
 80028c2:	685b      	ldr	r3, [r3, #4]
 80028c4:	4a52      	ldr	r2, [pc, #328]	; (8002a10 <HAL_RCC_ClockConfig+0x1c4>)
 80028c6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80028ca:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80028cc:	4b50      	ldr	r3, [pc, #320]	; (8002a10 <HAL_RCC_ClockConfig+0x1c4>)
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	689b      	ldr	r3, [r3, #8]
 80028d8:	494d      	ldr	r1, [pc, #308]	; (8002a10 <HAL_RCC_ClockConfig+0x1c4>)
 80028da:	4313      	orrs	r3, r2
 80028dc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f003 0301 	and.w	r3, r3, #1
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d040      	beq.n	800296c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	685b      	ldr	r3, [r3, #4]
 80028ee:	2b01      	cmp	r3, #1
 80028f0:	d107      	bne.n	8002902 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028f2:	4b47      	ldr	r3, [pc, #284]	; (8002a10 <HAL_RCC_ClockConfig+0x1c4>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d115      	bne.n	800292a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028fe:	2301      	movs	r3, #1
 8002900:	e07f      	b.n	8002a02 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	2b02      	cmp	r3, #2
 8002908:	d107      	bne.n	800291a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800290a:	4b41      	ldr	r3, [pc, #260]	; (8002a10 <HAL_RCC_ClockConfig+0x1c4>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002912:	2b00      	cmp	r3, #0
 8002914:	d109      	bne.n	800292a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002916:	2301      	movs	r3, #1
 8002918:	e073      	b.n	8002a02 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800291a:	4b3d      	ldr	r3, [pc, #244]	; (8002a10 <HAL_RCC_ClockConfig+0x1c4>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f003 0302 	and.w	r3, r3, #2
 8002922:	2b00      	cmp	r3, #0
 8002924:	d101      	bne.n	800292a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002926:	2301      	movs	r3, #1
 8002928:	e06b      	b.n	8002a02 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800292a:	4b39      	ldr	r3, [pc, #228]	; (8002a10 <HAL_RCC_ClockConfig+0x1c4>)
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	f023 0203 	bic.w	r2, r3, #3
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	685b      	ldr	r3, [r3, #4]
 8002936:	4936      	ldr	r1, [pc, #216]	; (8002a10 <HAL_RCC_ClockConfig+0x1c4>)
 8002938:	4313      	orrs	r3, r2
 800293a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800293c:	f7ff fa2c 	bl	8001d98 <HAL_GetTick>
 8002940:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002942:	e00a      	b.n	800295a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002944:	f7ff fa28 	bl	8001d98 <HAL_GetTick>
 8002948:	4602      	mov	r2, r0
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	1ad3      	subs	r3, r2, r3
 800294e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002952:	4293      	cmp	r3, r2
 8002954:	d901      	bls.n	800295a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002956:	2303      	movs	r3, #3
 8002958:	e053      	b.n	8002a02 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800295a:	4b2d      	ldr	r3, [pc, #180]	; (8002a10 <HAL_RCC_ClockConfig+0x1c4>)
 800295c:	685b      	ldr	r3, [r3, #4]
 800295e:	f003 020c 	and.w	r2, r3, #12
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	685b      	ldr	r3, [r3, #4]
 8002966:	009b      	lsls	r3, r3, #2
 8002968:	429a      	cmp	r2, r3
 800296a:	d1eb      	bne.n	8002944 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800296c:	4b27      	ldr	r3, [pc, #156]	; (8002a0c <HAL_RCC_ClockConfig+0x1c0>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f003 0307 	and.w	r3, r3, #7
 8002974:	683a      	ldr	r2, [r7, #0]
 8002976:	429a      	cmp	r2, r3
 8002978:	d210      	bcs.n	800299c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800297a:	4b24      	ldr	r3, [pc, #144]	; (8002a0c <HAL_RCC_ClockConfig+0x1c0>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f023 0207 	bic.w	r2, r3, #7
 8002982:	4922      	ldr	r1, [pc, #136]	; (8002a0c <HAL_RCC_ClockConfig+0x1c0>)
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	4313      	orrs	r3, r2
 8002988:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800298a:	4b20      	ldr	r3, [pc, #128]	; (8002a0c <HAL_RCC_ClockConfig+0x1c0>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f003 0307 	and.w	r3, r3, #7
 8002992:	683a      	ldr	r2, [r7, #0]
 8002994:	429a      	cmp	r2, r3
 8002996:	d001      	beq.n	800299c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002998:	2301      	movs	r3, #1
 800299a:	e032      	b.n	8002a02 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f003 0304 	and.w	r3, r3, #4
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d008      	beq.n	80029ba <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80029a8:	4b19      	ldr	r3, [pc, #100]	; (8002a10 <HAL_RCC_ClockConfig+0x1c4>)
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	68db      	ldr	r3, [r3, #12]
 80029b4:	4916      	ldr	r1, [pc, #88]	; (8002a10 <HAL_RCC_ClockConfig+0x1c4>)
 80029b6:	4313      	orrs	r3, r2
 80029b8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f003 0308 	and.w	r3, r3, #8
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d009      	beq.n	80029da <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80029c6:	4b12      	ldr	r3, [pc, #72]	; (8002a10 <HAL_RCC_ClockConfig+0x1c4>)
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	691b      	ldr	r3, [r3, #16]
 80029d2:	00db      	lsls	r3, r3, #3
 80029d4:	490e      	ldr	r1, [pc, #56]	; (8002a10 <HAL_RCC_ClockConfig+0x1c4>)
 80029d6:	4313      	orrs	r3, r2
 80029d8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80029da:	f000 f821 	bl	8002a20 <HAL_RCC_GetSysClockFreq>
 80029de:	4602      	mov	r2, r0
 80029e0:	4b0b      	ldr	r3, [pc, #44]	; (8002a10 <HAL_RCC_ClockConfig+0x1c4>)
 80029e2:	685b      	ldr	r3, [r3, #4]
 80029e4:	091b      	lsrs	r3, r3, #4
 80029e6:	f003 030f 	and.w	r3, r3, #15
 80029ea:	490a      	ldr	r1, [pc, #40]	; (8002a14 <HAL_RCC_ClockConfig+0x1c8>)
 80029ec:	5ccb      	ldrb	r3, [r1, r3]
 80029ee:	fa22 f303 	lsr.w	r3, r2, r3
 80029f2:	4a09      	ldr	r2, [pc, #36]	; (8002a18 <HAL_RCC_ClockConfig+0x1cc>)
 80029f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80029f6:	4b09      	ldr	r3, [pc, #36]	; (8002a1c <HAL_RCC_ClockConfig+0x1d0>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	4618      	mov	r0, r3
 80029fc:	f7ff f98a 	bl	8001d14 <HAL_InitTick>

  return HAL_OK;
 8002a00:	2300      	movs	r3, #0
}
 8002a02:	4618      	mov	r0, r3
 8002a04:	3710      	adds	r7, #16
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bd80      	pop	{r7, pc}
 8002a0a:	bf00      	nop
 8002a0c:	40022000 	.word	0x40022000
 8002a10:	40021000 	.word	0x40021000
 8002a14:	08003350 	.word	0x08003350
 8002a18:	20000054 	.word	0x20000054
 8002a1c:	20000058 	.word	0x20000058

08002a20 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a20:	b480      	push	{r7}
 8002a22:	b087      	sub	sp, #28
 8002a24:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002a26:	2300      	movs	r3, #0
 8002a28:	60fb      	str	r3, [r7, #12]
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	60bb      	str	r3, [r7, #8]
 8002a2e:	2300      	movs	r3, #0
 8002a30:	617b      	str	r3, [r7, #20]
 8002a32:	2300      	movs	r3, #0
 8002a34:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002a36:	2300      	movs	r3, #0
 8002a38:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002a3a:	4b1e      	ldr	r3, [pc, #120]	; (8002ab4 <HAL_RCC_GetSysClockFreq+0x94>)
 8002a3c:	685b      	ldr	r3, [r3, #4]
 8002a3e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	f003 030c 	and.w	r3, r3, #12
 8002a46:	2b04      	cmp	r3, #4
 8002a48:	d002      	beq.n	8002a50 <HAL_RCC_GetSysClockFreq+0x30>
 8002a4a:	2b08      	cmp	r3, #8
 8002a4c:	d003      	beq.n	8002a56 <HAL_RCC_GetSysClockFreq+0x36>
 8002a4e:	e027      	b.n	8002aa0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002a50:	4b19      	ldr	r3, [pc, #100]	; (8002ab8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002a52:	613b      	str	r3, [r7, #16]
      break;
 8002a54:	e027      	b.n	8002aa6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	0c9b      	lsrs	r3, r3, #18
 8002a5a:	f003 030f 	and.w	r3, r3, #15
 8002a5e:	4a17      	ldr	r2, [pc, #92]	; (8002abc <HAL_RCC_GetSysClockFreq+0x9c>)
 8002a60:	5cd3      	ldrb	r3, [r2, r3]
 8002a62:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d010      	beq.n	8002a90 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002a6e:	4b11      	ldr	r3, [pc, #68]	; (8002ab4 <HAL_RCC_GetSysClockFreq+0x94>)
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	0c5b      	lsrs	r3, r3, #17
 8002a74:	f003 0301 	and.w	r3, r3, #1
 8002a78:	4a11      	ldr	r2, [pc, #68]	; (8002ac0 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002a7a:	5cd3      	ldrb	r3, [r2, r3]
 8002a7c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	4a0d      	ldr	r2, [pc, #52]	; (8002ab8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002a82:	fb02 f203 	mul.w	r2, r2, r3
 8002a86:	68bb      	ldr	r3, [r7, #8]
 8002a88:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a8c:	617b      	str	r3, [r7, #20]
 8002a8e:	e004      	b.n	8002a9a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	4a0c      	ldr	r2, [pc, #48]	; (8002ac4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002a94:	fb02 f303 	mul.w	r3, r2, r3
 8002a98:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002a9a:	697b      	ldr	r3, [r7, #20]
 8002a9c:	613b      	str	r3, [r7, #16]
      break;
 8002a9e:	e002      	b.n	8002aa6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002aa0:	4b05      	ldr	r3, [pc, #20]	; (8002ab8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002aa2:	613b      	str	r3, [r7, #16]
      break;
 8002aa4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002aa6:	693b      	ldr	r3, [r7, #16]
}
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	371c      	adds	r7, #28
 8002aac:	46bd      	mov	sp, r7
 8002aae:	bc80      	pop	{r7}
 8002ab0:	4770      	bx	lr
 8002ab2:	bf00      	nop
 8002ab4:	40021000 	.word	0x40021000
 8002ab8:	007a1200 	.word	0x007a1200
 8002abc:	08003360 	.word	0x08003360
 8002ac0:	08003370 	.word	0x08003370
 8002ac4:	003d0900 	.word	0x003d0900

08002ac8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002ac8:	b480      	push	{r7}
 8002aca:	b085      	sub	sp, #20
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002ad0:	4b0a      	ldr	r3, [pc, #40]	; (8002afc <RCC_Delay+0x34>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4a0a      	ldr	r2, [pc, #40]	; (8002b00 <RCC_Delay+0x38>)
 8002ad6:	fba2 2303 	umull	r2, r3, r2, r3
 8002ada:	0a5b      	lsrs	r3, r3, #9
 8002adc:	687a      	ldr	r2, [r7, #4]
 8002ade:	fb02 f303 	mul.w	r3, r2, r3
 8002ae2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002ae4:	bf00      	nop
  }
  while (Delay --);
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	1e5a      	subs	r2, r3, #1
 8002aea:	60fa      	str	r2, [r7, #12]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d1f9      	bne.n	8002ae4 <RCC_Delay+0x1c>
}
 8002af0:	bf00      	nop
 8002af2:	bf00      	nop
 8002af4:	3714      	adds	r7, #20
 8002af6:	46bd      	mov	sp, r7
 8002af8:	bc80      	pop	{r7}
 8002afa:	4770      	bx	lr
 8002afc:	20000054 	.word	0x20000054
 8002b00:	10624dd3 	.word	0x10624dd3

08002b04 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b082      	sub	sp, #8
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d101      	bne.n	8002b16 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002b12:	2301      	movs	r3, #1
 8002b14:	e041      	b.n	8002b9a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b1c:	b2db      	uxtb	r3, r3
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d106      	bne.n	8002b30 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	2200      	movs	r2, #0
 8002b26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002b2a:	6878      	ldr	r0, [r7, #4]
 8002b2c:	f7ff f85a 	bl	8001be4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2202      	movs	r2, #2
 8002b34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681a      	ldr	r2, [r3, #0]
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	3304      	adds	r3, #4
 8002b40:	4619      	mov	r1, r3
 8002b42:	4610      	mov	r0, r2
 8002b44:	f000 fa6e 	bl	8003024 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2201      	movs	r2, #1
 8002b4c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2201      	movs	r2, #1
 8002b54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2201      	movs	r2, #1
 8002b5c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2201      	movs	r2, #1
 8002b64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2201      	movs	r2, #1
 8002b6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2201      	movs	r2, #1
 8002b74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2201      	movs	r2, #1
 8002b7c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2201      	movs	r2, #1
 8002b84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2201      	movs	r2, #1
 8002b8c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2201      	movs	r2, #1
 8002b94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002b98:	2300      	movs	r3, #0
}
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	3708      	adds	r7, #8
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	bd80      	pop	{r7, pc}
	...

08002ba4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	b085      	sub	sp, #20
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bb2:	b2db      	uxtb	r3, r3
 8002bb4:	2b01      	cmp	r3, #1
 8002bb6:	d001      	beq.n	8002bbc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002bb8:	2301      	movs	r3, #1
 8002bba:	e035      	b.n	8002c28 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2202      	movs	r2, #2
 8002bc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	68da      	ldr	r2, [r3, #12]
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f042 0201 	orr.w	r2, r2, #1
 8002bd2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4a16      	ldr	r2, [pc, #88]	; (8002c34 <HAL_TIM_Base_Start_IT+0x90>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d009      	beq.n	8002bf2 <HAL_TIM_Base_Start_IT+0x4e>
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002be6:	d004      	beq.n	8002bf2 <HAL_TIM_Base_Start_IT+0x4e>
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	4a12      	ldr	r2, [pc, #72]	; (8002c38 <HAL_TIM_Base_Start_IT+0x94>)
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d111      	bne.n	8002c16 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	689b      	ldr	r3, [r3, #8]
 8002bf8:	f003 0307 	and.w	r3, r3, #7
 8002bfc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	2b06      	cmp	r3, #6
 8002c02:	d010      	beq.n	8002c26 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	681a      	ldr	r2, [r3, #0]
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f042 0201 	orr.w	r2, r2, #1
 8002c12:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c14:	e007      	b.n	8002c26 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	681a      	ldr	r2, [r3, #0]
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f042 0201 	orr.w	r2, r2, #1
 8002c24:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002c26:	2300      	movs	r3, #0
}
 8002c28:	4618      	mov	r0, r3
 8002c2a:	3714      	adds	r7, #20
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	bc80      	pop	{r7}
 8002c30:	4770      	bx	lr
 8002c32:	bf00      	nop
 8002c34:	40012c00 	.word	0x40012c00
 8002c38:	40000400 	.word	0x40000400

08002c3c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b082      	sub	sp, #8
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	691b      	ldr	r3, [r3, #16]
 8002c4a:	f003 0302 	and.w	r3, r3, #2
 8002c4e:	2b02      	cmp	r3, #2
 8002c50:	d122      	bne.n	8002c98 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	68db      	ldr	r3, [r3, #12]
 8002c58:	f003 0302 	and.w	r3, r3, #2
 8002c5c:	2b02      	cmp	r3, #2
 8002c5e:	d11b      	bne.n	8002c98 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f06f 0202 	mvn.w	r2, #2
 8002c68:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	2201      	movs	r2, #1
 8002c6e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	699b      	ldr	r3, [r3, #24]
 8002c76:	f003 0303 	and.w	r3, r3, #3
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d003      	beq.n	8002c86 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002c7e:	6878      	ldr	r0, [r7, #4]
 8002c80:	f000 f9b4 	bl	8002fec <HAL_TIM_IC_CaptureCallback>
 8002c84:	e005      	b.n	8002c92 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c86:	6878      	ldr	r0, [r7, #4]
 8002c88:	f000 f9a7 	bl	8002fda <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c8c:	6878      	ldr	r0, [r7, #4]
 8002c8e:	f000 f9b6 	bl	8002ffe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2200      	movs	r2, #0
 8002c96:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	691b      	ldr	r3, [r3, #16]
 8002c9e:	f003 0304 	and.w	r3, r3, #4
 8002ca2:	2b04      	cmp	r3, #4
 8002ca4:	d122      	bne.n	8002cec <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	68db      	ldr	r3, [r3, #12]
 8002cac:	f003 0304 	and.w	r3, r3, #4
 8002cb0:	2b04      	cmp	r3, #4
 8002cb2:	d11b      	bne.n	8002cec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f06f 0204 	mvn.w	r2, #4
 8002cbc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	2202      	movs	r2, #2
 8002cc2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	699b      	ldr	r3, [r3, #24]
 8002cca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d003      	beq.n	8002cda <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002cd2:	6878      	ldr	r0, [r7, #4]
 8002cd4:	f000 f98a 	bl	8002fec <HAL_TIM_IC_CaptureCallback>
 8002cd8:	e005      	b.n	8002ce6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002cda:	6878      	ldr	r0, [r7, #4]
 8002cdc:	f000 f97d 	bl	8002fda <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ce0:	6878      	ldr	r0, [r7, #4]
 8002ce2:	f000 f98c 	bl	8002ffe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	2200      	movs	r2, #0
 8002cea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	691b      	ldr	r3, [r3, #16]
 8002cf2:	f003 0308 	and.w	r3, r3, #8
 8002cf6:	2b08      	cmp	r3, #8
 8002cf8:	d122      	bne.n	8002d40 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	68db      	ldr	r3, [r3, #12]
 8002d00:	f003 0308 	and.w	r3, r3, #8
 8002d04:	2b08      	cmp	r3, #8
 8002d06:	d11b      	bne.n	8002d40 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f06f 0208 	mvn.w	r2, #8
 8002d10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	2204      	movs	r2, #4
 8002d16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	69db      	ldr	r3, [r3, #28]
 8002d1e:	f003 0303 	and.w	r3, r3, #3
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d003      	beq.n	8002d2e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d26:	6878      	ldr	r0, [r7, #4]
 8002d28:	f000 f960 	bl	8002fec <HAL_TIM_IC_CaptureCallback>
 8002d2c:	e005      	b.n	8002d3a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d2e:	6878      	ldr	r0, [r7, #4]
 8002d30:	f000 f953 	bl	8002fda <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d34:	6878      	ldr	r0, [r7, #4]
 8002d36:	f000 f962 	bl	8002ffe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	691b      	ldr	r3, [r3, #16]
 8002d46:	f003 0310 	and.w	r3, r3, #16
 8002d4a:	2b10      	cmp	r3, #16
 8002d4c:	d122      	bne.n	8002d94 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	68db      	ldr	r3, [r3, #12]
 8002d54:	f003 0310 	and.w	r3, r3, #16
 8002d58:	2b10      	cmp	r3, #16
 8002d5a:	d11b      	bne.n	8002d94 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f06f 0210 	mvn.w	r2, #16
 8002d64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	2208      	movs	r2, #8
 8002d6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	69db      	ldr	r3, [r3, #28]
 8002d72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d003      	beq.n	8002d82 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d7a:	6878      	ldr	r0, [r7, #4]
 8002d7c:	f000 f936 	bl	8002fec <HAL_TIM_IC_CaptureCallback>
 8002d80:	e005      	b.n	8002d8e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d82:	6878      	ldr	r0, [r7, #4]
 8002d84:	f000 f929 	bl	8002fda <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d88:	6878      	ldr	r0, [r7, #4]
 8002d8a:	f000 f938 	bl	8002ffe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2200      	movs	r2, #0
 8002d92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	691b      	ldr	r3, [r3, #16]
 8002d9a:	f003 0301 	and.w	r3, r3, #1
 8002d9e:	2b01      	cmp	r3, #1
 8002da0:	d10e      	bne.n	8002dc0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	68db      	ldr	r3, [r3, #12]
 8002da8:	f003 0301 	and.w	r3, r3, #1
 8002dac:	2b01      	cmp	r3, #1
 8002dae:	d107      	bne.n	8002dc0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f06f 0201 	mvn.w	r2, #1
 8002db8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002dba:	6878      	ldr	r0, [r7, #4]
 8002dbc:	f7fe fe68 	bl	8001a90 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	691b      	ldr	r3, [r3, #16]
 8002dc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dca:	2b80      	cmp	r3, #128	; 0x80
 8002dcc:	d10e      	bne.n	8002dec <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	68db      	ldr	r3, [r3, #12]
 8002dd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dd8:	2b80      	cmp	r3, #128	; 0x80
 8002dda:	d107      	bne.n	8002dec <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002de4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002de6:	6878      	ldr	r0, [r7, #4]
 8002de8:	f000 fa6b 	bl	80032c2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	691b      	ldr	r3, [r3, #16]
 8002df2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002df6:	2b40      	cmp	r3, #64	; 0x40
 8002df8:	d10e      	bne.n	8002e18 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	68db      	ldr	r3, [r3, #12]
 8002e00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e04:	2b40      	cmp	r3, #64	; 0x40
 8002e06:	d107      	bne.n	8002e18 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002e10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002e12:	6878      	ldr	r0, [r7, #4]
 8002e14:	f000 f8fc 	bl	8003010 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	691b      	ldr	r3, [r3, #16]
 8002e1e:	f003 0320 	and.w	r3, r3, #32
 8002e22:	2b20      	cmp	r3, #32
 8002e24:	d10e      	bne.n	8002e44 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	68db      	ldr	r3, [r3, #12]
 8002e2c:	f003 0320 	and.w	r3, r3, #32
 8002e30:	2b20      	cmp	r3, #32
 8002e32:	d107      	bne.n	8002e44 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f06f 0220 	mvn.w	r2, #32
 8002e3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002e3e:	6878      	ldr	r0, [r7, #4]
 8002e40:	f000 fa36 	bl	80032b0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002e44:	bf00      	nop
 8002e46:	3708      	adds	r7, #8
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	bd80      	pop	{r7, pc}

08002e4c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b084      	sub	sp, #16
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
 8002e54:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002e56:	2300      	movs	r3, #0
 8002e58:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e60:	2b01      	cmp	r3, #1
 8002e62:	d101      	bne.n	8002e68 <HAL_TIM_ConfigClockSource+0x1c>
 8002e64:	2302      	movs	r3, #2
 8002e66:	e0b4      	b.n	8002fd2 <HAL_TIM_ConfigClockSource+0x186>
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2201      	movs	r2, #1
 8002e6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2202      	movs	r2, #2
 8002e74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	689b      	ldr	r3, [r3, #8]
 8002e7e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002e80:	68bb      	ldr	r3, [r7, #8]
 8002e82:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002e86:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002e88:	68bb      	ldr	r3, [r7, #8]
 8002e8a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002e8e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	68ba      	ldr	r2, [r7, #8]
 8002e96:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ea0:	d03e      	beq.n	8002f20 <HAL_TIM_ConfigClockSource+0xd4>
 8002ea2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ea6:	f200 8087 	bhi.w	8002fb8 <HAL_TIM_ConfigClockSource+0x16c>
 8002eaa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002eae:	f000 8086 	beq.w	8002fbe <HAL_TIM_ConfigClockSource+0x172>
 8002eb2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002eb6:	d87f      	bhi.n	8002fb8 <HAL_TIM_ConfigClockSource+0x16c>
 8002eb8:	2b70      	cmp	r3, #112	; 0x70
 8002eba:	d01a      	beq.n	8002ef2 <HAL_TIM_ConfigClockSource+0xa6>
 8002ebc:	2b70      	cmp	r3, #112	; 0x70
 8002ebe:	d87b      	bhi.n	8002fb8 <HAL_TIM_ConfigClockSource+0x16c>
 8002ec0:	2b60      	cmp	r3, #96	; 0x60
 8002ec2:	d050      	beq.n	8002f66 <HAL_TIM_ConfigClockSource+0x11a>
 8002ec4:	2b60      	cmp	r3, #96	; 0x60
 8002ec6:	d877      	bhi.n	8002fb8 <HAL_TIM_ConfigClockSource+0x16c>
 8002ec8:	2b50      	cmp	r3, #80	; 0x50
 8002eca:	d03c      	beq.n	8002f46 <HAL_TIM_ConfigClockSource+0xfa>
 8002ecc:	2b50      	cmp	r3, #80	; 0x50
 8002ece:	d873      	bhi.n	8002fb8 <HAL_TIM_ConfigClockSource+0x16c>
 8002ed0:	2b40      	cmp	r3, #64	; 0x40
 8002ed2:	d058      	beq.n	8002f86 <HAL_TIM_ConfigClockSource+0x13a>
 8002ed4:	2b40      	cmp	r3, #64	; 0x40
 8002ed6:	d86f      	bhi.n	8002fb8 <HAL_TIM_ConfigClockSource+0x16c>
 8002ed8:	2b30      	cmp	r3, #48	; 0x30
 8002eda:	d064      	beq.n	8002fa6 <HAL_TIM_ConfigClockSource+0x15a>
 8002edc:	2b30      	cmp	r3, #48	; 0x30
 8002ede:	d86b      	bhi.n	8002fb8 <HAL_TIM_ConfigClockSource+0x16c>
 8002ee0:	2b20      	cmp	r3, #32
 8002ee2:	d060      	beq.n	8002fa6 <HAL_TIM_ConfigClockSource+0x15a>
 8002ee4:	2b20      	cmp	r3, #32
 8002ee6:	d867      	bhi.n	8002fb8 <HAL_TIM_ConfigClockSource+0x16c>
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d05c      	beq.n	8002fa6 <HAL_TIM_ConfigClockSource+0x15a>
 8002eec:	2b10      	cmp	r3, #16
 8002eee:	d05a      	beq.n	8002fa6 <HAL_TIM_ConfigClockSource+0x15a>
 8002ef0:	e062      	b.n	8002fb8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6818      	ldr	r0, [r3, #0]
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	6899      	ldr	r1, [r3, #8]
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	685a      	ldr	r2, [r3, #4]
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	68db      	ldr	r3, [r3, #12]
 8002f02:	f000 f95e 	bl	80031c2 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	689b      	ldr	r3, [r3, #8]
 8002f0c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002f0e:	68bb      	ldr	r3, [r7, #8]
 8002f10:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002f14:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	68ba      	ldr	r2, [r7, #8]
 8002f1c:	609a      	str	r2, [r3, #8]
      break;
 8002f1e:	e04f      	b.n	8002fc0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6818      	ldr	r0, [r3, #0]
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	6899      	ldr	r1, [r3, #8]
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	685a      	ldr	r2, [r3, #4]
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	68db      	ldr	r3, [r3, #12]
 8002f30:	f000 f947 	bl	80031c2 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	689a      	ldr	r2, [r3, #8]
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002f42:	609a      	str	r2, [r3, #8]
      break;
 8002f44:	e03c      	b.n	8002fc0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6818      	ldr	r0, [r3, #0]
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	6859      	ldr	r1, [r3, #4]
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	68db      	ldr	r3, [r3, #12]
 8002f52:	461a      	mov	r2, r3
 8002f54:	f000 f8be 	bl	80030d4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	2150      	movs	r1, #80	; 0x50
 8002f5e:	4618      	mov	r0, r3
 8002f60:	f000 f915 	bl	800318e <TIM_ITRx_SetConfig>
      break;
 8002f64:	e02c      	b.n	8002fc0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6818      	ldr	r0, [r3, #0]
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	6859      	ldr	r1, [r3, #4]
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	68db      	ldr	r3, [r3, #12]
 8002f72:	461a      	mov	r2, r3
 8002f74:	f000 f8dc 	bl	8003130 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	2160      	movs	r1, #96	; 0x60
 8002f7e:	4618      	mov	r0, r3
 8002f80:	f000 f905 	bl	800318e <TIM_ITRx_SetConfig>
      break;
 8002f84:	e01c      	b.n	8002fc0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6818      	ldr	r0, [r3, #0]
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	6859      	ldr	r1, [r3, #4]
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	68db      	ldr	r3, [r3, #12]
 8002f92:	461a      	mov	r2, r3
 8002f94:	f000 f89e 	bl	80030d4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	2140      	movs	r1, #64	; 0x40
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	f000 f8f5 	bl	800318e <TIM_ITRx_SetConfig>
      break;
 8002fa4:	e00c      	b.n	8002fc0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681a      	ldr	r2, [r3, #0]
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	4619      	mov	r1, r3
 8002fb0:	4610      	mov	r0, r2
 8002fb2:	f000 f8ec 	bl	800318e <TIM_ITRx_SetConfig>
      break;
 8002fb6:	e003      	b.n	8002fc0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002fb8:	2301      	movs	r3, #1
 8002fba:	73fb      	strb	r3, [r7, #15]
      break;
 8002fbc:	e000      	b.n	8002fc0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002fbe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2201      	movs	r2, #1
 8002fc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2200      	movs	r2, #0
 8002fcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002fd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	3710      	adds	r7, #16
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	bd80      	pop	{r7, pc}

08002fda <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002fda:	b480      	push	{r7}
 8002fdc:	b083      	sub	sp, #12
 8002fde:	af00      	add	r7, sp, #0
 8002fe0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002fe2:	bf00      	nop
 8002fe4:	370c      	adds	r7, #12
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	bc80      	pop	{r7}
 8002fea:	4770      	bx	lr

08002fec <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002fec:	b480      	push	{r7}
 8002fee:	b083      	sub	sp, #12
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002ff4:	bf00      	nop
 8002ff6:	370c      	adds	r7, #12
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	bc80      	pop	{r7}
 8002ffc:	4770      	bx	lr

08002ffe <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002ffe:	b480      	push	{r7}
 8003000:	b083      	sub	sp, #12
 8003002:	af00      	add	r7, sp, #0
 8003004:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003006:	bf00      	nop
 8003008:	370c      	adds	r7, #12
 800300a:	46bd      	mov	sp, r7
 800300c:	bc80      	pop	{r7}
 800300e:	4770      	bx	lr

08003010 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003010:	b480      	push	{r7}
 8003012:	b083      	sub	sp, #12
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003018:	bf00      	nop
 800301a:	370c      	adds	r7, #12
 800301c:	46bd      	mov	sp, r7
 800301e:	bc80      	pop	{r7}
 8003020:	4770      	bx	lr
	...

08003024 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003024:	b480      	push	{r7}
 8003026:	b085      	sub	sp, #20
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
 800302c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	4a25      	ldr	r2, [pc, #148]	; (80030cc <TIM_Base_SetConfig+0xa8>)
 8003038:	4293      	cmp	r3, r2
 800303a:	d007      	beq.n	800304c <TIM_Base_SetConfig+0x28>
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003042:	d003      	beq.n	800304c <TIM_Base_SetConfig+0x28>
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	4a22      	ldr	r2, [pc, #136]	; (80030d0 <TIM_Base_SetConfig+0xac>)
 8003048:	4293      	cmp	r3, r2
 800304a:	d108      	bne.n	800305e <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003052:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	685b      	ldr	r3, [r3, #4]
 8003058:	68fa      	ldr	r2, [r7, #12]
 800305a:	4313      	orrs	r3, r2
 800305c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	4a1a      	ldr	r2, [pc, #104]	; (80030cc <TIM_Base_SetConfig+0xa8>)
 8003062:	4293      	cmp	r3, r2
 8003064:	d007      	beq.n	8003076 <TIM_Base_SetConfig+0x52>
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800306c:	d003      	beq.n	8003076 <TIM_Base_SetConfig+0x52>
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	4a17      	ldr	r2, [pc, #92]	; (80030d0 <TIM_Base_SetConfig+0xac>)
 8003072:	4293      	cmp	r3, r2
 8003074:	d108      	bne.n	8003088 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800307c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	68db      	ldr	r3, [r3, #12]
 8003082:	68fa      	ldr	r2, [r7, #12]
 8003084:	4313      	orrs	r3, r2
 8003086:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	695b      	ldr	r3, [r3, #20]
 8003092:	4313      	orrs	r3, r2
 8003094:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	68fa      	ldr	r2, [r7, #12]
 800309a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	689a      	ldr	r2, [r3, #8]
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	681a      	ldr	r2, [r3, #0]
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	4a07      	ldr	r2, [pc, #28]	; (80030cc <TIM_Base_SetConfig+0xa8>)
 80030b0:	4293      	cmp	r3, r2
 80030b2:	d103      	bne.n	80030bc <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	691a      	ldr	r2, [r3, #16]
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2201      	movs	r2, #1
 80030c0:	615a      	str	r2, [r3, #20]
}
 80030c2:	bf00      	nop
 80030c4:	3714      	adds	r7, #20
 80030c6:	46bd      	mov	sp, r7
 80030c8:	bc80      	pop	{r7}
 80030ca:	4770      	bx	lr
 80030cc:	40012c00 	.word	0x40012c00
 80030d0:	40000400 	.word	0x40000400

080030d4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80030d4:	b480      	push	{r7}
 80030d6:	b087      	sub	sp, #28
 80030d8:	af00      	add	r7, sp, #0
 80030da:	60f8      	str	r0, [r7, #12]
 80030dc:	60b9      	str	r1, [r7, #8]
 80030de:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	6a1b      	ldr	r3, [r3, #32]
 80030e4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	6a1b      	ldr	r3, [r3, #32]
 80030ea:	f023 0201 	bic.w	r2, r3, #1
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	699b      	ldr	r3, [r3, #24]
 80030f6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80030f8:	693b      	ldr	r3, [r7, #16]
 80030fa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80030fe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	011b      	lsls	r3, r3, #4
 8003104:	693a      	ldr	r2, [r7, #16]
 8003106:	4313      	orrs	r3, r2
 8003108:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800310a:	697b      	ldr	r3, [r7, #20]
 800310c:	f023 030a 	bic.w	r3, r3, #10
 8003110:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003112:	697a      	ldr	r2, [r7, #20]
 8003114:	68bb      	ldr	r3, [r7, #8]
 8003116:	4313      	orrs	r3, r2
 8003118:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	693a      	ldr	r2, [r7, #16]
 800311e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	697a      	ldr	r2, [r7, #20]
 8003124:	621a      	str	r2, [r3, #32]
}
 8003126:	bf00      	nop
 8003128:	371c      	adds	r7, #28
 800312a:	46bd      	mov	sp, r7
 800312c:	bc80      	pop	{r7}
 800312e:	4770      	bx	lr

08003130 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003130:	b480      	push	{r7}
 8003132:	b087      	sub	sp, #28
 8003134:	af00      	add	r7, sp, #0
 8003136:	60f8      	str	r0, [r7, #12]
 8003138:	60b9      	str	r1, [r7, #8]
 800313a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	6a1b      	ldr	r3, [r3, #32]
 8003140:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	6a1b      	ldr	r3, [r3, #32]
 8003146:	f023 0210 	bic.w	r2, r3, #16
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	699b      	ldr	r3, [r3, #24]
 8003152:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003154:	693b      	ldr	r3, [r7, #16]
 8003156:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800315a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	031b      	lsls	r3, r3, #12
 8003160:	693a      	ldr	r2, [r7, #16]
 8003162:	4313      	orrs	r3, r2
 8003164:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003166:	697b      	ldr	r3, [r7, #20]
 8003168:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800316c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800316e:	68bb      	ldr	r3, [r7, #8]
 8003170:	011b      	lsls	r3, r3, #4
 8003172:	697a      	ldr	r2, [r7, #20]
 8003174:	4313      	orrs	r3, r2
 8003176:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	693a      	ldr	r2, [r7, #16]
 800317c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	697a      	ldr	r2, [r7, #20]
 8003182:	621a      	str	r2, [r3, #32]
}
 8003184:	bf00      	nop
 8003186:	371c      	adds	r7, #28
 8003188:	46bd      	mov	sp, r7
 800318a:	bc80      	pop	{r7}
 800318c:	4770      	bx	lr

0800318e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800318e:	b480      	push	{r7}
 8003190:	b085      	sub	sp, #20
 8003192:	af00      	add	r7, sp, #0
 8003194:	6078      	str	r0, [r7, #4]
 8003196:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	689b      	ldr	r3, [r3, #8]
 800319c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031a4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80031a6:	683a      	ldr	r2, [r7, #0]
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	4313      	orrs	r3, r2
 80031ac:	f043 0307 	orr.w	r3, r3, #7
 80031b0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	68fa      	ldr	r2, [r7, #12]
 80031b6:	609a      	str	r2, [r3, #8]
}
 80031b8:	bf00      	nop
 80031ba:	3714      	adds	r7, #20
 80031bc:	46bd      	mov	sp, r7
 80031be:	bc80      	pop	{r7}
 80031c0:	4770      	bx	lr

080031c2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80031c2:	b480      	push	{r7}
 80031c4:	b087      	sub	sp, #28
 80031c6:	af00      	add	r7, sp, #0
 80031c8:	60f8      	str	r0, [r7, #12]
 80031ca:	60b9      	str	r1, [r7, #8]
 80031cc:	607a      	str	r2, [r7, #4]
 80031ce:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	689b      	ldr	r3, [r3, #8]
 80031d4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80031d6:	697b      	ldr	r3, [r7, #20]
 80031d8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80031dc:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	021a      	lsls	r2, r3, #8
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	431a      	orrs	r2, r3
 80031e6:	68bb      	ldr	r3, [r7, #8]
 80031e8:	4313      	orrs	r3, r2
 80031ea:	697a      	ldr	r2, [r7, #20]
 80031ec:	4313      	orrs	r3, r2
 80031ee:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	697a      	ldr	r2, [r7, #20]
 80031f4:	609a      	str	r2, [r3, #8]
}
 80031f6:	bf00      	nop
 80031f8:	371c      	adds	r7, #28
 80031fa:	46bd      	mov	sp, r7
 80031fc:	bc80      	pop	{r7}
 80031fe:	4770      	bx	lr

08003200 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003200:	b480      	push	{r7}
 8003202:	b085      	sub	sp, #20
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
 8003208:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003210:	2b01      	cmp	r3, #1
 8003212:	d101      	bne.n	8003218 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003214:	2302      	movs	r3, #2
 8003216:	e041      	b.n	800329c <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2201      	movs	r2, #1
 800321c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2202      	movs	r2, #2
 8003224:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	685b      	ldr	r3, [r3, #4]
 800322e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	689b      	ldr	r3, [r3, #8]
 8003236:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800323e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	68fa      	ldr	r2, [r7, #12]
 8003246:	4313      	orrs	r3, r2
 8003248:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	68fa      	ldr	r2, [r7, #12]
 8003250:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4a14      	ldr	r2, [pc, #80]	; (80032a8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8003258:	4293      	cmp	r3, r2
 800325a:	d009      	beq.n	8003270 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003264:	d004      	beq.n	8003270 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	4a10      	ldr	r2, [pc, #64]	; (80032ac <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 800326c:	4293      	cmp	r3, r2
 800326e:	d10c      	bne.n	800328a <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003270:	68bb      	ldr	r3, [r7, #8]
 8003272:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003276:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	685b      	ldr	r3, [r3, #4]
 800327c:	68ba      	ldr	r2, [r7, #8]
 800327e:	4313      	orrs	r3, r2
 8003280:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	68ba      	ldr	r2, [r7, #8]
 8003288:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	2201      	movs	r2, #1
 800328e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	2200      	movs	r2, #0
 8003296:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800329a:	2300      	movs	r3, #0
}
 800329c:	4618      	mov	r0, r3
 800329e:	3714      	adds	r7, #20
 80032a0:	46bd      	mov	sp, r7
 80032a2:	bc80      	pop	{r7}
 80032a4:	4770      	bx	lr
 80032a6:	bf00      	nop
 80032a8:	40012c00 	.word	0x40012c00
 80032ac:	40000400 	.word	0x40000400

080032b0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80032b0:	b480      	push	{r7}
 80032b2:	b083      	sub	sp, #12
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80032b8:	bf00      	nop
 80032ba:	370c      	adds	r7, #12
 80032bc:	46bd      	mov	sp, r7
 80032be:	bc80      	pop	{r7}
 80032c0:	4770      	bx	lr

080032c2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80032c2:	b480      	push	{r7}
 80032c4:	b083      	sub	sp, #12
 80032c6:	af00      	add	r7, sp, #0
 80032c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80032ca:	bf00      	nop
 80032cc:	370c      	adds	r7, #12
 80032ce:	46bd      	mov	sp, r7
 80032d0:	bc80      	pop	{r7}
 80032d2:	4770      	bx	lr

080032d4 <__libc_init_array>:
 80032d4:	b570      	push	{r4, r5, r6, lr}
 80032d6:	2600      	movs	r6, #0
 80032d8:	4d0c      	ldr	r5, [pc, #48]	; (800330c <__libc_init_array+0x38>)
 80032da:	4c0d      	ldr	r4, [pc, #52]	; (8003310 <__libc_init_array+0x3c>)
 80032dc:	1b64      	subs	r4, r4, r5
 80032de:	10a4      	asrs	r4, r4, #2
 80032e0:	42a6      	cmp	r6, r4
 80032e2:	d109      	bne.n	80032f8 <__libc_init_array+0x24>
 80032e4:	f000 f822 	bl	800332c <_init>
 80032e8:	2600      	movs	r6, #0
 80032ea:	4d0a      	ldr	r5, [pc, #40]	; (8003314 <__libc_init_array+0x40>)
 80032ec:	4c0a      	ldr	r4, [pc, #40]	; (8003318 <__libc_init_array+0x44>)
 80032ee:	1b64      	subs	r4, r4, r5
 80032f0:	10a4      	asrs	r4, r4, #2
 80032f2:	42a6      	cmp	r6, r4
 80032f4:	d105      	bne.n	8003302 <__libc_init_array+0x2e>
 80032f6:	bd70      	pop	{r4, r5, r6, pc}
 80032f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80032fc:	4798      	blx	r3
 80032fe:	3601      	adds	r6, #1
 8003300:	e7ee      	b.n	80032e0 <__libc_init_array+0xc>
 8003302:	f855 3b04 	ldr.w	r3, [r5], #4
 8003306:	4798      	blx	r3
 8003308:	3601      	adds	r6, #1
 800330a:	e7f2      	b.n	80032f2 <__libc_init_array+0x1e>
 800330c:	08003374 	.word	0x08003374
 8003310:	08003374 	.word	0x08003374
 8003314:	08003374 	.word	0x08003374
 8003318:	08003378 	.word	0x08003378

0800331c <memset>:
 800331c:	4603      	mov	r3, r0
 800331e:	4402      	add	r2, r0
 8003320:	4293      	cmp	r3, r2
 8003322:	d100      	bne.n	8003326 <memset+0xa>
 8003324:	4770      	bx	lr
 8003326:	f803 1b01 	strb.w	r1, [r3], #1
 800332a:	e7f9      	b.n	8003320 <memset+0x4>

0800332c <_init>:
 800332c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800332e:	bf00      	nop
 8003330:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003332:	bc08      	pop	{r3}
 8003334:	469e      	mov	lr, r3
 8003336:	4770      	bx	lr

08003338 <_fini>:
 8003338:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800333a:	bf00      	nop
 800333c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800333e:	bc08      	pop	{r3}
 8003340:	469e      	mov	lr, r3
 8003342:	4770      	bx	lr
