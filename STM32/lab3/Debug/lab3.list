
lab3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000024b8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  080025c4  080025c4  000125c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080025f0  080025f0  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080025f0  080025f0  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080025f0  080025f0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080025f0  080025f0  000125f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080025f4  080025f4  000125f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080025f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000012c  20000070  08002668  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000019c  08002668  0002019c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009b02  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c69  00000000  00000000  00029b9b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a58  00000000  00000000  0002b808  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000948  00000000  00000000  0002c260  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016b22  00000000  00000000  0002cba8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b317  00000000  00000000  000436ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008247f  00000000  00000000  0004e9e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d0e60  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000028b8  00000000  00000000  000d0eb4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	080025ac 	.word	0x080025ac

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	080025ac 	.word	0x080025ac

0800014c <isButtonPressed>:
int normal_flag[NUM_OF_BUTTONS] = {0};
int long_flag[NUM_OF_BUTTONS] = {0};

int TimeOutForKeyPress[NUM_OF_BUTTONS] = {0};

int isButtonPressed(int index){
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	if (normal_flag[index] == 1){
 8000154:	4a09      	ldr	r2, [pc, #36]	; (800017c <isButtonPressed+0x30>)
 8000156:	687b      	ldr	r3, [r7, #4]
 8000158:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800015c:	2b01      	cmp	r3, #1
 800015e:	d106      	bne.n	800016e <isButtonPressed+0x22>
		normal_flag[index] = 0;
 8000160:	4a06      	ldr	r2, [pc, #24]	; (800017c <isButtonPressed+0x30>)
 8000162:	687b      	ldr	r3, [r7, #4]
 8000164:	2100      	movs	r1, #0
 8000166:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 800016a:	2301      	movs	r3, #1
 800016c:	e000      	b.n	8000170 <isButtonPressed+0x24>
	}
	return 0;
 800016e:	2300      	movs	r3, #0
}
 8000170:	4618      	mov	r0, r3
 8000172:	370c      	adds	r7, #12
 8000174:	46bd      	mov	sp, r7
 8000176:	bc80      	pop	{r7}
 8000178:	4770      	bx	lr
 800017a:	bf00      	nop
 800017c:	2000008c 	.word	0x2000008c

08000180 <subKeyProcess>:

void subKeyProcess(int index){
 8000180:	b480      	push	{r7}
 8000182:	b083      	sub	sp, #12
 8000184:	af00      	add	r7, sp, #0
 8000186:	6078      	str	r0, [r7, #4]
	normal_flag[index] = 1;
 8000188:	4a04      	ldr	r2, [pc, #16]	; (800019c <subKeyProcess+0x1c>)
 800018a:	687b      	ldr	r3, [r7, #4]
 800018c:	2101      	movs	r1, #1
 800018e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8000192:	bf00      	nop
 8000194:	370c      	adds	r7, #12
 8000196:	46bd      	mov	sp, r7
 8000198:	bc80      	pop	{r7}
 800019a:	4770      	bx	lr
 800019c:	2000008c 	.word	0x2000008c

080001a0 <getKeyInput>:

void getKeyInput() {
 80001a0:	b580      	push	{r7, lr}
 80001a2:	b082      	sub	sp, #8
 80001a4:	af00      	add	r7, sp, #0
	for (int i = 0; i < NUM_OF_BUTTONS; i++) {
 80001a6:	2300      	movs	r3, #0
 80001a8:	607b      	str	r3, [r7, #4]
 80001aa:	e0a6      	b.n	80002fa <getKeyInput+0x15a>
		KeyReg0[i] = KeyReg1[i];
 80001ac:	4a57      	ldr	r2, [pc, #348]	; (800030c <getKeyInput+0x16c>)
 80001ae:	687b      	ldr	r3, [r7, #4]
 80001b0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001b4:	4956      	ldr	r1, [pc, #344]	; (8000310 <getKeyInput+0x170>)
 80001b6:	687b      	ldr	r3, [r7, #4]
 80001b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		KeyReg1[i] = KeyReg2[i];
 80001bc:	4a55      	ldr	r2, [pc, #340]	; (8000314 <getKeyInput+0x174>)
 80001be:	687b      	ldr	r3, [r7, #4]
 80001c0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001c4:	4951      	ldr	r1, [pc, #324]	; (800030c <getKeyInput+0x16c>)
 80001c6:	687b      	ldr	r3, [r7, #4]
 80001c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		// Read signals from buttons
		if (i == 0) {
 80001cc:	687b      	ldr	r3, [r7, #4]
 80001ce:	2b00      	cmp	r3, #0
 80001d0:	d10a      	bne.n	80001e8 <getKeyInput+0x48>
			KeyReg2[i] = HAL_GPIO_ReadPin(BTN1_GPIO_Port, BTN1_Pin);
 80001d2:	2108      	movs	r1, #8
 80001d4:	4850      	ldr	r0, [pc, #320]	; (8000318 <getKeyInput+0x178>)
 80001d6:	f001 f97b 	bl	80014d0 <HAL_GPIO_ReadPin>
 80001da:	4603      	mov	r3, r0
 80001dc:	4619      	mov	r1, r3
 80001de:	4a4d      	ldr	r2, [pc, #308]	; (8000314 <getKeyInput+0x174>)
 80001e0:	687b      	ldr	r3, [r7, #4]
 80001e2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 80001e6:	e01a      	b.n	800021e <getKeyInput+0x7e>
		}
		else if (i == 1) {
 80001e8:	687b      	ldr	r3, [r7, #4]
 80001ea:	2b01      	cmp	r3, #1
 80001ec:	d10a      	bne.n	8000204 <getKeyInput+0x64>
			KeyReg2[i] = HAL_GPIO_ReadPin(BTN2_GPIO_Port, BTN2_Pin);
 80001ee:	2110      	movs	r1, #16
 80001f0:	4849      	ldr	r0, [pc, #292]	; (8000318 <getKeyInput+0x178>)
 80001f2:	f001 f96d 	bl	80014d0 <HAL_GPIO_ReadPin>
 80001f6:	4603      	mov	r3, r0
 80001f8:	4619      	mov	r1, r3
 80001fa:	4a46      	ldr	r2, [pc, #280]	; (8000314 <getKeyInput+0x174>)
 80001fc:	687b      	ldr	r3, [r7, #4]
 80001fe:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000202:	e00c      	b.n	800021e <getKeyInput+0x7e>
		}
		else if (i == 2) {
 8000204:	687b      	ldr	r3, [r7, #4]
 8000206:	2b02      	cmp	r3, #2
 8000208:	d109      	bne.n	800021e <getKeyInput+0x7e>
			KeyReg2[i] = HAL_GPIO_ReadPin(BTN3_GPIO_Port, BTN3_Pin);
 800020a:	2120      	movs	r1, #32
 800020c:	4842      	ldr	r0, [pc, #264]	; (8000318 <getKeyInput+0x178>)
 800020e:	f001 f95f 	bl	80014d0 <HAL_GPIO_ReadPin>
 8000212:	4603      	mov	r3, r0
 8000214:	4619      	mov	r1, r3
 8000216:	4a3f      	ldr	r2, [pc, #252]	; (8000314 <getKeyInput+0x174>)
 8000218:	687b      	ldr	r3, [r7, #4]
 800021a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		}

		if ((KeyReg1[i] == KeyReg0[i]) && (KeyReg1[i] == KeyReg2[i])){
 800021e:	4a3b      	ldr	r2, [pc, #236]	; (800030c <getKeyInput+0x16c>)
 8000220:	687b      	ldr	r3, [r7, #4]
 8000222:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000226:	493a      	ldr	r1, [pc, #232]	; (8000310 <getKeyInput+0x170>)
 8000228:	687b      	ldr	r3, [r7, #4]
 800022a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800022e:	429a      	cmp	r2, r3
 8000230:	d159      	bne.n	80002e6 <getKeyInput+0x146>
 8000232:	4a36      	ldr	r2, [pc, #216]	; (800030c <getKeyInput+0x16c>)
 8000234:	687b      	ldr	r3, [r7, #4]
 8000236:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800023a:	4936      	ldr	r1, [pc, #216]	; (8000314 <getKeyInput+0x174>)
 800023c:	687b      	ldr	r3, [r7, #4]
 800023e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000242:	429a      	cmp	r2, r3
 8000244:	d14f      	bne.n	80002e6 <getKeyInput+0x146>
			if (KeyReg3[i] != KeyReg2[i]){
 8000246:	4a35      	ldr	r2, [pc, #212]	; (800031c <getKeyInput+0x17c>)
 8000248:	687b      	ldr	r3, [r7, #4]
 800024a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800024e:	4931      	ldr	r1, [pc, #196]	; (8000314 <getKeyInput+0x174>)
 8000250:	687b      	ldr	r3, [r7, #4]
 8000252:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000256:	429a      	cmp	r2, r3
 8000258:	d02b      	beq.n	80002b2 <getKeyInput+0x112>
				KeyReg3[i] = KeyReg2[i];
 800025a:	4a2e      	ldr	r2, [pc, #184]	; (8000314 <getKeyInput+0x174>)
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000262:	492e      	ldr	r1, [pc, #184]	; (800031c <getKeyInput+0x17c>)
 8000264:	687b      	ldr	r3, [r7, #4]
 8000266:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if (KeyReg2[i] == PRESSED_STATE){
 800026a:	4a2a      	ldr	r2, [pc, #168]	; (8000314 <getKeyInput+0x174>)
 800026c:	687b      	ldr	r3, [r7, #4]
 800026e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000272:	2b00      	cmp	r3, #0
 8000274:	d13d      	bne.n	80002f2 <getKeyInput+0x152>
					subKeyProcess(i);	// Set timer_flag[i] = 1;
 8000276:	6878      	ldr	r0, [r7, #4]
 8000278:	f7ff ff82 	bl	8000180 <subKeyProcess>
					if (long_flag[i] == 0) {
 800027c:	4a28      	ldr	r2, [pc, #160]	; (8000320 <getKeyInput+0x180>)
 800027e:	687b      	ldr	r3, [r7, #4]
 8000280:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000284:	2b00      	cmp	r3, #0
 8000286:	d10a      	bne.n	800029e <getKeyInput+0xfe>
						TimeOutForKeyPress[i] = 2000 / TIME_CYCLE;
 8000288:	4b26      	ldr	r3, [pc, #152]	; (8000324 <getKeyInput+0x184>)
 800028a:	681b      	ldr	r3, [r3, #0]
 800028c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000290:	fb92 f2f3 	sdiv	r2, r2, r3
 8000294:	4924      	ldr	r1, [pc, #144]	; (8000328 <getKeyInput+0x188>)
 8000296:	687b      	ldr	r3, [r7, #4]
 8000298:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if (KeyReg3[i] != KeyReg2[i]){
 800029c:	e029      	b.n	80002f2 <getKeyInput+0x152>
					}
					else {
						TimeOutForKeyPress[i] = 250 / TIME_CYCLE;
 800029e:	4b21      	ldr	r3, [pc, #132]	; (8000324 <getKeyInput+0x184>)
 80002a0:	681b      	ldr	r3, [r3, #0]
 80002a2:	22fa      	movs	r2, #250	; 0xfa
 80002a4:	fb92 f2f3 	sdiv	r2, r2, r3
 80002a8:	491f      	ldr	r1, [pc, #124]	; (8000328 <getKeyInput+0x188>)
 80002aa:	687b      	ldr	r3, [r7, #4]
 80002ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if (KeyReg3[i] != KeyReg2[i]){
 80002b0:	e01f      	b.n	80002f2 <getKeyInput+0x152>
					}
				}
			} else {
				TimeOutForKeyPress[i]--;
 80002b2:	4a1d      	ldr	r2, [pc, #116]	; (8000328 <getKeyInput+0x188>)
 80002b4:	687b      	ldr	r3, [r7, #4]
 80002b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002ba:	1e5a      	subs	r2, r3, #1
 80002bc:	491a      	ldr	r1, [pc, #104]	; (8000328 <getKeyInput+0x188>)
 80002be:	687b      	ldr	r3, [r7, #4]
 80002c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if (TimeOutForKeyPress[i] == 0){
 80002c4:	4a18      	ldr	r2, [pc, #96]	; (8000328 <getKeyInput+0x188>)
 80002c6:	687b      	ldr	r3, [r7, #4]
 80002c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d110      	bne.n	80002f2 <getKeyInput+0x152>
					KeyReg3[i] = NORMAL_STATE;
 80002d0:	4a12      	ldr	r2, [pc, #72]	; (800031c <getKeyInput+0x17c>)
 80002d2:	687b      	ldr	r3, [r7, #4]
 80002d4:	2101      	movs	r1, #1
 80002d6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					long_flag[i] = 1;
 80002da:	4a11      	ldr	r2, [pc, #68]	; (8000320 <getKeyInput+0x180>)
 80002dc:	687b      	ldr	r3, [r7, #4]
 80002de:	2101      	movs	r1, #1
 80002e0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			if (KeyReg3[i] != KeyReg2[i]){
 80002e4:	e005      	b.n	80002f2 <getKeyInput+0x152>
				}
			}
		}
		else {
			long_flag[i] = 0;
 80002e6:	4a0e      	ldr	r2, [pc, #56]	; (8000320 <getKeyInput+0x180>)
 80002e8:	687b      	ldr	r3, [r7, #4]
 80002ea:	2100      	movs	r1, #0
 80002ec:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 80002f0:	e000      	b.n	80002f4 <getKeyInput+0x154>
			if (KeyReg3[i] != KeyReg2[i]){
 80002f2:	bf00      	nop
	for (int i = 0; i < NUM_OF_BUTTONS; i++) {
 80002f4:	687b      	ldr	r3, [r7, #4]
 80002f6:	3301      	adds	r3, #1
 80002f8:	607b      	str	r3, [r7, #4]
 80002fa:	687b      	ldr	r3, [r7, #4]
 80002fc:	2b02      	cmp	r3, #2
 80002fe:	f77f af55 	ble.w	80001ac <getKeyInput+0xc>
		}
	}
}
 8000302:	bf00      	nop
 8000304:	bf00      	nop
 8000306:	3708      	adds	r7, #8
 8000308:	46bd      	mov	sp, r7
 800030a:	bd80      	pop	{r7, pc}
 800030c:	20000010 	.word	0x20000010
 8000310:	20000004 	.word	0x20000004
 8000314:	2000001c 	.word	0x2000001c
 8000318:	40010800 	.word	0x40010800
 800031c:	20000028 	.word	0x20000028
 8000320:	20000098 	.word	0x20000098
 8000324:	20000000 	.word	0x20000000
 8000328:	200000a4 	.word	0x200000a4

0800032c <display7seg_landscape>:
    0b0010000 // 9
};


//SEG for landscape LED
void display7seg_landscape(int num){
 800032c:	b580      	push	{r7, lr}
 800032e:	b084      	sub	sp, #16
 8000330:	af00      	add	r7, sp, #0
 8000332:	6078      	str	r0, [r7, #4]
	for (int i=0; i < 7; i++){
 8000334:	2300      	movs	r3, #0
 8000336:	60fb      	str	r3, [r7, #12]
 8000338:	e017      	b.n	800036a <display7seg_landscape+0x3e>
		HAL_GPIO_WritePin(GPIOB, SEG0_Pin<<i, (table[num]>>i) & 1);
 800033a:	2201      	movs	r2, #1
 800033c:	68fb      	ldr	r3, [r7, #12]
 800033e:	fa02 f303 	lsl.w	r3, r2, r3
 8000342:	b299      	uxth	r1, r3
 8000344:	4a0d      	ldr	r2, [pc, #52]	; (800037c <display7seg_landscape+0x50>)
 8000346:	687b      	ldr	r3, [r7, #4]
 8000348:	4413      	add	r3, r2
 800034a:	781b      	ldrb	r3, [r3, #0]
 800034c:	461a      	mov	r2, r3
 800034e:	68fb      	ldr	r3, [r7, #12]
 8000350:	fa42 f303 	asr.w	r3, r2, r3
 8000354:	b2db      	uxtb	r3, r3
 8000356:	f003 0301 	and.w	r3, r3, #1
 800035a:	b2db      	uxtb	r3, r3
 800035c:	461a      	mov	r2, r3
 800035e:	4808      	ldr	r0, [pc, #32]	; (8000380 <display7seg_landscape+0x54>)
 8000360:	f001 f8cd 	bl	80014fe <HAL_GPIO_WritePin>
	for (int i=0; i < 7; i++){
 8000364:	68fb      	ldr	r3, [r7, #12]
 8000366:	3301      	adds	r3, #1
 8000368:	60fb      	str	r3, [r7, #12]
 800036a:	68fb      	ldr	r3, [r7, #12]
 800036c:	2b06      	cmp	r3, #6
 800036e:	dde4      	ble.n	800033a <display7seg_landscape+0xe>
	}
}
 8000370:	bf00      	nop
 8000372:	bf00      	nop
 8000374:	3710      	adds	r7, #16
 8000376:	46bd      	mov	sp, r7
 8000378:	bd80      	pop	{r7, pc}
 800037a:	bf00      	nop
 800037c:	20000034 	.word	0x20000034
 8000380:	40010c00 	.word	0x40010c00

08000384 <display7seg_portrait>:

//A0 -> F0 for portrait LED
void display7seg_portrait(int num){
 8000384:	b580      	push	{r7, lr}
 8000386:	b084      	sub	sp, #16
 8000388:	af00      	add	r7, sp, #0
 800038a:	6078      	str	r0, [r7, #4]
	for (int i=0; i < 7; i++){
 800038c:	2300      	movs	r3, #0
 800038e:	60fb      	str	r3, [r7, #12]
 8000390:	e017      	b.n	80003c2 <display7seg_portrait+0x3e>
		HAL_GPIO_WritePin(GPIOB, A0_Pin<<i, (table[num]>>i) & 1);
 8000392:	2280      	movs	r2, #128	; 0x80
 8000394:	68fb      	ldr	r3, [r7, #12]
 8000396:	fa02 f303 	lsl.w	r3, r2, r3
 800039a:	b299      	uxth	r1, r3
 800039c:	4a0d      	ldr	r2, [pc, #52]	; (80003d4 <display7seg_portrait+0x50>)
 800039e:	687b      	ldr	r3, [r7, #4]
 80003a0:	4413      	add	r3, r2
 80003a2:	781b      	ldrb	r3, [r3, #0]
 80003a4:	461a      	mov	r2, r3
 80003a6:	68fb      	ldr	r3, [r7, #12]
 80003a8:	fa42 f303 	asr.w	r3, r2, r3
 80003ac:	b2db      	uxtb	r3, r3
 80003ae:	f003 0301 	and.w	r3, r3, #1
 80003b2:	b2db      	uxtb	r3, r3
 80003b4:	461a      	mov	r2, r3
 80003b6:	4808      	ldr	r0, [pc, #32]	; (80003d8 <display7seg_portrait+0x54>)
 80003b8:	f001 f8a1 	bl	80014fe <HAL_GPIO_WritePin>
	for (int i=0; i < 7; i++){
 80003bc:	68fb      	ldr	r3, [r7, #12]
 80003be:	3301      	adds	r3, #1
 80003c0:	60fb      	str	r3, [r7, #12]
 80003c2:	68fb      	ldr	r3, [r7, #12]
 80003c4:	2b06      	cmp	r3, #6
 80003c6:	dde4      	ble.n	8000392 <display7seg_portrait+0xe>
	}
}
 80003c8:	bf00      	nop
 80003ca:	bf00      	nop
 80003cc:	3710      	adds	r7, #16
 80003ce:	46bd      	mov	sp, r7
 80003d0:	bd80      	pop	{r7, pc}
 80003d2:	bf00      	nop
 80003d4:	20000034 	.word	0x20000034
 80003d8:	40010c00 	.word	0x40010c00

080003dc <update7SEGLandscape>:
int index_ledlc = 0;
int index_ledpt = 2;
int led_buffer[4] = {1, 2, 3, 4};

//led_buffer is used 0 - 1 for landscape, 2 - 3 for portrait LED
void update7SEGLandscape(int index){
 80003dc:	b580      	push	{r7, lr}
 80003de:	b082      	sub	sp, #8
 80003e0:	af00      	add	r7, sp, #0
 80003e2:	6078      	str	r0, [r7, #4]
	display7seg_landscape(led_buffer[index]);
 80003e4:	4a16      	ldr	r2, [pc, #88]	; (8000440 <update7SEGLandscape+0x64>)
 80003e6:	687b      	ldr	r3, [r7, #4]
 80003e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80003ec:	4618      	mov	r0, r3
 80003ee:	f7ff ff9d 	bl	800032c <display7seg_landscape>
	switch(index){
 80003f2:	687b      	ldr	r3, [r7, #4]
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	d003      	beq.n	8000400 <update7SEGLandscape+0x24>
 80003f8:	687b      	ldr	r3, [r7, #4]
 80003fa:	2b01      	cmp	r3, #1
 80003fc:	d00e      	beq.n	800041c <update7SEGLandscape+0x40>
			index_ledlc = 0;
			HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, SET);
			HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, RESET);
			break;
		default:
			break;
 80003fe:	e01b      	b.n	8000438 <update7SEGLandscape+0x5c>
			index_ledlc = 1;
 8000400:	4b10      	ldr	r3, [pc, #64]	; (8000444 <update7SEGLandscape+0x68>)
 8000402:	2201      	movs	r2, #1
 8000404:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, RESET);
 8000406:	2200      	movs	r2, #0
 8000408:	2140      	movs	r1, #64	; 0x40
 800040a:	480f      	ldr	r0, [pc, #60]	; (8000448 <update7SEGLandscape+0x6c>)
 800040c:	f001 f877 	bl	80014fe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, SET);
 8000410:	2201      	movs	r2, #1
 8000412:	2180      	movs	r1, #128	; 0x80
 8000414:	480c      	ldr	r0, [pc, #48]	; (8000448 <update7SEGLandscape+0x6c>)
 8000416:	f001 f872 	bl	80014fe <HAL_GPIO_WritePin>
			break;
 800041a:	e00d      	b.n	8000438 <update7SEGLandscape+0x5c>
			index_ledlc = 0;
 800041c:	4b09      	ldr	r3, [pc, #36]	; (8000444 <update7SEGLandscape+0x68>)
 800041e:	2200      	movs	r2, #0
 8000420:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, SET);
 8000422:	2201      	movs	r2, #1
 8000424:	2140      	movs	r1, #64	; 0x40
 8000426:	4808      	ldr	r0, [pc, #32]	; (8000448 <update7SEGLandscape+0x6c>)
 8000428:	f001 f869 	bl	80014fe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, RESET);
 800042c:	2200      	movs	r2, #0
 800042e:	2180      	movs	r1, #128	; 0x80
 8000430:	4805      	ldr	r0, [pc, #20]	; (8000448 <update7SEGLandscape+0x6c>)
 8000432:	f001 f864 	bl	80014fe <HAL_GPIO_WritePin>
			break;
 8000436:	bf00      	nop
	}
}
 8000438:	bf00      	nop
 800043a:	3708      	adds	r7, #8
 800043c:	46bd      	mov	sp, r7
 800043e:	bd80      	pop	{r7, pc}
 8000440:	20000044 	.word	0x20000044
 8000444:	200000b0 	.word	0x200000b0
 8000448:	40010800 	.word	0x40010800

0800044c <update7SEGPortrait>:

void update7SEGPortrait(int index){
 800044c:	b580      	push	{r7, lr}
 800044e:	b082      	sub	sp, #8
 8000450:	af00      	add	r7, sp, #0
 8000452:	6078      	str	r0, [r7, #4]
	display7seg_portrait(led_buffer[index]);
 8000454:	4a18      	ldr	r2, [pc, #96]	; (80004b8 <update7SEGPortrait+0x6c>)
 8000456:	687b      	ldr	r3, [r7, #4]
 8000458:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800045c:	4618      	mov	r0, r3
 800045e:	f7ff ff91 	bl	8000384 <display7seg_portrait>
	switch(index){
 8000462:	687b      	ldr	r3, [r7, #4]
 8000464:	2b02      	cmp	r3, #2
 8000466:	d003      	beq.n	8000470 <update7SEGPortrait+0x24>
 8000468:	687b      	ldr	r3, [r7, #4]
 800046a:	2b03      	cmp	r3, #3
 800046c:	d010      	beq.n	8000490 <update7SEGPortrait+0x44>
			index_ledpt = 2;
			HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, SET);
			HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, RESET);
			break;
		default:
			break;
 800046e:	e01f      	b.n	80004b0 <update7SEGPortrait+0x64>
			index_ledpt = 3;
 8000470:	4b12      	ldr	r3, [pc, #72]	; (80004bc <update7SEGPortrait+0x70>)
 8000472:	2203      	movs	r2, #3
 8000474:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, RESET);
 8000476:	2200      	movs	r2, #0
 8000478:	f44f 7180 	mov.w	r1, #256	; 0x100
 800047c:	4810      	ldr	r0, [pc, #64]	; (80004c0 <update7SEGPortrait+0x74>)
 800047e:	f001 f83e 	bl	80014fe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, SET);
 8000482:	2201      	movs	r2, #1
 8000484:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000488:	480d      	ldr	r0, [pc, #52]	; (80004c0 <update7SEGPortrait+0x74>)
 800048a:	f001 f838 	bl	80014fe <HAL_GPIO_WritePin>
			break;
 800048e:	e00f      	b.n	80004b0 <update7SEGPortrait+0x64>
			index_ledpt = 2;
 8000490:	4b0a      	ldr	r3, [pc, #40]	; (80004bc <update7SEGPortrait+0x70>)
 8000492:	2202      	movs	r2, #2
 8000494:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, SET);
 8000496:	2201      	movs	r2, #1
 8000498:	f44f 7180 	mov.w	r1, #256	; 0x100
 800049c:	4808      	ldr	r0, [pc, #32]	; (80004c0 <update7SEGPortrait+0x74>)
 800049e:	f001 f82e 	bl	80014fe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, RESET);
 80004a2:	2200      	movs	r2, #0
 80004a4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80004a8:	4805      	ldr	r0, [pc, #20]	; (80004c0 <update7SEGPortrait+0x74>)
 80004aa:	f001 f828 	bl	80014fe <HAL_GPIO_WritePin>
			break;
 80004ae:	bf00      	nop
	}
}
 80004b0:	bf00      	nop
 80004b2:	3708      	adds	r7, #8
 80004b4:	46bd      	mov	sp, r7
 80004b6:	bd80      	pop	{r7, pc}
 80004b8:	20000044 	.word	0x20000044
 80004bc:	20000040 	.word	0x20000040
 80004c0:	40010800 	.word	0x40010800

080004c4 <updateLedBufferMode1>:

int counter1 = 1, counter2 = 1;
void updateLedBufferMode1(){
 80004c4:	b480      	push	{r7}
 80004c6:	af00      	add	r7, sp, #0
	// 2 7-SEG LED Landscape
	/* Turn on RED-Landscape (count down from RED -> 0) */
	if (counter1 <= RED){
 80004c8:	4b9b      	ldr	r3, [pc, #620]	; (8000738 <updateLedBufferMode1+0x274>)
 80004ca:	681a      	ldr	r2, [r3, #0]
 80004cc:	4b9b      	ldr	r3, [pc, #620]	; (800073c <updateLedBufferMode1+0x278>)
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	429a      	cmp	r2, r3
 80004d2:	dc21      	bgt.n	8000518 <updateLedBufferMode1+0x54>
		led_buffer[0] = (RED - counter1 + 1) / 10;
 80004d4:	4b99      	ldr	r3, [pc, #612]	; (800073c <updateLedBufferMode1+0x278>)
 80004d6:	681a      	ldr	r2, [r3, #0]
 80004d8:	4b97      	ldr	r3, [pc, #604]	; (8000738 <updateLedBufferMode1+0x274>)
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	1ad3      	subs	r3, r2, r3
 80004de:	3301      	adds	r3, #1
 80004e0:	4a97      	ldr	r2, [pc, #604]	; (8000740 <updateLedBufferMode1+0x27c>)
 80004e2:	fb82 1203 	smull	r1, r2, r2, r3
 80004e6:	1092      	asrs	r2, r2, #2
 80004e8:	17db      	asrs	r3, r3, #31
 80004ea:	1ad3      	subs	r3, r2, r3
 80004ec:	4a95      	ldr	r2, [pc, #596]	; (8000744 <updateLedBufferMode1+0x280>)
 80004ee:	6013      	str	r3, [r2, #0]
		led_buffer[1] = (RED - counter1 + 1) % 10;
 80004f0:	4b92      	ldr	r3, [pc, #584]	; (800073c <updateLedBufferMode1+0x278>)
 80004f2:	681a      	ldr	r2, [r3, #0]
 80004f4:	4b90      	ldr	r3, [pc, #576]	; (8000738 <updateLedBufferMode1+0x274>)
 80004f6:	681b      	ldr	r3, [r3, #0]
 80004f8:	1ad3      	subs	r3, r2, r3
 80004fa:	1c59      	adds	r1, r3, #1
 80004fc:	4b90      	ldr	r3, [pc, #576]	; (8000740 <updateLedBufferMode1+0x27c>)
 80004fe:	fb83 2301 	smull	r2, r3, r3, r1
 8000502:	109a      	asrs	r2, r3, #2
 8000504:	17cb      	asrs	r3, r1, #31
 8000506:	1ad2      	subs	r2, r2, r3
 8000508:	4613      	mov	r3, r2
 800050a:	009b      	lsls	r3, r3, #2
 800050c:	4413      	add	r3, r2
 800050e:	005b      	lsls	r3, r3, #1
 8000510:	1aca      	subs	r2, r1, r3
 8000512:	4b8c      	ldr	r3, [pc, #560]	; (8000744 <updateLedBufferMode1+0x280>)
 8000514:	605a      	str	r2, [r3, #4]
 8000516:	e05d      	b.n	80005d4 <updateLedBufferMode1+0x110>
	}
	/* Turn on GREEN-Landscape (count down from GREEN -> 0) */
	else if (counter1 <= (RED + GREEN)){
 8000518:	4b88      	ldr	r3, [pc, #544]	; (800073c <updateLedBufferMode1+0x278>)
 800051a:	681a      	ldr	r2, [r3, #0]
 800051c:	4b8a      	ldr	r3, [pc, #552]	; (8000748 <updateLedBufferMode1+0x284>)
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	441a      	add	r2, r3
 8000522:	4b85      	ldr	r3, [pc, #532]	; (8000738 <updateLedBufferMode1+0x274>)
 8000524:	681b      	ldr	r3, [r3, #0]
 8000526:	429a      	cmp	r2, r3
 8000528:	db27      	blt.n	800057a <updateLedBufferMode1+0xb6>
		led_buffer[0] = (RED + GREEN - counter1 + 1) / 10;
 800052a:	4b84      	ldr	r3, [pc, #528]	; (800073c <updateLedBufferMode1+0x278>)
 800052c:	681a      	ldr	r2, [r3, #0]
 800052e:	4b86      	ldr	r3, [pc, #536]	; (8000748 <updateLedBufferMode1+0x284>)
 8000530:	681b      	ldr	r3, [r3, #0]
 8000532:	441a      	add	r2, r3
 8000534:	4b80      	ldr	r3, [pc, #512]	; (8000738 <updateLedBufferMode1+0x274>)
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	1ad3      	subs	r3, r2, r3
 800053a:	3301      	adds	r3, #1
 800053c:	4a80      	ldr	r2, [pc, #512]	; (8000740 <updateLedBufferMode1+0x27c>)
 800053e:	fb82 1203 	smull	r1, r2, r2, r3
 8000542:	1092      	asrs	r2, r2, #2
 8000544:	17db      	asrs	r3, r3, #31
 8000546:	1ad3      	subs	r3, r2, r3
 8000548:	4a7e      	ldr	r2, [pc, #504]	; (8000744 <updateLedBufferMode1+0x280>)
 800054a:	6013      	str	r3, [r2, #0]
		led_buffer[1] = (RED + GREEN - counter1 + 1) % 10;
 800054c:	4b7b      	ldr	r3, [pc, #492]	; (800073c <updateLedBufferMode1+0x278>)
 800054e:	681a      	ldr	r2, [r3, #0]
 8000550:	4b7d      	ldr	r3, [pc, #500]	; (8000748 <updateLedBufferMode1+0x284>)
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	441a      	add	r2, r3
 8000556:	4b78      	ldr	r3, [pc, #480]	; (8000738 <updateLedBufferMode1+0x274>)
 8000558:	681b      	ldr	r3, [r3, #0]
 800055a:	1ad3      	subs	r3, r2, r3
 800055c:	1c59      	adds	r1, r3, #1
 800055e:	4b78      	ldr	r3, [pc, #480]	; (8000740 <updateLedBufferMode1+0x27c>)
 8000560:	fb83 2301 	smull	r2, r3, r3, r1
 8000564:	109a      	asrs	r2, r3, #2
 8000566:	17cb      	asrs	r3, r1, #31
 8000568:	1ad2      	subs	r2, r2, r3
 800056a:	4613      	mov	r3, r2
 800056c:	009b      	lsls	r3, r3, #2
 800056e:	4413      	add	r3, r2
 8000570:	005b      	lsls	r3, r3, #1
 8000572:	1aca      	subs	r2, r1, r3
 8000574:	4b73      	ldr	r3, [pc, #460]	; (8000744 <updateLedBufferMode1+0x280>)
 8000576:	605a      	str	r2, [r3, #4]
 8000578:	e02c      	b.n	80005d4 <updateLedBufferMode1+0x110>
	}
	/* Turn on AMPER-Landscape (count down from AMPER -> 0) */
	else{
		led_buffer[0] = (RED + GREEN + AMBER - counter1 + 1) / 10;
 800057a:	4b70      	ldr	r3, [pc, #448]	; (800073c <updateLedBufferMode1+0x278>)
 800057c:	681a      	ldr	r2, [r3, #0]
 800057e:	4b72      	ldr	r3, [pc, #456]	; (8000748 <updateLedBufferMode1+0x284>)
 8000580:	681b      	ldr	r3, [r3, #0]
 8000582:	441a      	add	r2, r3
 8000584:	4b71      	ldr	r3, [pc, #452]	; (800074c <updateLedBufferMode1+0x288>)
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	441a      	add	r2, r3
 800058a:	4b6b      	ldr	r3, [pc, #428]	; (8000738 <updateLedBufferMode1+0x274>)
 800058c:	681b      	ldr	r3, [r3, #0]
 800058e:	1ad3      	subs	r3, r2, r3
 8000590:	3301      	adds	r3, #1
 8000592:	4a6b      	ldr	r2, [pc, #428]	; (8000740 <updateLedBufferMode1+0x27c>)
 8000594:	fb82 1203 	smull	r1, r2, r2, r3
 8000598:	1092      	asrs	r2, r2, #2
 800059a:	17db      	asrs	r3, r3, #31
 800059c:	1ad3      	subs	r3, r2, r3
 800059e:	4a69      	ldr	r2, [pc, #420]	; (8000744 <updateLedBufferMode1+0x280>)
 80005a0:	6013      	str	r3, [r2, #0]
		led_buffer[1] = (RED + GREEN + AMBER - counter1 + 1) % 10;
 80005a2:	4b66      	ldr	r3, [pc, #408]	; (800073c <updateLedBufferMode1+0x278>)
 80005a4:	681a      	ldr	r2, [r3, #0]
 80005a6:	4b68      	ldr	r3, [pc, #416]	; (8000748 <updateLedBufferMode1+0x284>)
 80005a8:	681b      	ldr	r3, [r3, #0]
 80005aa:	441a      	add	r2, r3
 80005ac:	4b67      	ldr	r3, [pc, #412]	; (800074c <updateLedBufferMode1+0x288>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	441a      	add	r2, r3
 80005b2:	4b61      	ldr	r3, [pc, #388]	; (8000738 <updateLedBufferMode1+0x274>)
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	1ad3      	subs	r3, r2, r3
 80005b8:	1c59      	adds	r1, r3, #1
 80005ba:	4b61      	ldr	r3, [pc, #388]	; (8000740 <updateLedBufferMode1+0x27c>)
 80005bc:	fb83 2301 	smull	r2, r3, r3, r1
 80005c0:	109a      	asrs	r2, r3, #2
 80005c2:	17cb      	asrs	r3, r1, #31
 80005c4:	1ad2      	subs	r2, r2, r3
 80005c6:	4613      	mov	r3, r2
 80005c8:	009b      	lsls	r3, r3, #2
 80005ca:	4413      	add	r3, r2
 80005cc:	005b      	lsls	r3, r3, #1
 80005ce:	1aca      	subs	r2, r1, r3
 80005d0:	4b5c      	ldr	r3, [pc, #368]	; (8000744 <updateLedBufferMode1+0x280>)
 80005d2:	605a      	str	r2, [r3, #4]
	}
	counter1++;
 80005d4:	4b58      	ldr	r3, [pc, #352]	; (8000738 <updateLedBufferMode1+0x274>)
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	3301      	adds	r3, #1
 80005da:	4a57      	ldr	r2, [pc, #348]	; (8000738 <updateLedBufferMode1+0x274>)
 80005dc:	6013      	str	r3, [r2, #0]
	/* Return to turn on RED-Landscape */
	if (counter1 > RED + AMBER + GREEN) counter1 = 1;
 80005de:	4b57      	ldr	r3, [pc, #348]	; (800073c <updateLedBufferMode1+0x278>)
 80005e0:	681a      	ldr	r2, [r3, #0]
 80005e2:	4b5a      	ldr	r3, [pc, #360]	; (800074c <updateLedBufferMode1+0x288>)
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	441a      	add	r2, r3
 80005e8:	4b57      	ldr	r3, [pc, #348]	; (8000748 <updateLedBufferMode1+0x284>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	441a      	add	r2, r3
 80005ee:	4b52      	ldr	r3, [pc, #328]	; (8000738 <updateLedBufferMode1+0x274>)
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	429a      	cmp	r2, r3
 80005f4:	da02      	bge.n	80005fc <updateLedBufferMode1+0x138>
 80005f6:	4b50      	ldr	r3, [pc, #320]	; (8000738 <updateLedBufferMode1+0x274>)
 80005f8:	2201      	movs	r2, #1
 80005fa:	601a      	str	r2, [r3, #0]


	// 2 7-SEG LED Portrait
	/* Turn on GREEN-Portrait (count down from GREEN -> 0) */
	if (counter2 <= GREEN){
 80005fc:	4b54      	ldr	r3, [pc, #336]	; (8000750 <updateLedBufferMode1+0x28c>)
 80005fe:	681a      	ldr	r2, [r3, #0]
 8000600:	4b51      	ldr	r3, [pc, #324]	; (8000748 <updateLedBufferMode1+0x284>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	429a      	cmp	r2, r3
 8000606:	dc21      	bgt.n	800064c <updateLedBufferMode1+0x188>
		led_buffer[2] = (GREEN - counter2 + 1) / 10;
 8000608:	4b4f      	ldr	r3, [pc, #316]	; (8000748 <updateLedBufferMode1+0x284>)
 800060a:	681a      	ldr	r2, [r3, #0]
 800060c:	4b50      	ldr	r3, [pc, #320]	; (8000750 <updateLedBufferMode1+0x28c>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	1ad3      	subs	r3, r2, r3
 8000612:	3301      	adds	r3, #1
 8000614:	4a4a      	ldr	r2, [pc, #296]	; (8000740 <updateLedBufferMode1+0x27c>)
 8000616:	fb82 1203 	smull	r1, r2, r2, r3
 800061a:	1092      	asrs	r2, r2, #2
 800061c:	17db      	asrs	r3, r3, #31
 800061e:	1ad3      	subs	r3, r2, r3
 8000620:	4a48      	ldr	r2, [pc, #288]	; (8000744 <updateLedBufferMode1+0x280>)
 8000622:	6093      	str	r3, [r2, #8]
		led_buffer[3] = (GREEN - counter2 + 1) % 10;
 8000624:	4b48      	ldr	r3, [pc, #288]	; (8000748 <updateLedBufferMode1+0x284>)
 8000626:	681a      	ldr	r2, [r3, #0]
 8000628:	4b49      	ldr	r3, [pc, #292]	; (8000750 <updateLedBufferMode1+0x28c>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	1ad3      	subs	r3, r2, r3
 800062e:	1c59      	adds	r1, r3, #1
 8000630:	4b43      	ldr	r3, [pc, #268]	; (8000740 <updateLedBufferMode1+0x27c>)
 8000632:	fb83 2301 	smull	r2, r3, r3, r1
 8000636:	109a      	asrs	r2, r3, #2
 8000638:	17cb      	asrs	r3, r1, #31
 800063a:	1ad2      	subs	r2, r2, r3
 800063c:	4613      	mov	r3, r2
 800063e:	009b      	lsls	r3, r3, #2
 8000640:	4413      	add	r3, r2
 8000642:	005b      	lsls	r3, r3, #1
 8000644:	1aca      	subs	r2, r1, r3
 8000646:	4b3f      	ldr	r3, [pc, #252]	; (8000744 <updateLedBufferMode1+0x280>)
 8000648:	60da      	str	r2, [r3, #12]
 800064a:	e05d      	b.n	8000708 <updateLedBufferMode1+0x244>
	}
	/* Turn on AMPER-Portrait (count down from AMPER -> 0) */
	else if (counter2 <= (AMBER + GREEN)){
 800064c:	4b3f      	ldr	r3, [pc, #252]	; (800074c <updateLedBufferMode1+0x288>)
 800064e:	681a      	ldr	r2, [r3, #0]
 8000650:	4b3d      	ldr	r3, [pc, #244]	; (8000748 <updateLedBufferMode1+0x284>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	441a      	add	r2, r3
 8000656:	4b3e      	ldr	r3, [pc, #248]	; (8000750 <updateLedBufferMode1+0x28c>)
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	429a      	cmp	r2, r3
 800065c:	db27      	blt.n	80006ae <updateLedBufferMode1+0x1ea>
		led_buffer[2] = (AMBER + GREEN - counter2 + 1) / 10;
 800065e:	4b3b      	ldr	r3, [pc, #236]	; (800074c <updateLedBufferMode1+0x288>)
 8000660:	681a      	ldr	r2, [r3, #0]
 8000662:	4b39      	ldr	r3, [pc, #228]	; (8000748 <updateLedBufferMode1+0x284>)
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	441a      	add	r2, r3
 8000668:	4b39      	ldr	r3, [pc, #228]	; (8000750 <updateLedBufferMode1+0x28c>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	1ad3      	subs	r3, r2, r3
 800066e:	3301      	adds	r3, #1
 8000670:	4a33      	ldr	r2, [pc, #204]	; (8000740 <updateLedBufferMode1+0x27c>)
 8000672:	fb82 1203 	smull	r1, r2, r2, r3
 8000676:	1092      	asrs	r2, r2, #2
 8000678:	17db      	asrs	r3, r3, #31
 800067a:	1ad3      	subs	r3, r2, r3
 800067c:	4a31      	ldr	r2, [pc, #196]	; (8000744 <updateLedBufferMode1+0x280>)
 800067e:	6093      	str	r3, [r2, #8]
		led_buffer[3] = (AMBER + GREEN - counter2 + 1) % 10;
 8000680:	4b32      	ldr	r3, [pc, #200]	; (800074c <updateLedBufferMode1+0x288>)
 8000682:	681a      	ldr	r2, [r3, #0]
 8000684:	4b30      	ldr	r3, [pc, #192]	; (8000748 <updateLedBufferMode1+0x284>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	441a      	add	r2, r3
 800068a:	4b31      	ldr	r3, [pc, #196]	; (8000750 <updateLedBufferMode1+0x28c>)
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	1ad3      	subs	r3, r2, r3
 8000690:	1c59      	adds	r1, r3, #1
 8000692:	4b2b      	ldr	r3, [pc, #172]	; (8000740 <updateLedBufferMode1+0x27c>)
 8000694:	fb83 2301 	smull	r2, r3, r3, r1
 8000698:	109a      	asrs	r2, r3, #2
 800069a:	17cb      	asrs	r3, r1, #31
 800069c:	1ad2      	subs	r2, r2, r3
 800069e:	4613      	mov	r3, r2
 80006a0:	009b      	lsls	r3, r3, #2
 80006a2:	4413      	add	r3, r2
 80006a4:	005b      	lsls	r3, r3, #1
 80006a6:	1aca      	subs	r2, r1, r3
 80006a8:	4b26      	ldr	r3, [pc, #152]	; (8000744 <updateLedBufferMode1+0x280>)
 80006aa:	60da      	str	r2, [r3, #12]
 80006ac:	e02c      	b.n	8000708 <updateLedBufferMode1+0x244>
	}
	/* Turn on RED-Portrait (count down from RED -> 0) */
	else {
		led_buffer[2] = (RED + GREEN + AMBER - counter2 + 1) / 10;
 80006ae:	4b23      	ldr	r3, [pc, #140]	; (800073c <updateLedBufferMode1+0x278>)
 80006b0:	681a      	ldr	r2, [r3, #0]
 80006b2:	4b25      	ldr	r3, [pc, #148]	; (8000748 <updateLedBufferMode1+0x284>)
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	441a      	add	r2, r3
 80006b8:	4b24      	ldr	r3, [pc, #144]	; (800074c <updateLedBufferMode1+0x288>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	441a      	add	r2, r3
 80006be:	4b24      	ldr	r3, [pc, #144]	; (8000750 <updateLedBufferMode1+0x28c>)
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	1ad3      	subs	r3, r2, r3
 80006c4:	3301      	adds	r3, #1
 80006c6:	4a1e      	ldr	r2, [pc, #120]	; (8000740 <updateLedBufferMode1+0x27c>)
 80006c8:	fb82 1203 	smull	r1, r2, r2, r3
 80006cc:	1092      	asrs	r2, r2, #2
 80006ce:	17db      	asrs	r3, r3, #31
 80006d0:	1ad3      	subs	r3, r2, r3
 80006d2:	4a1c      	ldr	r2, [pc, #112]	; (8000744 <updateLedBufferMode1+0x280>)
 80006d4:	6093      	str	r3, [r2, #8]
		led_buffer[3] = (RED + GREEN + AMBER - counter2 + 1) % 10;
 80006d6:	4b19      	ldr	r3, [pc, #100]	; (800073c <updateLedBufferMode1+0x278>)
 80006d8:	681a      	ldr	r2, [r3, #0]
 80006da:	4b1b      	ldr	r3, [pc, #108]	; (8000748 <updateLedBufferMode1+0x284>)
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	441a      	add	r2, r3
 80006e0:	4b1a      	ldr	r3, [pc, #104]	; (800074c <updateLedBufferMode1+0x288>)
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	441a      	add	r2, r3
 80006e6:	4b1a      	ldr	r3, [pc, #104]	; (8000750 <updateLedBufferMode1+0x28c>)
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	1ad3      	subs	r3, r2, r3
 80006ec:	1c59      	adds	r1, r3, #1
 80006ee:	4b14      	ldr	r3, [pc, #80]	; (8000740 <updateLedBufferMode1+0x27c>)
 80006f0:	fb83 2301 	smull	r2, r3, r3, r1
 80006f4:	109a      	asrs	r2, r3, #2
 80006f6:	17cb      	asrs	r3, r1, #31
 80006f8:	1ad2      	subs	r2, r2, r3
 80006fa:	4613      	mov	r3, r2
 80006fc:	009b      	lsls	r3, r3, #2
 80006fe:	4413      	add	r3, r2
 8000700:	005b      	lsls	r3, r3, #1
 8000702:	1aca      	subs	r2, r1, r3
 8000704:	4b0f      	ldr	r3, [pc, #60]	; (8000744 <updateLedBufferMode1+0x280>)
 8000706:	60da      	str	r2, [r3, #12]
	}
	counter2++;
 8000708:	4b11      	ldr	r3, [pc, #68]	; (8000750 <updateLedBufferMode1+0x28c>)
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	3301      	adds	r3, #1
 800070e:	4a10      	ldr	r2, [pc, #64]	; (8000750 <updateLedBufferMode1+0x28c>)
 8000710:	6013      	str	r3, [r2, #0]
	/* Return to turn on GREEN-Portrait */
	if (counter2 > RED + AMBER + GREEN) counter2 = 1;
 8000712:	4b0a      	ldr	r3, [pc, #40]	; (800073c <updateLedBufferMode1+0x278>)
 8000714:	681a      	ldr	r2, [r3, #0]
 8000716:	4b0d      	ldr	r3, [pc, #52]	; (800074c <updateLedBufferMode1+0x288>)
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	441a      	add	r2, r3
 800071c:	4b0a      	ldr	r3, [pc, #40]	; (8000748 <updateLedBufferMode1+0x284>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	441a      	add	r2, r3
 8000722:	4b0b      	ldr	r3, [pc, #44]	; (8000750 <updateLedBufferMode1+0x28c>)
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	429a      	cmp	r2, r3
 8000728:	da02      	bge.n	8000730 <updateLedBufferMode1+0x26c>
 800072a:	4b09      	ldr	r3, [pc, #36]	; (8000750 <updateLedBufferMode1+0x28c>)
 800072c:	2201      	movs	r2, #1
 800072e:	601a      	str	r2, [r3, #0]
}
 8000730:	bf00      	nop
 8000732:	46bd      	mov	sp, r7
 8000734:	bc80      	pop	{r7}
 8000736:	4770      	bx	lr
 8000738:	20000054 	.word	0x20000054
 800073c:	2000005c 	.word	0x2000005c
 8000740:	66666667 	.word	0x66666667
 8000744:	20000044 	.word	0x20000044
 8000748:	20000064 	.word	0x20000064
 800074c:	20000060 	.word	0x20000060
 8000750:	20000058 	.word	0x20000058

08000754 <fsm_traffic_light>:

#include "fsm_traffic_light.h"

int status = INIT;

void fsm_traffic_light(){
 8000754:	b580      	push	{r7, lr}
 8000756:	af00      	add	r7, sp, #0

	switch(status){
 8000758:	4bb1      	ldr	r3, [pc, #708]	; (8000a20 <fsm_traffic_light+0x2cc>)
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	2b0e      	cmp	r3, #14
 800075e:	f200 81bc 	bhi.w	8000ada <fsm_traffic_light+0x386>
 8000762:	a201      	add	r2, pc, #4	; (adr r2, 8000768 <fsm_traffic_light+0x14>)
 8000764:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000768:	080007a5 	.word	0x080007a5
 800076c:	080007ad 	.word	0x080007ad
 8000770:	08000adb 	.word	0x08000adb
 8000774:	08000adb 	.word	0x08000adb
 8000778:	08000adb 	.word	0x08000adb
 800077c:	08000adb 	.word	0x08000adb
 8000780:	08000adb 	.word	0x08000adb
 8000784:	08000adb 	.word	0x08000adb
 8000788:	08000adb 	.word	0x08000adb
 800078c:	08000adb 	.word	0x08000adb
 8000790:	08000adb 	.word	0x08000adb
 8000794:	08000855 	.word	0x08000855
 8000798:	080008f7 	.word	0x080008f7
 800079c:	08000981 	.word	0x08000981
 80007a0:	08000a45 	.word	0x08000a45

		case INIT:
			status = MODE1;
 80007a4:	4b9e      	ldr	r3, [pc, #632]	; (8000a20 <fsm_traffic_light+0x2cc>)
 80007a6:	2201      	movs	r2, #1
 80007a8:	601a      	str	r2, [r3, #0]
			break;
 80007aa:	e196      	b.n	8000ada <fsm_traffic_light+0x386>

		case MODE1:
			//Set up LED
			HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin, RESET);
 80007ac:	2200      	movs	r2, #0
 80007ae:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80007b2:	489c      	ldr	r0, [pc, #624]	; (8000a24 <fsm_traffic_light+0x2d0>)
 80007b4:	f000 fea3 	bl	80014fe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(A1_GPIO_Port, A1_Pin, SET);
 80007b8:	2201      	movs	r2, #1
 80007ba:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80007be:	4899      	ldr	r0, [pc, #612]	; (8000a24 <fsm_traffic_light+0x2d0>)
 80007c0:	f000 fe9d 	bl	80014fe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(G1_GPIO_Port, G1_Pin, SET);
 80007c4:	2201      	movs	r2, #1
 80007c6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007ca:	4896      	ldr	r0, [pc, #600]	; (8000a24 <fsm_traffic_light+0x2d0>)
 80007cc:	f000 fe97 	bl	80014fe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(R1_GPIO_Port, R2_Pin, SET);
 80007d0:	2201      	movs	r2, #1
 80007d2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007d6:	4893      	ldr	r0, [pc, #588]	; (8000a24 <fsm_traffic_light+0x2d0>)
 80007d8:	f000 fe91 	bl	80014fe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(A2_GPIO_Port, A2_Pin, SET);
 80007dc:	2201      	movs	r2, #1
 80007de:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80007e2:	4890      	ldr	r0, [pc, #576]	; (8000a24 <fsm_traffic_light+0x2d0>)
 80007e4:	f000 fe8b 	bl	80014fe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(G2_GPIO_Port, G2_Pin, RESET);
 80007e8:	2200      	movs	r2, #0
 80007ea:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80007ee:	488d      	ldr	r0, [pc, #564]	; (8000a24 <fsm_traffic_light+0x2d0>)
 80007f0:	f000 fe85 	bl	80014fe <HAL_GPIO_WritePin>

			//Set up default value
			counter1 = counter2 = 1;
 80007f4:	4b8c      	ldr	r3, [pc, #560]	; (8000a28 <fsm_traffic_light+0x2d4>)
 80007f6:	2201      	movs	r2, #1
 80007f8:	601a      	str	r2, [r3, #0]
 80007fa:	4b8b      	ldr	r3, [pc, #556]	; (8000a28 <fsm_traffic_light+0x2d4>)
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	4a8b      	ldr	r2, [pc, #556]	; (8000a2c <fsm_traffic_light+0x2d8>)
 8000800:	6013      	str	r3, [r2, #0]
			index_ledlc = 0;
 8000802:	4b8b      	ldr	r3, [pc, #556]	; (8000a30 <fsm_traffic_light+0x2dc>)
 8000804:	2200      	movs	r2, #0
 8000806:	601a      	str	r2, [r3, #0]
			index_ledpt = 2;
 8000808:	4b8a      	ldr	r3, [pc, #552]	; (8000a34 <fsm_traffic_light+0x2e0>)
 800080a:	2202      	movs	r2, #2
 800080c:	601a      	str	r2, [r3, #0]
			updateLedBufferMode1();
 800080e:	f7ff fe59 	bl	80004c4 <updateLedBufferMode1>
			update7SEGLandscape(index_ledlc);
 8000812:	4b87      	ldr	r3, [pc, #540]	; (8000a30 <fsm_traffic_light+0x2dc>)
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	4618      	mov	r0, r3
 8000818:	f7ff fde0 	bl	80003dc <update7SEGLandscape>
			update7SEGPortrait(index_ledpt);
 800081c:	4b85      	ldr	r3, [pc, #532]	; (8000a34 <fsm_traffic_light+0x2e0>)
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	4618      	mov	r0, r3
 8000822:	f7ff fe13 	bl	800044c <update7SEGPortrait>

			//Set timer
			setTimer(0, GREEN * 1000);	// Set timer for RED_GREEN
 8000826:	4b84      	ldr	r3, [pc, #528]	; (8000a38 <fsm_traffic_light+0x2e4>)
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800082e:	fb02 f303 	mul.w	r3, r2, r3
 8000832:	4619      	mov	r1, r3
 8000834:	2000      	movs	r0, #0
 8000836:	f000 fa6d 	bl	8000d14 <setTimer>
			setTimer(1, 1000);			// Set timer for updateLedBufferMode1
 800083a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800083e:	2001      	movs	r0, #1
 8000840:	f000 fa68 	bl	8000d14 <setTimer>
			setTimer(2, 250);			// Set timer for 7SEG LED
 8000844:	21fa      	movs	r1, #250	; 0xfa
 8000846:	2002      	movs	r0, #2
 8000848:	f000 fa64 	bl	8000d14 <setTimer>

			status = RED_GREEN;
 800084c:	4b74      	ldr	r3, [pc, #464]	; (8000a20 <fsm_traffic_light+0x2cc>)
 800084e:	220b      	movs	r2, #11
 8000850:	601a      	str	r2, [r3, #0]
			break;
 8000852:	e142      	b.n	8000ada <fsm_traffic_light+0x386>

		case RED_GREEN:
			//Set up LED
			HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin, RESET);
 8000854:	2200      	movs	r2, #0
 8000856:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800085a:	4872      	ldr	r0, [pc, #456]	; (8000a24 <fsm_traffic_light+0x2d0>)
 800085c:	f000 fe4f 	bl	80014fe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(A1_GPIO_Port, A1_Pin, SET);
 8000860:	2201      	movs	r2, #1
 8000862:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000866:	486f      	ldr	r0, [pc, #444]	; (8000a24 <fsm_traffic_light+0x2d0>)
 8000868:	f000 fe49 	bl	80014fe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(R2_GPIO_Port, R2_Pin, SET);
 800086c:	2201      	movs	r2, #1
 800086e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000872:	486c      	ldr	r0, [pc, #432]	; (8000a24 <fsm_traffic_light+0x2d0>)
 8000874:	f000 fe43 	bl	80014fe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(G2_GPIO_Port, G2_Pin, RESET);
 8000878:	2200      	movs	r2, #0
 800087a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800087e:	4869      	ldr	r0, [pc, #420]	; (8000a24 <fsm_traffic_light+0x2d0>)
 8000880:	f000 fe3d 	bl	80014fe <HAL_GPIO_WritePin>

			if (timer_flag[0] == 1){
 8000884:	4b6d      	ldr	r3, [pc, #436]	; (8000a3c <fsm_traffic_light+0x2e8>)
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	2b01      	cmp	r3, #1
 800088a:	d10c      	bne.n	80008a6 <fsm_traffic_light+0x152>
				status = RED_AMBER;
 800088c:	4b64      	ldr	r3, [pc, #400]	; (8000a20 <fsm_traffic_light+0x2cc>)
 800088e:	220c      	movs	r2, #12
 8000890:	601a      	str	r2, [r3, #0]
				setTimer(0, AMBER * 1000);
 8000892:	4b6b      	ldr	r3, [pc, #428]	; (8000a40 <fsm_traffic_light+0x2ec>)
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800089a:	fb02 f303 	mul.w	r3, r2, r3
 800089e:	4619      	mov	r1, r3
 80008a0:	2000      	movs	r0, #0
 80008a2:	f000 fa37 	bl	8000d14 <setTimer>
			}

			if (timer_flag[1] == 1){
 80008a6:	4b65      	ldr	r3, [pc, #404]	; (8000a3c <fsm_traffic_light+0x2e8>)
 80008a8:	685b      	ldr	r3, [r3, #4]
 80008aa:	2b01      	cmp	r3, #1
 80008ac:	d106      	bne.n	80008bc <fsm_traffic_light+0x168>
				updateLedBufferMode1();
 80008ae:	f7ff fe09 	bl	80004c4 <updateLedBufferMode1>
				setTimer(1, 1000);
 80008b2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80008b6:	2001      	movs	r0, #1
 80008b8:	f000 fa2c 	bl	8000d14 <setTimer>
			}

			if (timer_flag[2] == 1){
 80008bc:	4b5f      	ldr	r3, [pc, #380]	; (8000a3c <fsm_traffic_light+0x2e8>)
 80008be:	689b      	ldr	r3, [r3, #8]
 80008c0:	2b01      	cmp	r3, #1
 80008c2:	d10d      	bne.n	80008e0 <fsm_traffic_light+0x18c>
				update7SEGLandscape(index_ledlc);
 80008c4:	4b5a      	ldr	r3, [pc, #360]	; (8000a30 <fsm_traffic_light+0x2dc>)
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	4618      	mov	r0, r3
 80008ca:	f7ff fd87 	bl	80003dc <update7SEGLandscape>
				update7SEGPortrait(index_ledpt);
 80008ce:	4b59      	ldr	r3, [pc, #356]	; (8000a34 <fsm_traffic_light+0x2e0>)
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	4618      	mov	r0, r3
 80008d4:	f7ff fdba 	bl	800044c <update7SEGPortrait>
				setTimer(2, 250);
 80008d8:	21fa      	movs	r1, #250	; 0xfa
 80008da:	2002      	movs	r0, #2
 80008dc:	f000 fa1a 	bl	8000d14 <setTimer>
			}

			// If button 1 is pressed, come to MODE2
			if (isButtonPressed(0) == 1){
 80008e0:	2000      	movs	r0, #0
 80008e2:	f7ff fc33 	bl	800014c <isButtonPressed>
 80008e6:	4603      	mov	r3, r0
 80008e8:	2b01      	cmp	r3, #1
 80008ea:	f040 80ef 	bne.w	8000acc <fsm_traffic_light+0x378>
				status = MODE2;
 80008ee:	4b4c      	ldr	r3, [pc, #304]	; (8000a20 <fsm_traffic_light+0x2cc>)
 80008f0:	2202      	movs	r2, #2
 80008f2:	601a      	str	r2, [r3, #0]
			}
			break;
 80008f4:	e0ea      	b.n	8000acc <fsm_traffic_light+0x378>

		case RED_AMBER:
			//Set up LED
			HAL_GPIO_WritePin(G2_GPIO_Port, G2_Pin, SET);
 80008f6:	2201      	movs	r2, #1
 80008f8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80008fc:	4849      	ldr	r0, [pc, #292]	; (8000a24 <fsm_traffic_light+0x2d0>)
 80008fe:	f000 fdfe 	bl	80014fe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(A2_GPIO_Port, A2_Pin, RESET);
 8000902:	2200      	movs	r2, #0
 8000904:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000908:	4846      	ldr	r0, [pc, #280]	; (8000a24 <fsm_traffic_light+0x2d0>)
 800090a:	f000 fdf8 	bl	80014fe <HAL_GPIO_WritePin>

			if (timer_flag[0] == 1){
 800090e:	4b4b      	ldr	r3, [pc, #300]	; (8000a3c <fsm_traffic_light+0x2e8>)
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	2b01      	cmp	r3, #1
 8000914:	d10c      	bne.n	8000930 <fsm_traffic_light+0x1dc>
				status = GREEN_RED;
 8000916:	4b42      	ldr	r3, [pc, #264]	; (8000a20 <fsm_traffic_light+0x2cc>)
 8000918:	220d      	movs	r2, #13
 800091a:	601a      	str	r2, [r3, #0]
				setTimer(0, GREEN * 1000);
 800091c:	4b46      	ldr	r3, [pc, #280]	; (8000a38 <fsm_traffic_light+0x2e4>)
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000924:	fb02 f303 	mul.w	r3, r2, r3
 8000928:	4619      	mov	r1, r3
 800092a:	2000      	movs	r0, #0
 800092c:	f000 f9f2 	bl	8000d14 <setTimer>
			}

			if (timer_flag[1] == 1){
 8000930:	4b42      	ldr	r3, [pc, #264]	; (8000a3c <fsm_traffic_light+0x2e8>)
 8000932:	685b      	ldr	r3, [r3, #4]
 8000934:	2b01      	cmp	r3, #1
 8000936:	d106      	bne.n	8000946 <fsm_traffic_light+0x1f2>
				updateLedBufferMode1();
 8000938:	f7ff fdc4 	bl	80004c4 <updateLedBufferMode1>
				setTimer(1, 1000);
 800093c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000940:	2001      	movs	r0, #1
 8000942:	f000 f9e7 	bl	8000d14 <setTimer>
			}

			if (timer_flag[2] == 1){
 8000946:	4b3d      	ldr	r3, [pc, #244]	; (8000a3c <fsm_traffic_light+0x2e8>)
 8000948:	689b      	ldr	r3, [r3, #8]
 800094a:	2b01      	cmp	r3, #1
 800094c:	d10d      	bne.n	800096a <fsm_traffic_light+0x216>
				update7SEGLandscape(index_ledlc);
 800094e:	4b38      	ldr	r3, [pc, #224]	; (8000a30 <fsm_traffic_light+0x2dc>)
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	4618      	mov	r0, r3
 8000954:	f7ff fd42 	bl	80003dc <update7SEGLandscape>
				update7SEGPortrait(index_ledpt);
 8000958:	4b36      	ldr	r3, [pc, #216]	; (8000a34 <fsm_traffic_light+0x2e0>)
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	4618      	mov	r0, r3
 800095e:	f7ff fd75 	bl	800044c <update7SEGPortrait>
				setTimer(2, 250);
 8000962:	21fa      	movs	r1, #250	; 0xfa
 8000964:	2002      	movs	r0, #2
 8000966:	f000 f9d5 	bl	8000d14 <setTimer>
			}
			// If button 1 is pressed, come to MODE2
			if (isButtonPressed(0) == 1){
 800096a:	2000      	movs	r0, #0
 800096c:	f7ff fbee 	bl	800014c <isButtonPressed>
 8000970:	4603      	mov	r3, r0
 8000972:	2b01      	cmp	r3, #1
 8000974:	f040 80ac 	bne.w	8000ad0 <fsm_traffic_light+0x37c>
				status = MODE2;
 8000978:	4b29      	ldr	r3, [pc, #164]	; (8000a20 <fsm_traffic_light+0x2cc>)
 800097a:	2202      	movs	r2, #2
 800097c:	601a      	str	r2, [r3, #0]
			}
			break;
 800097e:	e0a7      	b.n	8000ad0 <fsm_traffic_light+0x37c>

		case GREEN_RED:
			//Set up LED
			HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin, SET);
 8000980:	2201      	movs	r2, #1
 8000982:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000986:	4827      	ldr	r0, [pc, #156]	; (8000a24 <fsm_traffic_light+0x2d0>)
 8000988:	f000 fdb9 	bl	80014fe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(G1_GPIO_Port, G1_Pin, RESET);
 800098c:	2200      	movs	r2, #0
 800098e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000992:	4824      	ldr	r0, [pc, #144]	; (8000a24 <fsm_traffic_light+0x2d0>)
 8000994:	f000 fdb3 	bl	80014fe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(A2_GPIO_Port, A2_Pin, SET);
 8000998:	2201      	movs	r2, #1
 800099a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800099e:	4821      	ldr	r0, [pc, #132]	; (8000a24 <fsm_traffic_light+0x2d0>)
 80009a0:	f000 fdad 	bl	80014fe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(R2_GPIO_Port, R2_Pin, RESET);
 80009a4:	2200      	movs	r2, #0
 80009a6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009aa:	481e      	ldr	r0, [pc, #120]	; (8000a24 <fsm_traffic_light+0x2d0>)
 80009ac:	f000 fda7 	bl	80014fe <HAL_GPIO_WritePin>

			if (timer_flag[0] == 1){
 80009b0:	4b22      	ldr	r3, [pc, #136]	; (8000a3c <fsm_traffic_light+0x2e8>)
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	2b01      	cmp	r3, #1
 80009b6:	d10c      	bne.n	80009d2 <fsm_traffic_light+0x27e>
				status = AMBER_RED;
 80009b8:	4b19      	ldr	r3, [pc, #100]	; (8000a20 <fsm_traffic_light+0x2cc>)
 80009ba:	220e      	movs	r2, #14
 80009bc:	601a      	str	r2, [r3, #0]
				setTimer(0, AMBER * 1000);
 80009be:	4b20      	ldr	r3, [pc, #128]	; (8000a40 <fsm_traffic_light+0x2ec>)
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80009c6:	fb02 f303 	mul.w	r3, r2, r3
 80009ca:	4619      	mov	r1, r3
 80009cc:	2000      	movs	r0, #0
 80009ce:	f000 f9a1 	bl	8000d14 <setTimer>
			}

			if (timer_flag[1] == 1){
 80009d2:	4b1a      	ldr	r3, [pc, #104]	; (8000a3c <fsm_traffic_light+0x2e8>)
 80009d4:	685b      	ldr	r3, [r3, #4]
 80009d6:	2b01      	cmp	r3, #1
 80009d8:	d106      	bne.n	80009e8 <fsm_traffic_light+0x294>
				updateLedBufferMode1();
 80009da:	f7ff fd73 	bl	80004c4 <updateLedBufferMode1>
				setTimer(1, 1000);
 80009de:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80009e2:	2001      	movs	r0, #1
 80009e4:	f000 f996 	bl	8000d14 <setTimer>
			}

			if (timer_flag[2] == 1){
 80009e8:	4b14      	ldr	r3, [pc, #80]	; (8000a3c <fsm_traffic_light+0x2e8>)
 80009ea:	689b      	ldr	r3, [r3, #8]
 80009ec:	2b01      	cmp	r3, #1
 80009ee:	d10d      	bne.n	8000a0c <fsm_traffic_light+0x2b8>
				update7SEGLandscape(index_ledlc);
 80009f0:	4b0f      	ldr	r3, [pc, #60]	; (8000a30 <fsm_traffic_light+0x2dc>)
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	4618      	mov	r0, r3
 80009f6:	f7ff fcf1 	bl	80003dc <update7SEGLandscape>
				update7SEGPortrait(index_ledpt);
 80009fa:	4b0e      	ldr	r3, [pc, #56]	; (8000a34 <fsm_traffic_light+0x2e0>)
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	4618      	mov	r0, r3
 8000a00:	f7ff fd24 	bl	800044c <update7SEGPortrait>
				setTimer(2, 250);
 8000a04:	21fa      	movs	r1, #250	; 0xfa
 8000a06:	2002      	movs	r0, #2
 8000a08:	f000 f984 	bl	8000d14 <setTimer>
			}
			// If button 1 is pressed, come to MODE2
			if (isButtonPressed(0) == 1){
 8000a0c:	2000      	movs	r0, #0
 8000a0e:	f7ff fb9d 	bl	800014c <isButtonPressed>
 8000a12:	4603      	mov	r3, r0
 8000a14:	2b01      	cmp	r3, #1
 8000a16:	d15d      	bne.n	8000ad4 <fsm_traffic_light+0x380>
				status = MODE2;
 8000a18:	4b01      	ldr	r3, [pc, #4]	; (8000a20 <fsm_traffic_light+0x2cc>)
 8000a1a:	2202      	movs	r2, #2
 8000a1c:	601a      	str	r2, [r3, #0]
			}
			break;
 8000a1e:	e059      	b.n	8000ad4 <fsm_traffic_light+0x380>
 8000a20:	200000b4 	.word	0x200000b4
 8000a24:	40010800 	.word	0x40010800
 8000a28:	20000058 	.word	0x20000058
 8000a2c:	20000054 	.word	0x20000054
 8000a30:	200000b0 	.word	0x200000b0
 8000a34:	20000040 	.word	0x20000040
 8000a38:	20000064 	.word	0x20000064
 8000a3c:	200000e0 	.word	0x200000e0
 8000a40:	20000060 	.word	0x20000060

		case AMBER_RED:
			//Set up LED
			HAL_GPIO_WritePin(A1_GPIO_Port, A1_Pin, RESET);
 8000a44:	2200      	movs	r2, #0
 8000a46:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a4a:	4825      	ldr	r0, [pc, #148]	; (8000ae0 <fsm_traffic_light+0x38c>)
 8000a4c:	f000 fd57 	bl	80014fe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(G1_GPIO_Port, G1_Pin, SET);
 8000a50:	2201      	movs	r2, #1
 8000a52:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a56:	4822      	ldr	r0, [pc, #136]	; (8000ae0 <fsm_traffic_light+0x38c>)
 8000a58:	f000 fd51 	bl	80014fe <HAL_GPIO_WritePin>

			if (timer_flag[0] == 1){
 8000a5c:	4b21      	ldr	r3, [pc, #132]	; (8000ae4 <fsm_traffic_light+0x390>)
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	2b01      	cmp	r3, #1
 8000a62:	d10c      	bne.n	8000a7e <fsm_traffic_light+0x32a>
				status = RED_GREEN;
 8000a64:	4b20      	ldr	r3, [pc, #128]	; (8000ae8 <fsm_traffic_light+0x394>)
 8000a66:	220b      	movs	r2, #11
 8000a68:	601a      	str	r2, [r3, #0]
				setTimer(0, GREEN * 1000);
 8000a6a:	4b20      	ldr	r3, [pc, #128]	; (8000aec <fsm_traffic_light+0x398>)
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000a72:	fb02 f303 	mul.w	r3, r2, r3
 8000a76:	4619      	mov	r1, r3
 8000a78:	2000      	movs	r0, #0
 8000a7a:	f000 f94b 	bl	8000d14 <setTimer>
			}

			if (timer_flag[1] == 1){
 8000a7e:	4b19      	ldr	r3, [pc, #100]	; (8000ae4 <fsm_traffic_light+0x390>)
 8000a80:	685b      	ldr	r3, [r3, #4]
 8000a82:	2b01      	cmp	r3, #1
 8000a84:	d106      	bne.n	8000a94 <fsm_traffic_light+0x340>
				updateLedBufferMode1();
 8000a86:	f7ff fd1d 	bl	80004c4 <updateLedBufferMode1>
				setTimer(1, 1000);
 8000a8a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000a8e:	2001      	movs	r0, #1
 8000a90:	f000 f940 	bl	8000d14 <setTimer>
			}

			if (timer_flag[2] == 1){
 8000a94:	4b13      	ldr	r3, [pc, #76]	; (8000ae4 <fsm_traffic_light+0x390>)
 8000a96:	689b      	ldr	r3, [r3, #8]
 8000a98:	2b01      	cmp	r3, #1
 8000a9a:	d10d      	bne.n	8000ab8 <fsm_traffic_light+0x364>
				update7SEGLandscape(index_ledlc);
 8000a9c:	4b14      	ldr	r3, [pc, #80]	; (8000af0 <fsm_traffic_light+0x39c>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	f7ff fc9b 	bl	80003dc <update7SEGLandscape>
				update7SEGPortrait(index_ledpt);
 8000aa6:	4b13      	ldr	r3, [pc, #76]	; (8000af4 <fsm_traffic_light+0x3a0>)
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	4618      	mov	r0, r3
 8000aac:	f7ff fcce 	bl	800044c <update7SEGPortrait>
				setTimer(2, 250);
 8000ab0:	21fa      	movs	r1, #250	; 0xfa
 8000ab2:	2002      	movs	r0, #2
 8000ab4:	f000 f92e 	bl	8000d14 <setTimer>
			}
			// If button 1 is pressed, come to MODE2
			if (isButtonPressed(0) == 1){
 8000ab8:	2000      	movs	r0, #0
 8000aba:	f7ff fb47 	bl	800014c <isButtonPressed>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	2b01      	cmp	r3, #1
 8000ac2:	d109      	bne.n	8000ad8 <fsm_traffic_light+0x384>
				status = MODE2;
 8000ac4:	4b08      	ldr	r3, [pc, #32]	; (8000ae8 <fsm_traffic_light+0x394>)
 8000ac6:	2202      	movs	r2, #2
 8000ac8:	601a      	str	r2, [r3, #0]
			}
			break;
 8000aca:	e005      	b.n	8000ad8 <fsm_traffic_light+0x384>
			break;
 8000acc:	bf00      	nop
 8000ace:	e004      	b.n	8000ada <fsm_traffic_light+0x386>
			break;
 8000ad0:	bf00      	nop
 8000ad2:	e002      	b.n	8000ada <fsm_traffic_light+0x386>
			break;
 8000ad4:	bf00      	nop
 8000ad6:	e000      	b.n	8000ada <fsm_traffic_light+0x386>
			break;
 8000ad8:	bf00      	nop
	}
}
 8000ada:	bf00      	nop
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	bf00      	nop
 8000ae0:	40010800 	.word	0x40010800
 8000ae4:	200000e0 	.word	0x200000e0
 8000ae8:	200000b4 	.word	0x200000b4
 8000aec:	20000064 	.word	0x20000064
 8000af0:	200000b0 	.word	0x200000b0
 8000af4:	20000040 	.word	0x20000040

08000af8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000afc:	f000 fa6e 	bl	8000fdc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b00:	f000 f80c 	bl	8000b1c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_TIM2_Init();
 8000b04:	f000 f846 	bl	8000b94 <MX_TIM2_Init>
  MX_GPIO_Init();
 8000b08:	f000 f890 	bl	8000c2c <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000b0c:	4802      	ldr	r0, [pc, #8]	; (8000b18 <main+0x20>)
 8000b0e:	f001 f989 	bl	8001e24 <HAL_TIM_Base_Start_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  fsm_traffic_light();
 8000b12:	f7ff fe1f 	bl	8000754 <fsm_traffic_light>
 8000b16:	e7fc      	b.n	8000b12 <main+0x1a>
 8000b18:	20000108 	.word	0x20000108

08000b1c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b090      	sub	sp, #64	; 0x40
 8000b20:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b22:	f107 0318 	add.w	r3, r7, #24
 8000b26:	2228      	movs	r2, #40	; 0x28
 8000b28:	2100      	movs	r1, #0
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	f001 fd36 	bl	800259c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b30:	1d3b      	adds	r3, r7, #4
 8000b32:	2200      	movs	r2, #0
 8000b34:	601a      	str	r2, [r3, #0]
 8000b36:	605a      	str	r2, [r3, #4]
 8000b38:	609a      	str	r2, [r3, #8]
 8000b3a:	60da      	str	r2, [r3, #12]
 8000b3c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b3e:	2302      	movs	r3, #2
 8000b40:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b42:	2301      	movs	r3, #1
 8000b44:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b46:	2310      	movs	r3, #16
 8000b48:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b4e:	f107 0318 	add.w	r3, r7, #24
 8000b52:	4618      	mov	r0, r3
 8000b54:	f000 fcec 	bl	8001530 <HAL_RCC_OscConfig>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d001      	beq.n	8000b62 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000b5e:	f000 f8d3 	bl	8000d08 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b62:	230f      	movs	r3, #15
 8000b64:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000b66:	2300      	movs	r3, #0
 8000b68:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b72:	2300      	movs	r3, #0
 8000b74:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000b76:	1d3b      	adds	r3, r7, #4
 8000b78:	2100      	movs	r1, #0
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	f000 ff58 	bl	8001a30 <HAL_RCC_ClockConfig>
 8000b80:	4603      	mov	r3, r0
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d001      	beq.n	8000b8a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000b86:	f000 f8bf 	bl	8000d08 <Error_Handler>
  }
}
 8000b8a:	bf00      	nop
 8000b8c:	3740      	adds	r7, #64	; 0x40
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}
	...

08000b94 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b086      	sub	sp, #24
 8000b98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b9a:	f107 0308 	add.w	r3, r7, #8
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	601a      	str	r2, [r3, #0]
 8000ba2:	605a      	str	r2, [r3, #4]
 8000ba4:	609a      	str	r2, [r3, #8]
 8000ba6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ba8:	463b      	mov	r3, r7
 8000baa:	2200      	movs	r2, #0
 8000bac:	601a      	str	r2, [r3, #0]
 8000bae:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000bb0:	4b1d      	ldr	r3, [pc, #116]	; (8000c28 <MX_TIM2_Init+0x94>)
 8000bb2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000bb6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000bb8:	4b1b      	ldr	r3, [pc, #108]	; (8000c28 <MX_TIM2_Init+0x94>)
 8000bba:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000bbe:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bc0:	4b19      	ldr	r3, [pc, #100]	; (8000c28 <MX_TIM2_Init+0x94>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000bc6:	4b18      	ldr	r3, [pc, #96]	; (8000c28 <MX_TIM2_Init+0x94>)
 8000bc8:	2209      	movs	r2, #9
 8000bca:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bcc:	4b16      	ldr	r3, [pc, #88]	; (8000c28 <MX_TIM2_Init+0x94>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bd2:	4b15      	ldr	r3, [pc, #84]	; (8000c28 <MX_TIM2_Init+0x94>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000bd8:	4813      	ldr	r0, [pc, #76]	; (8000c28 <MX_TIM2_Init+0x94>)
 8000bda:	f001 f8d3 	bl	8001d84 <HAL_TIM_Base_Init>
 8000bde:	4603      	mov	r3, r0
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d001      	beq.n	8000be8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000be4:	f000 f890 	bl	8000d08 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000be8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bec:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000bee:	f107 0308 	add.w	r3, r7, #8
 8000bf2:	4619      	mov	r1, r3
 8000bf4:	480c      	ldr	r0, [pc, #48]	; (8000c28 <MX_TIM2_Init+0x94>)
 8000bf6:	f001 fa69 	bl	80020cc <HAL_TIM_ConfigClockSource>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d001      	beq.n	8000c04 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000c00:	f000 f882 	bl	8000d08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c04:	2300      	movs	r3, #0
 8000c06:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000c0c:	463b      	mov	r3, r7
 8000c0e:	4619      	mov	r1, r3
 8000c10:	4805      	ldr	r0, [pc, #20]	; (8000c28 <MX_TIM2_Init+0x94>)
 8000c12:	f001 fc35 	bl	8002480 <HAL_TIMEx_MasterConfigSynchronization>
 8000c16:	4603      	mov	r3, r0
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d001      	beq.n	8000c20 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000c1c:	f000 f874 	bl	8000d08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000c20:	bf00      	nop
 8000c22:	3718      	adds	r7, #24
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd80      	pop	{r7, pc}
 8000c28:	20000108 	.word	0x20000108

08000c2c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b086      	sub	sp, #24
 8000c30:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c32:	f107 0308 	add.w	r3, r7, #8
 8000c36:	2200      	movs	r2, #0
 8000c38:	601a      	str	r2, [r3, #0]
 8000c3a:	605a      	str	r2, [r3, #4]
 8000c3c:	609a      	str	r2, [r3, #8]
 8000c3e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c40:	4b28      	ldr	r3, [pc, #160]	; (8000ce4 <MX_GPIO_Init+0xb8>)
 8000c42:	699b      	ldr	r3, [r3, #24]
 8000c44:	4a27      	ldr	r2, [pc, #156]	; (8000ce4 <MX_GPIO_Init+0xb8>)
 8000c46:	f043 0304 	orr.w	r3, r3, #4
 8000c4a:	6193      	str	r3, [r2, #24]
 8000c4c:	4b25      	ldr	r3, [pc, #148]	; (8000ce4 <MX_GPIO_Init+0xb8>)
 8000c4e:	699b      	ldr	r3, [r3, #24]
 8000c50:	f003 0304 	and.w	r3, r3, #4
 8000c54:	607b      	str	r3, [r7, #4]
 8000c56:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c58:	4b22      	ldr	r3, [pc, #136]	; (8000ce4 <MX_GPIO_Init+0xb8>)
 8000c5a:	699b      	ldr	r3, [r3, #24]
 8000c5c:	4a21      	ldr	r2, [pc, #132]	; (8000ce4 <MX_GPIO_Init+0xb8>)
 8000c5e:	f043 0308 	orr.w	r3, r3, #8
 8000c62:	6193      	str	r3, [r2, #24]
 8000c64:	4b1f      	ldr	r3, [pc, #124]	; (8000ce4 <MX_GPIO_Init+0xb8>)
 8000c66:	699b      	ldr	r3, [r3, #24]
 8000c68:	f003 0308 	and.w	r3, r3, #8
 8000c6c:	603b      	str	r3, [r7, #0]
 8000c6e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, EN0_Pin|EN1_Pin|EN2_Pin|EN3_Pin
 8000c70:	2200      	movs	r2, #0
 8000c72:	f64f 71c0 	movw	r1, #65472	; 0xffc0
 8000c76:	481c      	ldr	r0, [pc, #112]	; (8000ce8 <MX_GPIO_Init+0xbc>)
 8000c78:	f000 fc41 	bl	80014fe <HAL_GPIO_WritePin>
                          |R1_Pin|A1_Pin|G1_Pin|R2_Pin
                          |A2_Pin|G2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SEG0_Pin|SEG1_Pin|SEG2_Pin|D0_Pin
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	f643 71ff 	movw	r1, #16383	; 0x3fff
 8000c82:	481a      	ldr	r0, [pc, #104]	; (8000cec <MX_GPIO_Init+0xc0>)
 8000c84:	f000 fc3b 	bl	80014fe <HAL_GPIO_WritePin>
                          |E0_Pin|F0_Pin|G0_Pin|SEG3_Pin
                          |SEG4_Pin|SEG5_Pin|SEG6_Pin|A0_Pin
                          |B0_Pin|C0_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : BTN1_Pin BTN2_Pin BTN3_Pin */
  GPIO_InitStruct.Pin = BTN1_Pin|BTN2_Pin|BTN3_Pin;
 8000c88:	2338      	movs	r3, #56	; 0x38
 8000c8a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c90:	2300      	movs	r3, #0
 8000c92:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c94:	f107 0308 	add.w	r3, r7, #8
 8000c98:	4619      	mov	r1, r3
 8000c9a:	4813      	ldr	r0, [pc, #76]	; (8000ce8 <MX_GPIO_Init+0xbc>)
 8000c9c:	f000 fa9e 	bl	80011dc <HAL_GPIO_Init>

  /*Configure GPIO pins : EN0_Pin EN1_Pin EN2_Pin EN3_Pin
                           R1_Pin A1_Pin G1_Pin R2_Pin
                           A2_Pin G2_Pin */
  GPIO_InitStruct.Pin = EN0_Pin|EN1_Pin|EN2_Pin|EN3_Pin
 8000ca0:	f64f 73c0 	movw	r3, #65472	; 0xffc0
 8000ca4:	60bb      	str	r3, [r7, #8]
                          |R1_Pin|A1_Pin|G1_Pin|R2_Pin
                          |A2_Pin|G2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ca6:	2301      	movs	r3, #1
 8000ca8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000caa:	2300      	movs	r3, #0
 8000cac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cae:	2302      	movs	r3, #2
 8000cb0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cb2:	f107 0308 	add.w	r3, r7, #8
 8000cb6:	4619      	mov	r1, r3
 8000cb8:	480b      	ldr	r0, [pc, #44]	; (8000ce8 <MX_GPIO_Init+0xbc>)
 8000cba:	f000 fa8f 	bl	80011dc <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG0_Pin SEG1_Pin SEG2_Pin D0_Pin
                           E0_Pin F0_Pin G0_Pin SEG3_Pin
                           SEG4_Pin SEG5_Pin SEG6_Pin A0_Pin
                           B0_Pin C0_Pin */
  GPIO_InitStruct.Pin = SEG0_Pin|SEG1_Pin|SEG2_Pin|D0_Pin
 8000cbe:	f643 73ff 	movw	r3, #16383	; 0x3fff
 8000cc2:	60bb      	str	r3, [r7, #8]
                          |E0_Pin|F0_Pin|G0_Pin|SEG3_Pin
                          |SEG4_Pin|SEG5_Pin|SEG6_Pin|A0_Pin
                          |B0_Pin|C0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cc4:	2301      	movs	r3, #1
 8000cc6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ccc:	2302      	movs	r3, #2
 8000cce:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cd0:	f107 0308 	add.w	r3, r7, #8
 8000cd4:	4619      	mov	r1, r3
 8000cd6:	4805      	ldr	r0, [pc, #20]	; (8000cec <MX_GPIO_Init+0xc0>)
 8000cd8:	f000 fa80 	bl	80011dc <HAL_GPIO_Init>

}
 8000cdc:	bf00      	nop
 8000cde:	3718      	adds	r7, #24
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bd80      	pop	{r7, pc}
 8000ce4:	40021000 	.word	0x40021000
 8000ce8:	40010800 	.word	0x40010800
 8000cec:	40010c00 	.word	0x40010c00

08000cf0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b082      	sub	sp, #8
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
  timerRun();
 8000cf8:	f000 f82c 	bl	8000d54 <timerRun>
  getKeyInput();
 8000cfc:	f7ff fa50 	bl	80001a0 <getKeyInput>
  /* USER CODE END Callback 0 */
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000d00:	bf00      	nop
 8000d02:	3708      	adds	r7, #8
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bd80      	pop	{r7, pc}

08000d08 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d0c:	b672      	cpsid	i
}
 8000d0e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d10:	e7fe      	b.n	8000d10 <Error_Handler+0x8>
	...

08000d14 <setTimer>:
#include "software_timer.h"

int timer_counter[NUM_OF_TIMERS] = {0};
int timer_flag[NUM_OF_TIMERS] = {0};

void setTimer(int index, int duration){
 8000d14:	b480      	push	{r7}
 8000d16:	b083      	sub	sp, #12
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
 8000d1c:	6039      	str	r1, [r7, #0]
	timer_counter[index] = duration / TIME_CYCLE;
 8000d1e:	683b      	ldr	r3, [r7, #0]
 8000d20:	4a09      	ldr	r2, [pc, #36]	; (8000d48 <setTimer+0x34>)
 8000d22:	fb82 1203 	smull	r1, r2, r2, r3
 8000d26:	1092      	asrs	r2, r2, #2
 8000d28:	17db      	asrs	r3, r3, #31
 8000d2a:	1ad2      	subs	r2, r2, r3
 8000d2c:	4907      	ldr	r1, [pc, #28]	; (8000d4c <setTimer+0x38>)
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	timer_flag[index] = 0;
 8000d34:	4a06      	ldr	r2, [pc, #24]	; (8000d50 <setTimer+0x3c>)
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	2100      	movs	r1, #0
 8000d3a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8000d3e:	bf00      	nop
 8000d40:	370c      	adds	r7, #12
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bc80      	pop	{r7}
 8000d46:	4770      	bx	lr
 8000d48:	66666667 	.word	0x66666667
 8000d4c:	200000b8 	.word	0x200000b8
 8000d50:	200000e0 	.word	0x200000e0

08000d54 <timerRun>:
void clearTimer(int index){
	timer_counter[index] = 0;
	timer_flag[index] = 0;
}

void timerRun(){
 8000d54:	b480      	push	{r7}
 8000d56:	b083      	sub	sp, #12
 8000d58:	af00      	add	r7, sp, #0
	for (int i = 0; i < NUM_OF_TIMERS; i++){
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	607b      	str	r3, [r7, #4]
 8000d5e:	e01c      	b.n	8000d9a <timerRun+0x46>
		if (timer_counter[i] > 0){
 8000d60:	4a12      	ldr	r2, [pc, #72]	; (8000dac <timerRun+0x58>)
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	dd13      	ble.n	8000d94 <timerRun+0x40>
			timer_counter[i]--;
 8000d6c:	4a0f      	ldr	r2, [pc, #60]	; (8000dac <timerRun+0x58>)
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d74:	1e5a      	subs	r2, r3, #1
 8000d76:	490d      	ldr	r1, [pc, #52]	; (8000dac <timerRun+0x58>)
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if (timer_counter[i] <= 0){
 8000d7e:	4a0b      	ldr	r2, [pc, #44]	; (8000dac <timerRun+0x58>)
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	dc04      	bgt.n	8000d94 <timerRun+0x40>
				timer_flag[i] = 1;
 8000d8a:	4a09      	ldr	r2, [pc, #36]	; (8000db0 <timerRun+0x5c>)
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	2101      	movs	r1, #1
 8000d90:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < NUM_OF_TIMERS; i++){
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	3301      	adds	r3, #1
 8000d98:	607b      	str	r3, [r7, #4]
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	2b09      	cmp	r3, #9
 8000d9e:	dddf      	ble.n	8000d60 <timerRun+0xc>
			}
		}
	}
}
 8000da0:	bf00      	nop
 8000da2:	bf00      	nop
 8000da4:	370c      	adds	r7, #12
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bc80      	pop	{r7}
 8000daa:	4770      	bx	lr
 8000dac:	200000b8 	.word	0x200000b8
 8000db0:	200000e0 	.word	0x200000e0

08000db4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000db4:	b480      	push	{r7}
 8000db6:	b085      	sub	sp, #20
 8000db8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000dba:	4b15      	ldr	r3, [pc, #84]	; (8000e10 <HAL_MspInit+0x5c>)
 8000dbc:	699b      	ldr	r3, [r3, #24]
 8000dbe:	4a14      	ldr	r2, [pc, #80]	; (8000e10 <HAL_MspInit+0x5c>)
 8000dc0:	f043 0301 	orr.w	r3, r3, #1
 8000dc4:	6193      	str	r3, [r2, #24]
 8000dc6:	4b12      	ldr	r3, [pc, #72]	; (8000e10 <HAL_MspInit+0x5c>)
 8000dc8:	699b      	ldr	r3, [r3, #24]
 8000dca:	f003 0301 	and.w	r3, r3, #1
 8000dce:	60bb      	str	r3, [r7, #8]
 8000dd0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dd2:	4b0f      	ldr	r3, [pc, #60]	; (8000e10 <HAL_MspInit+0x5c>)
 8000dd4:	69db      	ldr	r3, [r3, #28]
 8000dd6:	4a0e      	ldr	r2, [pc, #56]	; (8000e10 <HAL_MspInit+0x5c>)
 8000dd8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ddc:	61d3      	str	r3, [r2, #28]
 8000dde:	4b0c      	ldr	r3, [pc, #48]	; (8000e10 <HAL_MspInit+0x5c>)
 8000de0:	69db      	ldr	r3, [r3, #28]
 8000de2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000de6:	607b      	str	r3, [r7, #4]
 8000de8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000dea:	4b0a      	ldr	r3, [pc, #40]	; (8000e14 <HAL_MspInit+0x60>)
 8000dec:	685b      	ldr	r3, [r3, #4]
 8000dee:	60fb      	str	r3, [r7, #12]
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000df6:	60fb      	str	r3, [r7, #12]
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000dfe:	60fb      	str	r3, [r7, #12]
 8000e00:	4a04      	ldr	r2, [pc, #16]	; (8000e14 <HAL_MspInit+0x60>)
 8000e02:	68fb      	ldr	r3, [r7, #12]
 8000e04:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e06:	bf00      	nop
 8000e08:	3714      	adds	r7, #20
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bc80      	pop	{r7}
 8000e0e:	4770      	bx	lr
 8000e10:	40021000 	.word	0x40021000
 8000e14:	40010000 	.word	0x40010000

08000e18 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b084      	sub	sp, #16
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000e28:	d113      	bne.n	8000e52 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000e2a:	4b0c      	ldr	r3, [pc, #48]	; (8000e5c <HAL_TIM_Base_MspInit+0x44>)
 8000e2c:	69db      	ldr	r3, [r3, #28]
 8000e2e:	4a0b      	ldr	r2, [pc, #44]	; (8000e5c <HAL_TIM_Base_MspInit+0x44>)
 8000e30:	f043 0301 	orr.w	r3, r3, #1
 8000e34:	61d3      	str	r3, [r2, #28]
 8000e36:	4b09      	ldr	r3, [pc, #36]	; (8000e5c <HAL_TIM_Base_MspInit+0x44>)
 8000e38:	69db      	ldr	r3, [r3, #28]
 8000e3a:	f003 0301 	and.w	r3, r3, #1
 8000e3e:	60fb      	str	r3, [r7, #12]
 8000e40:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000e42:	2200      	movs	r2, #0
 8000e44:	2100      	movs	r1, #0
 8000e46:	201c      	movs	r0, #28
 8000e48:	f000 f99d 	bl	8001186 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000e4c:	201c      	movs	r0, #28
 8000e4e:	f000 f9b6 	bl	80011be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000e52:	bf00      	nop
 8000e54:	3710      	adds	r7, #16
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	bf00      	nop
 8000e5c:	40021000 	.word	0x40021000

08000e60 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b08c      	sub	sp, #48	; 0x30
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0);
 8000e70:	2200      	movs	r2, #0
 8000e72:	6879      	ldr	r1, [r7, #4]
 8000e74:	2019      	movs	r0, #25
 8000e76:	f000 f986 	bl	8001186 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000e7a:	2019      	movs	r0, #25
 8000e7c:	f000 f99f 	bl	80011be <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000e80:	4b1e      	ldr	r3, [pc, #120]	; (8000efc <HAL_InitTick+0x9c>)
 8000e82:	699b      	ldr	r3, [r3, #24]
 8000e84:	4a1d      	ldr	r2, [pc, #116]	; (8000efc <HAL_InitTick+0x9c>)
 8000e86:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000e8a:	6193      	str	r3, [r2, #24]
 8000e8c:	4b1b      	ldr	r3, [pc, #108]	; (8000efc <HAL_InitTick+0x9c>)
 8000e8e:	699b      	ldr	r3, [r3, #24]
 8000e90:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000e94:	60fb      	str	r3, [r7, #12]
 8000e96:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000e98:	f107 0210 	add.w	r2, r7, #16
 8000e9c:	f107 0314 	add.w	r3, r7, #20
 8000ea0:	4611      	mov	r1, r2
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	f000 ff20 	bl	8001ce8 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000ea8:	f000 ff0a 	bl	8001cc0 <HAL_RCC_GetPCLK2Freq>
 8000eac:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000eae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000eb0:	4a13      	ldr	r2, [pc, #76]	; (8000f00 <HAL_InitTick+0xa0>)
 8000eb2:	fba2 2303 	umull	r2, r3, r2, r3
 8000eb6:	0c9b      	lsrs	r3, r3, #18
 8000eb8:	3b01      	subs	r3, #1
 8000eba:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000ebc:	4b11      	ldr	r3, [pc, #68]	; (8000f04 <HAL_InitTick+0xa4>)
 8000ebe:	4a12      	ldr	r2, [pc, #72]	; (8000f08 <HAL_InitTick+0xa8>)
 8000ec0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000ec2:	4b10      	ldr	r3, [pc, #64]	; (8000f04 <HAL_InitTick+0xa4>)
 8000ec4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000ec8:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000eca:	4a0e      	ldr	r2, [pc, #56]	; (8000f04 <HAL_InitTick+0xa4>)
 8000ecc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ece:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000ed0:	4b0c      	ldr	r3, [pc, #48]	; (8000f04 <HAL_InitTick+0xa4>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ed6:	4b0b      	ldr	r3, [pc, #44]	; (8000f04 <HAL_InitTick+0xa4>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000edc:	4809      	ldr	r0, [pc, #36]	; (8000f04 <HAL_InitTick+0xa4>)
 8000ede:	f000 ff51 	bl	8001d84 <HAL_TIM_Base_Init>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d104      	bne.n	8000ef2 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000ee8:	4806      	ldr	r0, [pc, #24]	; (8000f04 <HAL_InitTick+0xa4>)
 8000eea:	f000 ff9b 	bl	8001e24 <HAL_TIM_Base_Start_IT>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	e000      	b.n	8000ef4 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8000ef2:	2301      	movs	r3, #1
}
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	3730      	adds	r7, #48	; 0x30
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bd80      	pop	{r7, pc}
 8000efc:	40021000 	.word	0x40021000
 8000f00:	431bde83 	.word	0x431bde83
 8000f04:	20000150 	.word	0x20000150
 8000f08:	40012c00 	.word	0x40012c00

08000f0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f10:	e7fe      	b.n	8000f10 <NMI_Handler+0x4>

08000f12 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f12:	b480      	push	{r7}
 8000f14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f16:	e7fe      	b.n	8000f16 <HardFault_Handler+0x4>

08000f18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f1c:	e7fe      	b.n	8000f1c <MemManage_Handler+0x4>

08000f1e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f1e:	b480      	push	{r7}
 8000f20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f22:	e7fe      	b.n	8000f22 <BusFault_Handler+0x4>

08000f24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f24:	b480      	push	{r7}
 8000f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f28:	e7fe      	b.n	8000f28 <UsageFault_Handler+0x4>

08000f2a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f2a:	b480      	push	{r7}
 8000f2c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f2e:	bf00      	nop
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bc80      	pop	{r7}
 8000f34:	4770      	bx	lr

08000f36 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f36:	b480      	push	{r7}
 8000f38:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f3a:	bf00      	nop
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bc80      	pop	{r7}
 8000f40:	4770      	bx	lr

08000f42 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f42:	b480      	push	{r7}
 8000f44:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f46:	bf00      	nop
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bc80      	pop	{r7}
 8000f4c:	4770      	bx	lr

08000f4e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f4e:	b480      	push	{r7}
 8000f50:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f52:	bf00      	nop
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bc80      	pop	{r7}
 8000f58:	4770      	bx	lr
	...

08000f5c <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000f60:	4802      	ldr	r0, [pc, #8]	; (8000f6c <TIM1_UP_IRQHandler+0x10>)
 8000f62:	f000 ffab 	bl	8001ebc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8000f66:	bf00      	nop
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	20000150 	.word	0x20000150

08000f70 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000f74:	4802      	ldr	r0, [pc, #8]	; (8000f80 <TIM2_IRQHandler+0x10>)
 8000f76:	f000 ffa1 	bl	8001ebc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000f7a:	bf00      	nop
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	20000108 	.word	0x20000108

08000f84 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000f84:	b480      	push	{r7}
 8000f86:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f88:	bf00      	nop
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bc80      	pop	{r7}
 8000f8e:	4770      	bx	lr

08000f90 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000f90:	f7ff fff8 	bl	8000f84 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f94:	480b      	ldr	r0, [pc, #44]	; (8000fc4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000f96:	490c      	ldr	r1, [pc, #48]	; (8000fc8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000f98:	4a0c      	ldr	r2, [pc, #48]	; (8000fcc <LoopFillZerobss+0x16>)
  movs r3, #0
 8000f9a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f9c:	e002      	b.n	8000fa4 <LoopCopyDataInit>

08000f9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fa0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fa2:	3304      	adds	r3, #4

08000fa4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fa4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fa6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fa8:	d3f9      	bcc.n	8000f9e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000faa:	4a09      	ldr	r2, [pc, #36]	; (8000fd0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000fac:	4c09      	ldr	r4, [pc, #36]	; (8000fd4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000fae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fb0:	e001      	b.n	8000fb6 <LoopFillZerobss>

08000fb2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fb2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fb4:	3204      	adds	r2, #4

08000fb6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fb6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fb8:	d3fb      	bcc.n	8000fb2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000fba:	f001 facb 	bl	8002554 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000fbe:	f7ff fd9b 	bl	8000af8 <main>
  bx lr
 8000fc2:	4770      	bx	lr
  ldr r0, =_sdata
 8000fc4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fc8:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000fcc:	080025f8 	.word	0x080025f8
  ldr r2, =_sbss
 8000fd0:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000fd4:	2000019c 	.word	0x2000019c

08000fd8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000fd8:	e7fe      	b.n	8000fd8 <ADC1_2_IRQHandler>
	...

08000fdc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fe0:	4b08      	ldr	r3, [pc, #32]	; (8001004 <HAL_Init+0x28>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	4a07      	ldr	r2, [pc, #28]	; (8001004 <HAL_Init+0x28>)
 8000fe6:	f043 0310 	orr.w	r3, r3, #16
 8000fea:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fec:	2003      	movs	r0, #3
 8000fee:	f000 f8bf 	bl	8001170 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ff2:	200f      	movs	r0, #15
 8000ff4:	f7ff ff34 	bl	8000e60 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ff8:	f7ff fedc 	bl	8000db4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ffc:	2300      	movs	r3, #0
}
 8000ffe:	4618      	mov	r0, r3
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	40022000 	.word	0x40022000

08001008 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001008:	b480      	push	{r7}
 800100a:	af00      	add	r7, sp, #0
  return uwTick;
 800100c:	4b02      	ldr	r3, [pc, #8]	; (8001018 <HAL_GetTick+0x10>)
 800100e:	681b      	ldr	r3, [r3, #0]
}
 8001010:	4618      	mov	r0, r3
 8001012:	46bd      	mov	sp, r7
 8001014:	bc80      	pop	{r7}
 8001016:	4770      	bx	lr
 8001018:	20000198 	.word	0x20000198

0800101c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800101c:	b480      	push	{r7}
 800101e:	b085      	sub	sp, #20
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	f003 0307 	and.w	r3, r3, #7
 800102a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800102c:	4b0c      	ldr	r3, [pc, #48]	; (8001060 <__NVIC_SetPriorityGrouping+0x44>)
 800102e:	68db      	ldr	r3, [r3, #12]
 8001030:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001032:	68ba      	ldr	r2, [r7, #8]
 8001034:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001038:	4013      	ands	r3, r2
 800103a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001040:	68bb      	ldr	r3, [r7, #8]
 8001042:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001044:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001048:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800104c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800104e:	4a04      	ldr	r2, [pc, #16]	; (8001060 <__NVIC_SetPriorityGrouping+0x44>)
 8001050:	68bb      	ldr	r3, [r7, #8]
 8001052:	60d3      	str	r3, [r2, #12]
}
 8001054:	bf00      	nop
 8001056:	3714      	adds	r7, #20
 8001058:	46bd      	mov	sp, r7
 800105a:	bc80      	pop	{r7}
 800105c:	4770      	bx	lr
 800105e:	bf00      	nop
 8001060:	e000ed00 	.word	0xe000ed00

08001064 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001064:	b480      	push	{r7}
 8001066:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001068:	4b04      	ldr	r3, [pc, #16]	; (800107c <__NVIC_GetPriorityGrouping+0x18>)
 800106a:	68db      	ldr	r3, [r3, #12]
 800106c:	0a1b      	lsrs	r3, r3, #8
 800106e:	f003 0307 	and.w	r3, r3, #7
}
 8001072:	4618      	mov	r0, r3
 8001074:	46bd      	mov	sp, r7
 8001076:	bc80      	pop	{r7}
 8001078:	4770      	bx	lr
 800107a:	bf00      	nop
 800107c:	e000ed00 	.word	0xe000ed00

08001080 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001080:	b480      	push	{r7}
 8001082:	b083      	sub	sp, #12
 8001084:	af00      	add	r7, sp, #0
 8001086:	4603      	mov	r3, r0
 8001088:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800108a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800108e:	2b00      	cmp	r3, #0
 8001090:	db0b      	blt.n	80010aa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001092:	79fb      	ldrb	r3, [r7, #7]
 8001094:	f003 021f 	and.w	r2, r3, #31
 8001098:	4906      	ldr	r1, [pc, #24]	; (80010b4 <__NVIC_EnableIRQ+0x34>)
 800109a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800109e:	095b      	lsrs	r3, r3, #5
 80010a0:	2001      	movs	r0, #1
 80010a2:	fa00 f202 	lsl.w	r2, r0, r2
 80010a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80010aa:	bf00      	nop
 80010ac:	370c      	adds	r7, #12
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bc80      	pop	{r7}
 80010b2:	4770      	bx	lr
 80010b4:	e000e100 	.word	0xe000e100

080010b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010b8:	b480      	push	{r7}
 80010ba:	b083      	sub	sp, #12
 80010bc:	af00      	add	r7, sp, #0
 80010be:	4603      	mov	r3, r0
 80010c0:	6039      	str	r1, [r7, #0]
 80010c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	db0a      	blt.n	80010e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	b2da      	uxtb	r2, r3
 80010d0:	490c      	ldr	r1, [pc, #48]	; (8001104 <__NVIC_SetPriority+0x4c>)
 80010d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010d6:	0112      	lsls	r2, r2, #4
 80010d8:	b2d2      	uxtb	r2, r2
 80010da:	440b      	add	r3, r1
 80010dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010e0:	e00a      	b.n	80010f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	b2da      	uxtb	r2, r3
 80010e6:	4908      	ldr	r1, [pc, #32]	; (8001108 <__NVIC_SetPriority+0x50>)
 80010e8:	79fb      	ldrb	r3, [r7, #7]
 80010ea:	f003 030f 	and.w	r3, r3, #15
 80010ee:	3b04      	subs	r3, #4
 80010f0:	0112      	lsls	r2, r2, #4
 80010f2:	b2d2      	uxtb	r2, r2
 80010f4:	440b      	add	r3, r1
 80010f6:	761a      	strb	r2, [r3, #24]
}
 80010f8:	bf00      	nop
 80010fa:	370c      	adds	r7, #12
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bc80      	pop	{r7}
 8001100:	4770      	bx	lr
 8001102:	bf00      	nop
 8001104:	e000e100 	.word	0xe000e100
 8001108:	e000ed00 	.word	0xe000ed00

0800110c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800110c:	b480      	push	{r7}
 800110e:	b089      	sub	sp, #36	; 0x24
 8001110:	af00      	add	r7, sp, #0
 8001112:	60f8      	str	r0, [r7, #12]
 8001114:	60b9      	str	r1, [r7, #8]
 8001116:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	f003 0307 	and.w	r3, r3, #7
 800111e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001120:	69fb      	ldr	r3, [r7, #28]
 8001122:	f1c3 0307 	rsb	r3, r3, #7
 8001126:	2b04      	cmp	r3, #4
 8001128:	bf28      	it	cs
 800112a:	2304      	movcs	r3, #4
 800112c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800112e:	69fb      	ldr	r3, [r7, #28]
 8001130:	3304      	adds	r3, #4
 8001132:	2b06      	cmp	r3, #6
 8001134:	d902      	bls.n	800113c <NVIC_EncodePriority+0x30>
 8001136:	69fb      	ldr	r3, [r7, #28]
 8001138:	3b03      	subs	r3, #3
 800113a:	e000      	b.n	800113e <NVIC_EncodePriority+0x32>
 800113c:	2300      	movs	r3, #0
 800113e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001140:	f04f 32ff 	mov.w	r2, #4294967295
 8001144:	69bb      	ldr	r3, [r7, #24]
 8001146:	fa02 f303 	lsl.w	r3, r2, r3
 800114a:	43da      	mvns	r2, r3
 800114c:	68bb      	ldr	r3, [r7, #8]
 800114e:	401a      	ands	r2, r3
 8001150:	697b      	ldr	r3, [r7, #20]
 8001152:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001154:	f04f 31ff 	mov.w	r1, #4294967295
 8001158:	697b      	ldr	r3, [r7, #20]
 800115a:	fa01 f303 	lsl.w	r3, r1, r3
 800115e:	43d9      	mvns	r1, r3
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001164:	4313      	orrs	r3, r2
         );
}
 8001166:	4618      	mov	r0, r3
 8001168:	3724      	adds	r7, #36	; 0x24
 800116a:	46bd      	mov	sp, r7
 800116c:	bc80      	pop	{r7}
 800116e:	4770      	bx	lr

08001170 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b082      	sub	sp, #8
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001178:	6878      	ldr	r0, [r7, #4]
 800117a:	f7ff ff4f 	bl	800101c <__NVIC_SetPriorityGrouping>
}
 800117e:	bf00      	nop
 8001180:	3708      	adds	r7, #8
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}

08001186 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001186:	b580      	push	{r7, lr}
 8001188:	b086      	sub	sp, #24
 800118a:	af00      	add	r7, sp, #0
 800118c:	4603      	mov	r3, r0
 800118e:	60b9      	str	r1, [r7, #8]
 8001190:	607a      	str	r2, [r7, #4]
 8001192:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001194:	2300      	movs	r3, #0
 8001196:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001198:	f7ff ff64 	bl	8001064 <__NVIC_GetPriorityGrouping>
 800119c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800119e:	687a      	ldr	r2, [r7, #4]
 80011a0:	68b9      	ldr	r1, [r7, #8]
 80011a2:	6978      	ldr	r0, [r7, #20]
 80011a4:	f7ff ffb2 	bl	800110c <NVIC_EncodePriority>
 80011a8:	4602      	mov	r2, r0
 80011aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011ae:	4611      	mov	r1, r2
 80011b0:	4618      	mov	r0, r3
 80011b2:	f7ff ff81 	bl	80010b8 <__NVIC_SetPriority>
}
 80011b6:	bf00      	nop
 80011b8:	3718      	adds	r7, #24
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}

080011be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011be:	b580      	push	{r7, lr}
 80011c0:	b082      	sub	sp, #8
 80011c2:	af00      	add	r7, sp, #0
 80011c4:	4603      	mov	r3, r0
 80011c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011cc:	4618      	mov	r0, r3
 80011ce:	f7ff ff57 	bl	8001080 <__NVIC_EnableIRQ>
}
 80011d2:	bf00      	nop
 80011d4:	3708      	adds	r7, #8
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}
	...

080011dc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011dc:	b480      	push	{r7}
 80011de:	b08b      	sub	sp, #44	; 0x2c
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
 80011e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80011e6:	2300      	movs	r3, #0
 80011e8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80011ea:	2300      	movs	r3, #0
 80011ec:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011ee:	e148      	b.n	8001482 <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80011f0:	2201      	movs	r2, #1
 80011f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011f4:	fa02 f303 	lsl.w	r3, r2, r3
 80011f8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	69fa      	ldr	r2, [r7, #28]
 8001200:	4013      	ands	r3, r2
 8001202:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001204:	69ba      	ldr	r2, [r7, #24]
 8001206:	69fb      	ldr	r3, [r7, #28]
 8001208:	429a      	cmp	r2, r3
 800120a:	f040 8137 	bne.w	800147c <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	685b      	ldr	r3, [r3, #4]
 8001212:	4aa3      	ldr	r2, [pc, #652]	; (80014a0 <HAL_GPIO_Init+0x2c4>)
 8001214:	4293      	cmp	r3, r2
 8001216:	d05e      	beq.n	80012d6 <HAL_GPIO_Init+0xfa>
 8001218:	4aa1      	ldr	r2, [pc, #644]	; (80014a0 <HAL_GPIO_Init+0x2c4>)
 800121a:	4293      	cmp	r3, r2
 800121c:	d875      	bhi.n	800130a <HAL_GPIO_Init+0x12e>
 800121e:	4aa1      	ldr	r2, [pc, #644]	; (80014a4 <HAL_GPIO_Init+0x2c8>)
 8001220:	4293      	cmp	r3, r2
 8001222:	d058      	beq.n	80012d6 <HAL_GPIO_Init+0xfa>
 8001224:	4a9f      	ldr	r2, [pc, #636]	; (80014a4 <HAL_GPIO_Init+0x2c8>)
 8001226:	4293      	cmp	r3, r2
 8001228:	d86f      	bhi.n	800130a <HAL_GPIO_Init+0x12e>
 800122a:	4a9f      	ldr	r2, [pc, #636]	; (80014a8 <HAL_GPIO_Init+0x2cc>)
 800122c:	4293      	cmp	r3, r2
 800122e:	d052      	beq.n	80012d6 <HAL_GPIO_Init+0xfa>
 8001230:	4a9d      	ldr	r2, [pc, #628]	; (80014a8 <HAL_GPIO_Init+0x2cc>)
 8001232:	4293      	cmp	r3, r2
 8001234:	d869      	bhi.n	800130a <HAL_GPIO_Init+0x12e>
 8001236:	4a9d      	ldr	r2, [pc, #628]	; (80014ac <HAL_GPIO_Init+0x2d0>)
 8001238:	4293      	cmp	r3, r2
 800123a:	d04c      	beq.n	80012d6 <HAL_GPIO_Init+0xfa>
 800123c:	4a9b      	ldr	r2, [pc, #620]	; (80014ac <HAL_GPIO_Init+0x2d0>)
 800123e:	4293      	cmp	r3, r2
 8001240:	d863      	bhi.n	800130a <HAL_GPIO_Init+0x12e>
 8001242:	4a9b      	ldr	r2, [pc, #620]	; (80014b0 <HAL_GPIO_Init+0x2d4>)
 8001244:	4293      	cmp	r3, r2
 8001246:	d046      	beq.n	80012d6 <HAL_GPIO_Init+0xfa>
 8001248:	4a99      	ldr	r2, [pc, #612]	; (80014b0 <HAL_GPIO_Init+0x2d4>)
 800124a:	4293      	cmp	r3, r2
 800124c:	d85d      	bhi.n	800130a <HAL_GPIO_Init+0x12e>
 800124e:	2b12      	cmp	r3, #18
 8001250:	d82a      	bhi.n	80012a8 <HAL_GPIO_Init+0xcc>
 8001252:	2b12      	cmp	r3, #18
 8001254:	d859      	bhi.n	800130a <HAL_GPIO_Init+0x12e>
 8001256:	a201      	add	r2, pc, #4	; (adr r2, 800125c <HAL_GPIO_Init+0x80>)
 8001258:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800125c:	080012d7 	.word	0x080012d7
 8001260:	080012b1 	.word	0x080012b1
 8001264:	080012c3 	.word	0x080012c3
 8001268:	08001305 	.word	0x08001305
 800126c:	0800130b 	.word	0x0800130b
 8001270:	0800130b 	.word	0x0800130b
 8001274:	0800130b 	.word	0x0800130b
 8001278:	0800130b 	.word	0x0800130b
 800127c:	0800130b 	.word	0x0800130b
 8001280:	0800130b 	.word	0x0800130b
 8001284:	0800130b 	.word	0x0800130b
 8001288:	0800130b 	.word	0x0800130b
 800128c:	0800130b 	.word	0x0800130b
 8001290:	0800130b 	.word	0x0800130b
 8001294:	0800130b 	.word	0x0800130b
 8001298:	0800130b 	.word	0x0800130b
 800129c:	0800130b 	.word	0x0800130b
 80012a0:	080012b9 	.word	0x080012b9
 80012a4:	080012cd 	.word	0x080012cd
 80012a8:	4a82      	ldr	r2, [pc, #520]	; (80014b4 <HAL_GPIO_Init+0x2d8>)
 80012aa:	4293      	cmp	r3, r2
 80012ac:	d013      	beq.n	80012d6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80012ae:	e02c      	b.n	800130a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	68db      	ldr	r3, [r3, #12]
 80012b4:	623b      	str	r3, [r7, #32]
          break;
 80012b6:	e029      	b.n	800130c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	68db      	ldr	r3, [r3, #12]
 80012bc:	3304      	adds	r3, #4
 80012be:	623b      	str	r3, [r7, #32]
          break;
 80012c0:	e024      	b.n	800130c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80012c2:	683b      	ldr	r3, [r7, #0]
 80012c4:	68db      	ldr	r3, [r3, #12]
 80012c6:	3308      	adds	r3, #8
 80012c8:	623b      	str	r3, [r7, #32]
          break;
 80012ca:	e01f      	b.n	800130c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	68db      	ldr	r3, [r3, #12]
 80012d0:	330c      	adds	r3, #12
 80012d2:	623b      	str	r3, [r7, #32]
          break;
 80012d4:	e01a      	b.n	800130c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	689b      	ldr	r3, [r3, #8]
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d102      	bne.n	80012e4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80012de:	2304      	movs	r3, #4
 80012e0:	623b      	str	r3, [r7, #32]
          break;
 80012e2:	e013      	b.n	800130c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	689b      	ldr	r3, [r3, #8]
 80012e8:	2b01      	cmp	r3, #1
 80012ea:	d105      	bne.n	80012f8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80012ec:	2308      	movs	r3, #8
 80012ee:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	69fa      	ldr	r2, [r7, #28]
 80012f4:	611a      	str	r2, [r3, #16]
          break;
 80012f6:	e009      	b.n	800130c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80012f8:	2308      	movs	r3, #8
 80012fa:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	69fa      	ldr	r2, [r7, #28]
 8001300:	615a      	str	r2, [r3, #20]
          break;
 8001302:	e003      	b.n	800130c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001304:	2300      	movs	r3, #0
 8001306:	623b      	str	r3, [r7, #32]
          break;
 8001308:	e000      	b.n	800130c <HAL_GPIO_Init+0x130>
          break;
 800130a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800130c:	69bb      	ldr	r3, [r7, #24]
 800130e:	2bff      	cmp	r3, #255	; 0xff
 8001310:	d801      	bhi.n	8001316 <HAL_GPIO_Init+0x13a>
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	e001      	b.n	800131a <HAL_GPIO_Init+0x13e>
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	3304      	adds	r3, #4
 800131a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800131c:	69bb      	ldr	r3, [r7, #24]
 800131e:	2bff      	cmp	r3, #255	; 0xff
 8001320:	d802      	bhi.n	8001328 <HAL_GPIO_Init+0x14c>
 8001322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001324:	009b      	lsls	r3, r3, #2
 8001326:	e002      	b.n	800132e <HAL_GPIO_Init+0x152>
 8001328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800132a:	3b08      	subs	r3, #8
 800132c:	009b      	lsls	r3, r3, #2
 800132e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001330:	697b      	ldr	r3, [r7, #20]
 8001332:	681a      	ldr	r2, [r3, #0]
 8001334:	210f      	movs	r1, #15
 8001336:	693b      	ldr	r3, [r7, #16]
 8001338:	fa01 f303 	lsl.w	r3, r1, r3
 800133c:	43db      	mvns	r3, r3
 800133e:	401a      	ands	r2, r3
 8001340:	6a39      	ldr	r1, [r7, #32]
 8001342:	693b      	ldr	r3, [r7, #16]
 8001344:	fa01 f303 	lsl.w	r3, r1, r3
 8001348:	431a      	orrs	r2, r3
 800134a:	697b      	ldr	r3, [r7, #20]
 800134c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	685b      	ldr	r3, [r3, #4]
 8001352:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001356:	2b00      	cmp	r3, #0
 8001358:	f000 8090 	beq.w	800147c <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800135c:	4b56      	ldr	r3, [pc, #344]	; (80014b8 <HAL_GPIO_Init+0x2dc>)
 800135e:	699b      	ldr	r3, [r3, #24]
 8001360:	4a55      	ldr	r2, [pc, #340]	; (80014b8 <HAL_GPIO_Init+0x2dc>)
 8001362:	f043 0301 	orr.w	r3, r3, #1
 8001366:	6193      	str	r3, [r2, #24]
 8001368:	4b53      	ldr	r3, [pc, #332]	; (80014b8 <HAL_GPIO_Init+0x2dc>)
 800136a:	699b      	ldr	r3, [r3, #24]
 800136c:	f003 0301 	and.w	r3, r3, #1
 8001370:	60bb      	str	r3, [r7, #8]
 8001372:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001374:	4a51      	ldr	r2, [pc, #324]	; (80014bc <HAL_GPIO_Init+0x2e0>)
 8001376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001378:	089b      	lsrs	r3, r3, #2
 800137a:	3302      	adds	r3, #2
 800137c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001380:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001384:	f003 0303 	and.w	r3, r3, #3
 8001388:	009b      	lsls	r3, r3, #2
 800138a:	220f      	movs	r2, #15
 800138c:	fa02 f303 	lsl.w	r3, r2, r3
 8001390:	43db      	mvns	r3, r3
 8001392:	68fa      	ldr	r2, [r7, #12]
 8001394:	4013      	ands	r3, r2
 8001396:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	4a49      	ldr	r2, [pc, #292]	; (80014c0 <HAL_GPIO_Init+0x2e4>)
 800139c:	4293      	cmp	r3, r2
 800139e:	d00d      	beq.n	80013bc <HAL_GPIO_Init+0x1e0>
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	4a48      	ldr	r2, [pc, #288]	; (80014c4 <HAL_GPIO_Init+0x2e8>)
 80013a4:	4293      	cmp	r3, r2
 80013a6:	d007      	beq.n	80013b8 <HAL_GPIO_Init+0x1dc>
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	4a47      	ldr	r2, [pc, #284]	; (80014c8 <HAL_GPIO_Init+0x2ec>)
 80013ac:	4293      	cmp	r3, r2
 80013ae:	d101      	bne.n	80013b4 <HAL_GPIO_Init+0x1d8>
 80013b0:	2302      	movs	r3, #2
 80013b2:	e004      	b.n	80013be <HAL_GPIO_Init+0x1e2>
 80013b4:	2303      	movs	r3, #3
 80013b6:	e002      	b.n	80013be <HAL_GPIO_Init+0x1e2>
 80013b8:	2301      	movs	r3, #1
 80013ba:	e000      	b.n	80013be <HAL_GPIO_Init+0x1e2>
 80013bc:	2300      	movs	r3, #0
 80013be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013c0:	f002 0203 	and.w	r2, r2, #3
 80013c4:	0092      	lsls	r2, r2, #2
 80013c6:	4093      	lsls	r3, r2
 80013c8:	68fa      	ldr	r2, [r7, #12]
 80013ca:	4313      	orrs	r3, r2
 80013cc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80013ce:	493b      	ldr	r1, [pc, #236]	; (80014bc <HAL_GPIO_Init+0x2e0>)
 80013d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013d2:	089b      	lsrs	r3, r3, #2
 80013d4:	3302      	adds	r3, #2
 80013d6:	68fa      	ldr	r2, [r7, #12]
 80013d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	685b      	ldr	r3, [r3, #4]
 80013e0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d006      	beq.n	80013f6 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80013e8:	4b38      	ldr	r3, [pc, #224]	; (80014cc <HAL_GPIO_Init+0x2f0>)
 80013ea:	689a      	ldr	r2, [r3, #8]
 80013ec:	4937      	ldr	r1, [pc, #220]	; (80014cc <HAL_GPIO_Init+0x2f0>)
 80013ee:	69bb      	ldr	r3, [r7, #24]
 80013f0:	4313      	orrs	r3, r2
 80013f2:	608b      	str	r3, [r1, #8]
 80013f4:	e006      	b.n	8001404 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80013f6:	4b35      	ldr	r3, [pc, #212]	; (80014cc <HAL_GPIO_Init+0x2f0>)
 80013f8:	689a      	ldr	r2, [r3, #8]
 80013fa:	69bb      	ldr	r3, [r7, #24]
 80013fc:	43db      	mvns	r3, r3
 80013fe:	4933      	ldr	r1, [pc, #204]	; (80014cc <HAL_GPIO_Init+0x2f0>)
 8001400:	4013      	ands	r3, r2
 8001402:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	685b      	ldr	r3, [r3, #4]
 8001408:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800140c:	2b00      	cmp	r3, #0
 800140e:	d006      	beq.n	800141e <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001410:	4b2e      	ldr	r3, [pc, #184]	; (80014cc <HAL_GPIO_Init+0x2f0>)
 8001412:	68da      	ldr	r2, [r3, #12]
 8001414:	492d      	ldr	r1, [pc, #180]	; (80014cc <HAL_GPIO_Init+0x2f0>)
 8001416:	69bb      	ldr	r3, [r7, #24]
 8001418:	4313      	orrs	r3, r2
 800141a:	60cb      	str	r3, [r1, #12]
 800141c:	e006      	b.n	800142c <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800141e:	4b2b      	ldr	r3, [pc, #172]	; (80014cc <HAL_GPIO_Init+0x2f0>)
 8001420:	68da      	ldr	r2, [r3, #12]
 8001422:	69bb      	ldr	r3, [r7, #24]
 8001424:	43db      	mvns	r3, r3
 8001426:	4929      	ldr	r1, [pc, #164]	; (80014cc <HAL_GPIO_Init+0x2f0>)
 8001428:	4013      	ands	r3, r2
 800142a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	685b      	ldr	r3, [r3, #4]
 8001430:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001434:	2b00      	cmp	r3, #0
 8001436:	d006      	beq.n	8001446 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001438:	4b24      	ldr	r3, [pc, #144]	; (80014cc <HAL_GPIO_Init+0x2f0>)
 800143a:	685a      	ldr	r2, [r3, #4]
 800143c:	4923      	ldr	r1, [pc, #140]	; (80014cc <HAL_GPIO_Init+0x2f0>)
 800143e:	69bb      	ldr	r3, [r7, #24]
 8001440:	4313      	orrs	r3, r2
 8001442:	604b      	str	r3, [r1, #4]
 8001444:	e006      	b.n	8001454 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001446:	4b21      	ldr	r3, [pc, #132]	; (80014cc <HAL_GPIO_Init+0x2f0>)
 8001448:	685a      	ldr	r2, [r3, #4]
 800144a:	69bb      	ldr	r3, [r7, #24]
 800144c:	43db      	mvns	r3, r3
 800144e:	491f      	ldr	r1, [pc, #124]	; (80014cc <HAL_GPIO_Init+0x2f0>)
 8001450:	4013      	ands	r3, r2
 8001452:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800145c:	2b00      	cmp	r3, #0
 800145e:	d006      	beq.n	800146e <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001460:	4b1a      	ldr	r3, [pc, #104]	; (80014cc <HAL_GPIO_Init+0x2f0>)
 8001462:	681a      	ldr	r2, [r3, #0]
 8001464:	4919      	ldr	r1, [pc, #100]	; (80014cc <HAL_GPIO_Init+0x2f0>)
 8001466:	69bb      	ldr	r3, [r7, #24]
 8001468:	4313      	orrs	r3, r2
 800146a:	600b      	str	r3, [r1, #0]
 800146c:	e006      	b.n	800147c <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800146e:	4b17      	ldr	r3, [pc, #92]	; (80014cc <HAL_GPIO_Init+0x2f0>)
 8001470:	681a      	ldr	r2, [r3, #0]
 8001472:	69bb      	ldr	r3, [r7, #24]
 8001474:	43db      	mvns	r3, r3
 8001476:	4915      	ldr	r1, [pc, #84]	; (80014cc <HAL_GPIO_Init+0x2f0>)
 8001478:	4013      	ands	r3, r2
 800147a:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800147c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800147e:	3301      	adds	r3, #1
 8001480:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001482:	683b      	ldr	r3, [r7, #0]
 8001484:	681a      	ldr	r2, [r3, #0]
 8001486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001488:	fa22 f303 	lsr.w	r3, r2, r3
 800148c:	2b00      	cmp	r3, #0
 800148e:	f47f aeaf 	bne.w	80011f0 <HAL_GPIO_Init+0x14>
  }
}
 8001492:	bf00      	nop
 8001494:	bf00      	nop
 8001496:	372c      	adds	r7, #44	; 0x2c
 8001498:	46bd      	mov	sp, r7
 800149a:	bc80      	pop	{r7}
 800149c:	4770      	bx	lr
 800149e:	bf00      	nop
 80014a0:	10320000 	.word	0x10320000
 80014a4:	10310000 	.word	0x10310000
 80014a8:	10220000 	.word	0x10220000
 80014ac:	10210000 	.word	0x10210000
 80014b0:	10120000 	.word	0x10120000
 80014b4:	10110000 	.word	0x10110000
 80014b8:	40021000 	.word	0x40021000
 80014bc:	40010000 	.word	0x40010000
 80014c0:	40010800 	.word	0x40010800
 80014c4:	40010c00 	.word	0x40010c00
 80014c8:	40011000 	.word	0x40011000
 80014cc:	40010400 	.word	0x40010400

080014d0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80014d0:	b480      	push	{r7}
 80014d2:	b085      	sub	sp, #20
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
 80014d8:	460b      	mov	r3, r1
 80014da:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	689a      	ldr	r2, [r3, #8]
 80014e0:	887b      	ldrh	r3, [r7, #2]
 80014e2:	4013      	ands	r3, r2
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d002      	beq.n	80014ee <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80014e8:	2301      	movs	r3, #1
 80014ea:	73fb      	strb	r3, [r7, #15]
 80014ec:	e001      	b.n	80014f2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80014ee:	2300      	movs	r3, #0
 80014f0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80014f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80014f4:	4618      	mov	r0, r3
 80014f6:	3714      	adds	r7, #20
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bc80      	pop	{r7}
 80014fc:	4770      	bx	lr

080014fe <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014fe:	b480      	push	{r7}
 8001500:	b083      	sub	sp, #12
 8001502:	af00      	add	r7, sp, #0
 8001504:	6078      	str	r0, [r7, #4]
 8001506:	460b      	mov	r3, r1
 8001508:	807b      	strh	r3, [r7, #2]
 800150a:	4613      	mov	r3, r2
 800150c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800150e:	787b      	ldrb	r3, [r7, #1]
 8001510:	2b00      	cmp	r3, #0
 8001512:	d003      	beq.n	800151c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001514:	887a      	ldrh	r2, [r7, #2]
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800151a:	e003      	b.n	8001524 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800151c:	887b      	ldrh	r3, [r7, #2]
 800151e:	041a      	lsls	r2, r3, #16
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	611a      	str	r2, [r3, #16]
}
 8001524:	bf00      	nop
 8001526:	370c      	adds	r7, #12
 8001528:	46bd      	mov	sp, r7
 800152a:	bc80      	pop	{r7}
 800152c:	4770      	bx	lr
	...

08001530 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b086      	sub	sp, #24
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	2b00      	cmp	r3, #0
 800153c:	d101      	bne.n	8001542 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800153e:	2301      	movs	r3, #1
 8001540:	e26c      	b.n	8001a1c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f003 0301 	and.w	r3, r3, #1
 800154a:	2b00      	cmp	r3, #0
 800154c:	f000 8087 	beq.w	800165e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001550:	4b92      	ldr	r3, [pc, #584]	; (800179c <HAL_RCC_OscConfig+0x26c>)
 8001552:	685b      	ldr	r3, [r3, #4]
 8001554:	f003 030c 	and.w	r3, r3, #12
 8001558:	2b04      	cmp	r3, #4
 800155a:	d00c      	beq.n	8001576 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800155c:	4b8f      	ldr	r3, [pc, #572]	; (800179c <HAL_RCC_OscConfig+0x26c>)
 800155e:	685b      	ldr	r3, [r3, #4]
 8001560:	f003 030c 	and.w	r3, r3, #12
 8001564:	2b08      	cmp	r3, #8
 8001566:	d112      	bne.n	800158e <HAL_RCC_OscConfig+0x5e>
 8001568:	4b8c      	ldr	r3, [pc, #560]	; (800179c <HAL_RCC_OscConfig+0x26c>)
 800156a:	685b      	ldr	r3, [r3, #4]
 800156c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001570:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001574:	d10b      	bne.n	800158e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001576:	4b89      	ldr	r3, [pc, #548]	; (800179c <HAL_RCC_OscConfig+0x26c>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800157e:	2b00      	cmp	r3, #0
 8001580:	d06c      	beq.n	800165c <HAL_RCC_OscConfig+0x12c>
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	685b      	ldr	r3, [r3, #4]
 8001586:	2b00      	cmp	r3, #0
 8001588:	d168      	bne.n	800165c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800158a:	2301      	movs	r3, #1
 800158c:	e246      	b.n	8001a1c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	685b      	ldr	r3, [r3, #4]
 8001592:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001596:	d106      	bne.n	80015a6 <HAL_RCC_OscConfig+0x76>
 8001598:	4b80      	ldr	r3, [pc, #512]	; (800179c <HAL_RCC_OscConfig+0x26c>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	4a7f      	ldr	r2, [pc, #508]	; (800179c <HAL_RCC_OscConfig+0x26c>)
 800159e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015a2:	6013      	str	r3, [r2, #0]
 80015a4:	e02e      	b.n	8001604 <HAL_RCC_OscConfig+0xd4>
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	685b      	ldr	r3, [r3, #4]
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d10c      	bne.n	80015c8 <HAL_RCC_OscConfig+0x98>
 80015ae:	4b7b      	ldr	r3, [pc, #492]	; (800179c <HAL_RCC_OscConfig+0x26c>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	4a7a      	ldr	r2, [pc, #488]	; (800179c <HAL_RCC_OscConfig+0x26c>)
 80015b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015b8:	6013      	str	r3, [r2, #0]
 80015ba:	4b78      	ldr	r3, [pc, #480]	; (800179c <HAL_RCC_OscConfig+0x26c>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	4a77      	ldr	r2, [pc, #476]	; (800179c <HAL_RCC_OscConfig+0x26c>)
 80015c0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015c4:	6013      	str	r3, [r2, #0]
 80015c6:	e01d      	b.n	8001604 <HAL_RCC_OscConfig+0xd4>
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80015d0:	d10c      	bne.n	80015ec <HAL_RCC_OscConfig+0xbc>
 80015d2:	4b72      	ldr	r3, [pc, #456]	; (800179c <HAL_RCC_OscConfig+0x26c>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	4a71      	ldr	r2, [pc, #452]	; (800179c <HAL_RCC_OscConfig+0x26c>)
 80015d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015dc:	6013      	str	r3, [r2, #0]
 80015de:	4b6f      	ldr	r3, [pc, #444]	; (800179c <HAL_RCC_OscConfig+0x26c>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	4a6e      	ldr	r2, [pc, #440]	; (800179c <HAL_RCC_OscConfig+0x26c>)
 80015e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015e8:	6013      	str	r3, [r2, #0]
 80015ea:	e00b      	b.n	8001604 <HAL_RCC_OscConfig+0xd4>
 80015ec:	4b6b      	ldr	r3, [pc, #428]	; (800179c <HAL_RCC_OscConfig+0x26c>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	4a6a      	ldr	r2, [pc, #424]	; (800179c <HAL_RCC_OscConfig+0x26c>)
 80015f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015f6:	6013      	str	r3, [r2, #0]
 80015f8:	4b68      	ldr	r3, [pc, #416]	; (800179c <HAL_RCC_OscConfig+0x26c>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	4a67      	ldr	r2, [pc, #412]	; (800179c <HAL_RCC_OscConfig+0x26c>)
 80015fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001602:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	685b      	ldr	r3, [r3, #4]
 8001608:	2b00      	cmp	r3, #0
 800160a:	d013      	beq.n	8001634 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800160c:	f7ff fcfc 	bl	8001008 <HAL_GetTick>
 8001610:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001612:	e008      	b.n	8001626 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001614:	f7ff fcf8 	bl	8001008 <HAL_GetTick>
 8001618:	4602      	mov	r2, r0
 800161a:	693b      	ldr	r3, [r7, #16]
 800161c:	1ad3      	subs	r3, r2, r3
 800161e:	2b64      	cmp	r3, #100	; 0x64
 8001620:	d901      	bls.n	8001626 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001622:	2303      	movs	r3, #3
 8001624:	e1fa      	b.n	8001a1c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001626:	4b5d      	ldr	r3, [pc, #372]	; (800179c <HAL_RCC_OscConfig+0x26c>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800162e:	2b00      	cmp	r3, #0
 8001630:	d0f0      	beq.n	8001614 <HAL_RCC_OscConfig+0xe4>
 8001632:	e014      	b.n	800165e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001634:	f7ff fce8 	bl	8001008 <HAL_GetTick>
 8001638:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800163a:	e008      	b.n	800164e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800163c:	f7ff fce4 	bl	8001008 <HAL_GetTick>
 8001640:	4602      	mov	r2, r0
 8001642:	693b      	ldr	r3, [r7, #16]
 8001644:	1ad3      	subs	r3, r2, r3
 8001646:	2b64      	cmp	r3, #100	; 0x64
 8001648:	d901      	bls.n	800164e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800164a:	2303      	movs	r3, #3
 800164c:	e1e6      	b.n	8001a1c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800164e:	4b53      	ldr	r3, [pc, #332]	; (800179c <HAL_RCC_OscConfig+0x26c>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001656:	2b00      	cmp	r3, #0
 8001658:	d1f0      	bne.n	800163c <HAL_RCC_OscConfig+0x10c>
 800165a:	e000      	b.n	800165e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800165c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f003 0302 	and.w	r3, r3, #2
 8001666:	2b00      	cmp	r3, #0
 8001668:	d063      	beq.n	8001732 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800166a:	4b4c      	ldr	r3, [pc, #304]	; (800179c <HAL_RCC_OscConfig+0x26c>)
 800166c:	685b      	ldr	r3, [r3, #4]
 800166e:	f003 030c 	and.w	r3, r3, #12
 8001672:	2b00      	cmp	r3, #0
 8001674:	d00b      	beq.n	800168e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001676:	4b49      	ldr	r3, [pc, #292]	; (800179c <HAL_RCC_OscConfig+0x26c>)
 8001678:	685b      	ldr	r3, [r3, #4]
 800167a:	f003 030c 	and.w	r3, r3, #12
 800167e:	2b08      	cmp	r3, #8
 8001680:	d11c      	bne.n	80016bc <HAL_RCC_OscConfig+0x18c>
 8001682:	4b46      	ldr	r3, [pc, #280]	; (800179c <HAL_RCC_OscConfig+0x26c>)
 8001684:	685b      	ldr	r3, [r3, #4]
 8001686:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800168a:	2b00      	cmp	r3, #0
 800168c:	d116      	bne.n	80016bc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800168e:	4b43      	ldr	r3, [pc, #268]	; (800179c <HAL_RCC_OscConfig+0x26c>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f003 0302 	and.w	r3, r3, #2
 8001696:	2b00      	cmp	r3, #0
 8001698:	d005      	beq.n	80016a6 <HAL_RCC_OscConfig+0x176>
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	691b      	ldr	r3, [r3, #16]
 800169e:	2b01      	cmp	r3, #1
 80016a0:	d001      	beq.n	80016a6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80016a2:	2301      	movs	r3, #1
 80016a4:	e1ba      	b.n	8001a1c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016a6:	4b3d      	ldr	r3, [pc, #244]	; (800179c <HAL_RCC_OscConfig+0x26c>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	695b      	ldr	r3, [r3, #20]
 80016b2:	00db      	lsls	r3, r3, #3
 80016b4:	4939      	ldr	r1, [pc, #228]	; (800179c <HAL_RCC_OscConfig+0x26c>)
 80016b6:	4313      	orrs	r3, r2
 80016b8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016ba:	e03a      	b.n	8001732 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	691b      	ldr	r3, [r3, #16]
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d020      	beq.n	8001706 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80016c4:	4b36      	ldr	r3, [pc, #216]	; (80017a0 <HAL_RCC_OscConfig+0x270>)
 80016c6:	2201      	movs	r2, #1
 80016c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016ca:	f7ff fc9d 	bl	8001008 <HAL_GetTick>
 80016ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016d0:	e008      	b.n	80016e4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016d2:	f7ff fc99 	bl	8001008 <HAL_GetTick>
 80016d6:	4602      	mov	r2, r0
 80016d8:	693b      	ldr	r3, [r7, #16]
 80016da:	1ad3      	subs	r3, r2, r3
 80016dc:	2b02      	cmp	r3, #2
 80016de:	d901      	bls.n	80016e4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80016e0:	2303      	movs	r3, #3
 80016e2:	e19b      	b.n	8001a1c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016e4:	4b2d      	ldr	r3, [pc, #180]	; (800179c <HAL_RCC_OscConfig+0x26c>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f003 0302 	and.w	r3, r3, #2
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d0f0      	beq.n	80016d2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016f0:	4b2a      	ldr	r3, [pc, #168]	; (800179c <HAL_RCC_OscConfig+0x26c>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	695b      	ldr	r3, [r3, #20]
 80016fc:	00db      	lsls	r3, r3, #3
 80016fe:	4927      	ldr	r1, [pc, #156]	; (800179c <HAL_RCC_OscConfig+0x26c>)
 8001700:	4313      	orrs	r3, r2
 8001702:	600b      	str	r3, [r1, #0]
 8001704:	e015      	b.n	8001732 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001706:	4b26      	ldr	r3, [pc, #152]	; (80017a0 <HAL_RCC_OscConfig+0x270>)
 8001708:	2200      	movs	r2, #0
 800170a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800170c:	f7ff fc7c 	bl	8001008 <HAL_GetTick>
 8001710:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001712:	e008      	b.n	8001726 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001714:	f7ff fc78 	bl	8001008 <HAL_GetTick>
 8001718:	4602      	mov	r2, r0
 800171a:	693b      	ldr	r3, [r7, #16]
 800171c:	1ad3      	subs	r3, r2, r3
 800171e:	2b02      	cmp	r3, #2
 8001720:	d901      	bls.n	8001726 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001722:	2303      	movs	r3, #3
 8001724:	e17a      	b.n	8001a1c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001726:	4b1d      	ldr	r3, [pc, #116]	; (800179c <HAL_RCC_OscConfig+0x26c>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f003 0302 	and.w	r3, r3, #2
 800172e:	2b00      	cmp	r3, #0
 8001730:	d1f0      	bne.n	8001714 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f003 0308 	and.w	r3, r3, #8
 800173a:	2b00      	cmp	r3, #0
 800173c:	d03a      	beq.n	80017b4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	699b      	ldr	r3, [r3, #24]
 8001742:	2b00      	cmp	r3, #0
 8001744:	d019      	beq.n	800177a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001746:	4b17      	ldr	r3, [pc, #92]	; (80017a4 <HAL_RCC_OscConfig+0x274>)
 8001748:	2201      	movs	r2, #1
 800174a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800174c:	f7ff fc5c 	bl	8001008 <HAL_GetTick>
 8001750:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001752:	e008      	b.n	8001766 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001754:	f7ff fc58 	bl	8001008 <HAL_GetTick>
 8001758:	4602      	mov	r2, r0
 800175a:	693b      	ldr	r3, [r7, #16]
 800175c:	1ad3      	subs	r3, r2, r3
 800175e:	2b02      	cmp	r3, #2
 8001760:	d901      	bls.n	8001766 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001762:	2303      	movs	r3, #3
 8001764:	e15a      	b.n	8001a1c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001766:	4b0d      	ldr	r3, [pc, #52]	; (800179c <HAL_RCC_OscConfig+0x26c>)
 8001768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800176a:	f003 0302 	and.w	r3, r3, #2
 800176e:	2b00      	cmp	r3, #0
 8001770:	d0f0      	beq.n	8001754 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001772:	2001      	movs	r0, #1
 8001774:	f000 fae8 	bl	8001d48 <RCC_Delay>
 8001778:	e01c      	b.n	80017b4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800177a:	4b0a      	ldr	r3, [pc, #40]	; (80017a4 <HAL_RCC_OscConfig+0x274>)
 800177c:	2200      	movs	r2, #0
 800177e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001780:	f7ff fc42 	bl	8001008 <HAL_GetTick>
 8001784:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001786:	e00f      	b.n	80017a8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001788:	f7ff fc3e 	bl	8001008 <HAL_GetTick>
 800178c:	4602      	mov	r2, r0
 800178e:	693b      	ldr	r3, [r7, #16]
 8001790:	1ad3      	subs	r3, r2, r3
 8001792:	2b02      	cmp	r3, #2
 8001794:	d908      	bls.n	80017a8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001796:	2303      	movs	r3, #3
 8001798:	e140      	b.n	8001a1c <HAL_RCC_OscConfig+0x4ec>
 800179a:	bf00      	nop
 800179c:	40021000 	.word	0x40021000
 80017a0:	42420000 	.word	0x42420000
 80017a4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017a8:	4b9e      	ldr	r3, [pc, #632]	; (8001a24 <HAL_RCC_OscConfig+0x4f4>)
 80017aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017ac:	f003 0302 	and.w	r3, r3, #2
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d1e9      	bne.n	8001788 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f003 0304 	and.w	r3, r3, #4
 80017bc:	2b00      	cmp	r3, #0
 80017be:	f000 80a6 	beq.w	800190e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80017c2:	2300      	movs	r3, #0
 80017c4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80017c6:	4b97      	ldr	r3, [pc, #604]	; (8001a24 <HAL_RCC_OscConfig+0x4f4>)
 80017c8:	69db      	ldr	r3, [r3, #28]
 80017ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d10d      	bne.n	80017ee <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80017d2:	4b94      	ldr	r3, [pc, #592]	; (8001a24 <HAL_RCC_OscConfig+0x4f4>)
 80017d4:	69db      	ldr	r3, [r3, #28]
 80017d6:	4a93      	ldr	r2, [pc, #588]	; (8001a24 <HAL_RCC_OscConfig+0x4f4>)
 80017d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017dc:	61d3      	str	r3, [r2, #28]
 80017de:	4b91      	ldr	r3, [pc, #580]	; (8001a24 <HAL_RCC_OscConfig+0x4f4>)
 80017e0:	69db      	ldr	r3, [r3, #28]
 80017e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017e6:	60bb      	str	r3, [r7, #8]
 80017e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80017ea:	2301      	movs	r3, #1
 80017ec:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017ee:	4b8e      	ldr	r3, [pc, #568]	; (8001a28 <HAL_RCC_OscConfig+0x4f8>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d118      	bne.n	800182c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80017fa:	4b8b      	ldr	r3, [pc, #556]	; (8001a28 <HAL_RCC_OscConfig+0x4f8>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	4a8a      	ldr	r2, [pc, #552]	; (8001a28 <HAL_RCC_OscConfig+0x4f8>)
 8001800:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001804:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001806:	f7ff fbff 	bl	8001008 <HAL_GetTick>
 800180a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800180c:	e008      	b.n	8001820 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800180e:	f7ff fbfb 	bl	8001008 <HAL_GetTick>
 8001812:	4602      	mov	r2, r0
 8001814:	693b      	ldr	r3, [r7, #16]
 8001816:	1ad3      	subs	r3, r2, r3
 8001818:	2b64      	cmp	r3, #100	; 0x64
 800181a:	d901      	bls.n	8001820 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800181c:	2303      	movs	r3, #3
 800181e:	e0fd      	b.n	8001a1c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001820:	4b81      	ldr	r3, [pc, #516]	; (8001a28 <HAL_RCC_OscConfig+0x4f8>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001828:	2b00      	cmp	r3, #0
 800182a:	d0f0      	beq.n	800180e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	68db      	ldr	r3, [r3, #12]
 8001830:	2b01      	cmp	r3, #1
 8001832:	d106      	bne.n	8001842 <HAL_RCC_OscConfig+0x312>
 8001834:	4b7b      	ldr	r3, [pc, #492]	; (8001a24 <HAL_RCC_OscConfig+0x4f4>)
 8001836:	6a1b      	ldr	r3, [r3, #32]
 8001838:	4a7a      	ldr	r2, [pc, #488]	; (8001a24 <HAL_RCC_OscConfig+0x4f4>)
 800183a:	f043 0301 	orr.w	r3, r3, #1
 800183e:	6213      	str	r3, [r2, #32]
 8001840:	e02d      	b.n	800189e <HAL_RCC_OscConfig+0x36e>
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	68db      	ldr	r3, [r3, #12]
 8001846:	2b00      	cmp	r3, #0
 8001848:	d10c      	bne.n	8001864 <HAL_RCC_OscConfig+0x334>
 800184a:	4b76      	ldr	r3, [pc, #472]	; (8001a24 <HAL_RCC_OscConfig+0x4f4>)
 800184c:	6a1b      	ldr	r3, [r3, #32]
 800184e:	4a75      	ldr	r2, [pc, #468]	; (8001a24 <HAL_RCC_OscConfig+0x4f4>)
 8001850:	f023 0301 	bic.w	r3, r3, #1
 8001854:	6213      	str	r3, [r2, #32]
 8001856:	4b73      	ldr	r3, [pc, #460]	; (8001a24 <HAL_RCC_OscConfig+0x4f4>)
 8001858:	6a1b      	ldr	r3, [r3, #32]
 800185a:	4a72      	ldr	r2, [pc, #456]	; (8001a24 <HAL_RCC_OscConfig+0x4f4>)
 800185c:	f023 0304 	bic.w	r3, r3, #4
 8001860:	6213      	str	r3, [r2, #32]
 8001862:	e01c      	b.n	800189e <HAL_RCC_OscConfig+0x36e>
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	68db      	ldr	r3, [r3, #12]
 8001868:	2b05      	cmp	r3, #5
 800186a:	d10c      	bne.n	8001886 <HAL_RCC_OscConfig+0x356>
 800186c:	4b6d      	ldr	r3, [pc, #436]	; (8001a24 <HAL_RCC_OscConfig+0x4f4>)
 800186e:	6a1b      	ldr	r3, [r3, #32]
 8001870:	4a6c      	ldr	r2, [pc, #432]	; (8001a24 <HAL_RCC_OscConfig+0x4f4>)
 8001872:	f043 0304 	orr.w	r3, r3, #4
 8001876:	6213      	str	r3, [r2, #32]
 8001878:	4b6a      	ldr	r3, [pc, #424]	; (8001a24 <HAL_RCC_OscConfig+0x4f4>)
 800187a:	6a1b      	ldr	r3, [r3, #32]
 800187c:	4a69      	ldr	r2, [pc, #420]	; (8001a24 <HAL_RCC_OscConfig+0x4f4>)
 800187e:	f043 0301 	orr.w	r3, r3, #1
 8001882:	6213      	str	r3, [r2, #32]
 8001884:	e00b      	b.n	800189e <HAL_RCC_OscConfig+0x36e>
 8001886:	4b67      	ldr	r3, [pc, #412]	; (8001a24 <HAL_RCC_OscConfig+0x4f4>)
 8001888:	6a1b      	ldr	r3, [r3, #32]
 800188a:	4a66      	ldr	r2, [pc, #408]	; (8001a24 <HAL_RCC_OscConfig+0x4f4>)
 800188c:	f023 0301 	bic.w	r3, r3, #1
 8001890:	6213      	str	r3, [r2, #32]
 8001892:	4b64      	ldr	r3, [pc, #400]	; (8001a24 <HAL_RCC_OscConfig+0x4f4>)
 8001894:	6a1b      	ldr	r3, [r3, #32]
 8001896:	4a63      	ldr	r2, [pc, #396]	; (8001a24 <HAL_RCC_OscConfig+0x4f4>)
 8001898:	f023 0304 	bic.w	r3, r3, #4
 800189c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	68db      	ldr	r3, [r3, #12]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d015      	beq.n	80018d2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018a6:	f7ff fbaf 	bl	8001008 <HAL_GetTick>
 80018aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018ac:	e00a      	b.n	80018c4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018ae:	f7ff fbab 	bl	8001008 <HAL_GetTick>
 80018b2:	4602      	mov	r2, r0
 80018b4:	693b      	ldr	r3, [r7, #16]
 80018b6:	1ad3      	subs	r3, r2, r3
 80018b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80018bc:	4293      	cmp	r3, r2
 80018be:	d901      	bls.n	80018c4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80018c0:	2303      	movs	r3, #3
 80018c2:	e0ab      	b.n	8001a1c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018c4:	4b57      	ldr	r3, [pc, #348]	; (8001a24 <HAL_RCC_OscConfig+0x4f4>)
 80018c6:	6a1b      	ldr	r3, [r3, #32]
 80018c8:	f003 0302 	and.w	r3, r3, #2
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d0ee      	beq.n	80018ae <HAL_RCC_OscConfig+0x37e>
 80018d0:	e014      	b.n	80018fc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018d2:	f7ff fb99 	bl	8001008 <HAL_GetTick>
 80018d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018d8:	e00a      	b.n	80018f0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018da:	f7ff fb95 	bl	8001008 <HAL_GetTick>
 80018de:	4602      	mov	r2, r0
 80018e0:	693b      	ldr	r3, [r7, #16]
 80018e2:	1ad3      	subs	r3, r2, r3
 80018e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80018e8:	4293      	cmp	r3, r2
 80018ea:	d901      	bls.n	80018f0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80018ec:	2303      	movs	r3, #3
 80018ee:	e095      	b.n	8001a1c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018f0:	4b4c      	ldr	r3, [pc, #304]	; (8001a24 <HAL_RCC_OscConfig+0x4f4>)
 80018f2:	6a1b      	ldr	r3, [r3, #32]
 80018f4:	f003 0302 	and.w	r3, r3, #2
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d1ee      	bne.n	80018da <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80018fc:	7dfb      	ldrb	r3, [r7, #23]
 80018fe:	2b01      	cmp	r3, #1
 8001900:	d105      	bne.n	800190e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001902:	4b48      	ldr	r3, [pc, #288]	; (8001a24 <HAL_RCC_OscConfig+0x4f4>)
 8001904:	69db      	ldr	r3, [r3, #28]
 8001906:	4a47      	ldr	r2, [pc, #284]	; (8001a24 <HAL_RCC_OscConfig+0x4f4>)
 8001908:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800190c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	69db      	ldr	r3, [r3, #28]
 8001912:	2b00      	cmp	r3, #0
 8001914:	f000 8081 	beq.w	8001a1a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001918:	4b42      	ldr	r3, [pc, #264]	; (8001a24 <HAL_RCC_OscConfig+0x4f4>)
 800191a:	685b      	ldr	r3, [r3, #4]
 800191c:	f003 030c 	and.w	r3, r3, #12
 8001920:	2b08      	cmp	r3, #8
 8001922:	d061      	beq.n	80019e8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	69db      	ldr	r3, [r3, #28]
 8001928:	2b02      	cmp	r3, #2
 800192a:	d146      	bne.n	80019ba <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800192c:	4b3f      	ldr	r3, [pc, #252]	; (8001a2c <HAL_RCC_OscConfig+0x4fc>)
 800192e:	2200      	movs	r2, #0
 8001930:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001932:	f7ff fb69 	bl	8001008 <HAL_GetTick>
 8001936:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001938:	e008      	b.n	800194c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800193a:	f7ff fb65 	bl	8001008 <HAL_GetTick>
 800193e:	4602      	mov	r2, r0
 8001940:	693b      	ldr	r3, [r7, #16]
 8001942:	1ad3      	subs	r3, r2, r3
 8001944:	2b02      	cmp	r3, #2
 8001946:	d901      	bls.n	800194c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001948:	2303      	movs	r3, #3
 800194a:	e067      	b.n	8001a1c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800194c:	4b35      	ldr	r3, [pc, #212]	; (8001a24 <HAL_RCC_OscConfig+0x4f4>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001954:	2b00      	cmp	r3, #0
 8001956:	d1f0      	bne.n	800193a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	6a1b      	ldr	r3, [r3, #32]
 800195c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001960:	d108      	bne.n	8001974 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001962:	4b30      	ldr	r3, [pc, #192]	; (8001a24 <HAL_RCC_OscConfig+0x4f4>)
 8001964:	685b      	ldr	r3, [r3, #4]
 8001966:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	689b      	ldr	r3, [r3, #8]
 800196e:	492d      	ldr	r1, [pc, #180]	; (8001a24 <HAL_RCC_OscConfig+0x4f4>)
 8001970:	4313      	orrs	r3, r2
 8001972:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001974:	4b2b      	ldr	r3, [pc, #172]	; (8001a24 <HAL_RCC_OscConfig+0x4f4>)
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	6a19      	ldr	r1, [r3, #32]
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001984:	430b      	orrs	r3, r1
 8001986:	4927      	ldr	r1, [pc, #156]	; (8001a24 <HAL_RCC_OscConfig+0x4f4>)
 8001988:	4313      	orrs	r3, r2
 800198a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800198c:	4b27      	ldr	r3, [pc, #156]	; (8001a2c <HAL_RCC_OscConfig+0x4fc>)
 800198e:	2201      	movs	r2, #1
 8001990:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001992:	f7ff fb39 	bl	8001008 <HAL_GetTick>
 8001996:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001998:	e008      	b.n	80019ac <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800199a:	f7ff fb35 	bl	8001008 <HAL_GetTick>
 800199e:	4602      	mov	r2, r0
 80019a0:	693b      	ldr	r3, [r7, #16]
 80019a2:	1ad3      	subs	r3, r2, r3
 80019a4:	2b02      	cmp	r3, #2
 80019a6:	d901      	bls.n	80019ac <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80019a8:	2303      	movs	r3, #3
 80019aa:	e037      	b.n	8001a1c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80019ac:	4b1d      	ldr	r3, [pc, #116]	; (8001a24 <HAL_RCC_OscConfig+0x4f4>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d0f0      	beq.n	800199a <HAL_RCC_OscConfig+0x46a>
 80019b8:	e02f      	b.n	8001a1a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019ba:	4b1c      	ldr	r3, [pc, #112]	; (8001a2c <HAL_RCC_OscConfig+0x4fc>)
 80019bc:	2200      	movs	r2, #0
 80019be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019c0:	f7ff fb22 	bl	8001008 <HAL_GetTick>
 80019c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019c6:	e008      	b.n	80019da <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019c8:	f7ff fb1e 	bl	8001008 <HAL_GetTick>
 80019cc:	4602      	mov	r2, r0
 80019ce:	693b      	ldr	r3, [r7, #16]
 80019d0:	1ad3      	subs	r3, r2, r3
 80019d2:	2b02      	cmp	r3, #2
 80019d4:	d901      	bls.n	80019da <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80019d6:	2303      	movs	r3, #3
 80019d8:	e020      	b.n	8001a1c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019da:	4b12      	ldr	r3, [pc, #72]	; (8001a24 <HAL_RCC_OscConfig+0x4f4>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d1f0      	bne.n	80019c8 <HAL_RCC_OscConfig+0x498>
 80019e6:	e018      	b.n	8001a1a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	69db      	ldr	r3, [r3, #28]
 80019ec:	2b01      	cmp	r3, #1
 80019ee:	d101      	bne.n	80019f4 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80019f0:	2301      	movs	r3, #1
 80019f2:	e013      	b.n	8001a1c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80019f4:	4b0b      	ldr	r3, [pc, #44]	; (8001a24 <HAL_RCC_OscConfig+0x4f4>)
 80019f6:	685b      	ldr	r3, [r3, #4]
 80019f8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	6a1b      	ldr	r3, [r3, #32]
 8001a04:	429a      	cmp	r2, r3
 8001a06:	d106      	bne.n	8001a16 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a12:	429a      	cmp	r2, r3
 8001a14:	d001      	beq.n	8001a1a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001a16:	2301      	movs	r3, #1
 8001a18:	e000      	b.n	8001a1c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001a1a:	2300      	movs	r3, #0
}
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	3718      	adds	r7, #24
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bd80      	pop	{r7, pc}
 8001a24:	40021000 	.word	0x40021000
 8001a28:	40007000 	.word	0x40007000
 8001a2c:	42420060 	.word	0x42420060

08001a30 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b084      	sub	sp, #16
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
 8001a38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d101      	bne.n	8001a44 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a40:	2301      	movs	r3, #1
 8001a42:	e0d0      	b.n	8001be6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001a44:	4b6a      	ldr	r3, [pc, #424]	; (8001bf0 <HAL_RCC_ClockConfig+0x1c0>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f003 0307 	and.w	r3, r3, #7
 8001a4c:	683a      	ldr	r2, [r7, #0]
 8001a4e:	429a      	cmp	r2, r3
 8001a50:	d910      	bls.n	8001a74 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a52:	4b67      	ldr	r3, [pc, #412]	; (8001bf0 <HAL_RCC_ClockConfig+0x1c0>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f023 0207 	bic.w	r2, r3, #7
 8001a5a:	4965      	ldr	r1, [pc, #404]	; (8001bf0 <HAL_RCC_ClockConfig+0x1c0>)
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	4313      	orrs	r3, r2
 8001a60:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a62:	4b63      	ldr	r3, [pc, #396]	; (8001bf0 <HAL_RCC_ClockConfig+0x1c0>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f003 0307 	and.w	r3, r3, #7
 8001a6a:	683a      	ldr	r2, [r7, #0]
 8001a6c:	429a      	cmp	r2, r3
 8001a6e:	d001      	beq.n	8001a74 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001a70:	2301      	movs	r3, #1
 8001a72:	e0b8      	b.n	8001be6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f003 0302 	and.w	r3, r3, #2
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d020      	beq.n	8001ac2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f003 0304 	and.w	r3, r3, #4
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d005      	beq.n	8001a98 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a8c:	4b59      	ldr	r3, [pc, #356]	; (8001bf4 <HAL_RCC_ClockConfig+0x1c4>)
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	4a58      	ldr	r2, [pc, #352]	; (8001bf4 <HAL_RCC_ClockConfig+0x1c4>)
 8001a92:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001a96:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f003 0308 	and.w	r3, r3, #8
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d005      	beq.n	8001ab0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001aa4:	4b53      	ldr	r3, [pc, #332]	; (8001bf4 <HAL_RCC_ClockConfig+0x1c4>)
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	4a52      	ldr	r2, [pc, #328]	; (8001bf4 <HAL_RCC_ClockConfig+0x1c4>)
 8001aaa:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001aae:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ab0:	4b50      	ldr	r3, [pc, #320]	; (8001bf4 <HAL_RCC_ClockConfig+0x1c4>)
 8001ab2:	685b      	ldr	r3, [r3, #4]
 8001ab4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	689b      	ldr	r3, [r3, #8]
 8001abc:	494d      	ldr	r1, [pc, #308]	; (8001bf4 <HAL_RCC_ClockConfig+0x1c4>)
 8001abe:	4313      	orrs	r3, r2
 8001ac0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f003 0301 	and.w	r3, r3, #1
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d040      	beq.n	8001b50 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	685b      	ldr	r3, [r3, #4]
 8001ad2:	2b01      	cmp	r3, #1
 8001ad4:	d107      	bne.n	8001ae6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ad6:	4b47      	ldr	r3, [pc, #284]	; (8001bf4 <HAL_RCC_ClockConfig+0x1c4>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d115      	bne.n	8001b0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	e07f      	b.n	8001be6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	685b      	ldr	r3, [r3, #4]
 8001aea:	2b02      	cmp	r3, #2
 8001aec:	d107      	bne.n	8001afe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001aee:	4b41      	ldr	r3, [pc, #260]	; (8001bf4 <HAL_RCC_ClockConfig+0x1c4>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d109      	bne.n	8001b0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001afa:	2301      	movs	r3, #1
 8001afc:	e073      	b.n	8001be6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001afe:	4b3d      	ldr	r3, [pc, #244]	; (8001bf4 <HAL_RCC_ClockConfig+0x1c4>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f003 0302 	and.w	r3, r3, #2
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d101      	bne.n	8001b0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	e06b      	b.n	8001be6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b0e:	4b39      	ldr	r3, [pc, #228]	; (8001bf4 <HAL_RCC_ClockConfig+0x1c4>)
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	f023 0203 	bic.w	r2, r3, #3
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	4936      	ldr	r1, [pc, #216]	; (8001bf4 <HAL_RCC_ClockConfig+0x1c4>)
 8001b1c:	4313      	orrs	r3, r2
 8001b1e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b20:	f7ff fa72 	bl	8001008 <HAL_GetTick>
 8001b24:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b26:	e00a      	b.n	8001b3e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b28:	f7ff fa6e 	bl	8001008 <HAL_GetTick>
 8001b2c:	4602      	mov	r2, r0
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	1ad3      	subs	r3, r2, r3
 8001b32:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b36:	4293      	cmp	r3, r2
 8001b38:	d901      	bls.n	8001b3e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001b3a:	2303      	movs	r3, #3
 8001b3c:	e053      	b.n	8001be6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b3e:	4b2d      	ldr	r3, [pc, #180]	; (8001bf4 <HAL_RCC_ClockConfig+0x1c4>)
 8001b40:	685b      	ldr	r3, [r3, #4]
 8001b42:	f003 020c 	and.w	r2, r3, #12
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	685b      	ldr	r3, [r3, #4]
 8001b4a:	009b      	lsls	r3, r3, #2
 8001b4c:	429a      	cmp	r2, r3
 8001b4e:	d1eb      	bne.n	8001b28 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001b50:	4b27      	ldr	r3, [pc, #156]	; (8001bf0 <HAL_RCC_ClockConfig+0x1c0>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f003 0307 	and.w	r3, r3, #7
 8001b58:	683a      	ldr	r2, [r7, #0]
 8001b5a:	429a      	cmp	r2, r3
 8001b5c:	d210      	bcs.n	8001b80 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b5e:	4b24      	ldr	r3, [pc, #144]	; (8001bf0 <HAL_RCC_ClockConfig+0x1c0>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f023 0207 	bic.w	r2, r3, #7
 8001b66:	4922      	ldr	r1, [pc, #136]	; (8001bf0 <HAL_RCC_ClockConfig+0x1c0>)
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	4313      	orrs	r3, r2
 8001b6c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b6e:	4b20      	ldr	r3, [pc, #128]	; (8001bf0 <HAL_RCC_ClockConfig+0x1c0>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f003 0307 	and.w	r3, r3, #7
 8001b76:	683a      	ldr	r2, [r7, #0]
 8001b78:	429a      	cmp	r2, r3
 8001b7a:	d001      	beq.n	8001b80 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	e032      	b.n	8001be6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f003 0304 	and.w	r3, r3, #4
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d008      	beq.n	8001b9e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b8c:	4b19      	ldr	r3, [pc, #100]	; (8001bf4 <HAL_RCC_ClockConfig+0x1c4>)
 8001b8e:	685b      	ldr	r3, [r3, #4]
 8001b90:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	68db      	ldr	r3, [r3, #12]
 8001b98:	4916      	ldr	r1, [pc, #88]	; (8001bf4 <HAL_RCC_ClockConfig+0x1c4>)
 8001b9a:	4313      	orrs	r3, r2
 8001b9c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f003 0308 	and.w	r3, r3, #8
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d009      	beq.n	8001bbe <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001baa:	4b12      	ldr	r3, [pc, #72]	; (8001bf4 <HAL_RCC_ClockConfig+0x1c4>)
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	691b      	ldr	r3, [r3, #16]
 8001bb6:	00db      	lsls	r3, r3, #3
 8001bb8:	490e      	ldr	r1, [pc, #56]	; (8001bf4 <HAL_RCC_ClockConfig+0x1c4>)
 8001bba:	4313      	orrs	r3, r2
 8001bbc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001bbe:	f000 f821 	bl	8001c04 <HAL_RCC_GetSysClockFreq>
 8001bc2:	4602      	mov	r2, r0
 8001bc4:	4b0b      	ldr	r3, [pc, #44]	; (8001bf4 <HAL_RCC_ClockConfig+0x1c4>)
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	091b      	lsrs	r3, r3, #4
 8001bca:	f003 030f 	and.w	r3, r3, #15
 8001bce:	490a      	ldr	r1, [pc, #40]	; (8001bf8 <HAL_RCC_ClockConfig+0x1c8>)
 8001bd0:	5ccb      	ldrb	r3, [r1, r3]
 8001bd2:	fa22 f303 	lsr.w	r3, r2, r3
 8001bd6:	4a09      	ldr	r2, [pc, #36]	; (8001bfc <HAL_RCC_ClockConfig+0x1cc>)
 8001bd8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001bda:	4b09      	ldr	r3, [pc, #36]	; (8001c00 <HAL_RCC_ClockConfig+0x1d0>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	4618      	mov	r0, r3
 8001be0:	f7ff f93e 	bl	8000e60 <HAL_InitTick>

  return HAL_OK;
 8001be4:	2300      	movs	r3, #0
}
 8001be6:	4618      	mov	r0, r3
 8001be8:	3710      	adds	r7, #16
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}
 8001bee:	bf00      	nop
 8001bf0:	40022000 	.word	0x40022000
 8001bf4:	40021000 	.word	0x40021000
 8001bf8:	080025c4 	.word	0x080025c4
 8001bfc:	20000068 	.word	0x20000068
 8001c00:	2000006c 	.word	0x2000006c

08001c04 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c04:	b480      	push	{r7}
 8001c06:	b087      	sub	sp, #28
 8001c08:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	60fb      	str	r3, [r7, #12]
 8001c0e:	2300      	movs	r3, #0
 8001c10:	60bb      	str	r3, [r7, #8]
 8001c12:	2300      	movs	r3, #0
 8001c14:	617b      	str	r3, [r7, #20]
 8001c16:	2300      	movs	r3, #0
 8001c18:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001c1e:	4b1e      	ldr	r3, [pc, #120]	; (8001c98 <HAL_RCC_GetSysClockFreq+0x94>)
 8001c20:	685b      	ldr	r3, [r3, #4]
 8001c22:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	f003 030c 	and.w	r3, r3, #12
 8001c2a:	2b04      	cmp	r3, #4
 8001c2c:	d002      	beq.n	8001c34 <HAL_RCC_GetSysClockFreq+0x30>
 8001c2e:	2b08      	cmp	r3, #8
 8001c30:	d003      	beq.n	8001c3a <HAL_RCC_GetSysClockFreq+0x36>
 8001c32:	e027      	b.n	8001c84 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001c34:	4b19      	ldr	r3, [pc, #100]	; (8001c9c <HAL_RCC_GetSysClockFreq+0x98>)
 8001c36:	613b      	str	r3, [r7, #16]
      break;
 8001c38:	e027      	b.n	8001c8a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	0c9b      	lsrs	r3, r3, #18
 8001c3e:	f003 030f 	and.w	r3, r3, #15
 8001c42:	4a17      	ldr	r2, [pc, #92]	; (8001ca0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001c44:	5cd3      	ldrb	r3, [r2, r3]
 8001c46:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d010      	beq.n	8001c74 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001c52:	4b11      	ldr	r3, [pc, #68]	; (8001c98 <HAL_RCC_GetSysClockFreq+0x94>)
 8001c54:	685b      	ldr	r3, [r3, #4]
 8001c56:	0c5b      	lsrs	r3, r3, #17
 8001c58:	f003 0301 	and.w	r3, r3, #1
 8001c5c:	4a11      	ldr	r2, [pc, #68]	; (8001ca4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001c5e:	5cd3      	ldrb	r3, [r2, r3]
 8001c60:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	4a0d      	ldr	r2, [pc, #52]	; (8001c9c <HAL_RCC_GetSysClockFreq+0x98>)
 8001c66:	fb02 f203 	mul.w	r2, r2, r3
 8001c6a:	68bb      	ldr	r3, [r7, #8]
 8001c6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c70:	617b      	str	r3, [r7, #20]
 8001c72:	e004      	b.n	8001c7e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	4a0c      	ldr	r2, [pc, #48]	; (8001ca8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001c78:	fb02 f303 	mul.w	r3, r2, r3
 8001c7c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001c7e:	697b      	ldr	r3, [r7, #20]
 8001c80:	613b      	str	r3, [r7, #16]
      break;
 8001c82:	e002      	b.n	8001c8a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001c84:	4b05      	ldr	r3, [pc, #20]	; (8001c9c <HAL_RCC_GetSysClockFreq+0x98>)
 8001c86:	613b      	str	r3, [r7, #16]
      break;
 8001c88:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c8a:	693b      	ldr	r3, [r7, #16]
}
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	371c      	adds	r7, #28
 8001c90:	46bd      	mov	sp, r7
 8001c92:	bc80      	pop	{r7}
 8001c94:	4770      	bx	lr
 8001c96:	bf00      	nop
 8001c98:	40021000 	.word	0x40021000
 8001c9c:	007a1200 	.word	0x007a1200
 8001ca0:	080025dc 	.word	0x080025dc
 8001ca4:	080025ec 	.word	0x080025ec
 8001ca8:	003d0900 	.word	0x003d0900

08001cac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001cac:	b480      	push	{r7}
 8001cae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001cb0:	4b02      	ldr	r3, [pc, #8]	; (8001cbc <HAL_RCC_GetHCLKFreq+0x10>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
}
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bc80      	pop	{r7}
 8001cba:	4770      	bx	lr
 8001cbc:	20000068 	.word	0x20000068

08001cc0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001cc4:	f7ff fff2 	bl	8001cac <HAL_RCC_GetHCLKFreq>
 8001cc8:	4602      	mov	r2, r0
 8001cca:	4b05      	ldr	r3, [pc, #20]	; (8001ce0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001ccc:	685b      	ldr	r3, [r3, #4]
 8001cce:	0adb      	lsrs	r3, r3, #11
 8001cd0:	f003 0307 	and.w	r3, r3, #7
 8001cd4:	4903      	ldr	r1, [pc, #12]	; (8001ce4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001cd6:	5ccb      	ldrb	r3, [r1, r3]
 8001cd8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001cdc:	4618      	mov	r0, r3
 8001cde:	bd80      	pop	{r7, pc}
 8001ce0:	40021000 	.word	0x40021000
 8001ce4:	080025d4 	.word	0x080025d4

08001ce8 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	b083      	sub	sp, #12
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
 8001cf0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	220f      	movs	r2, #15
 8001cf6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001cf8:	4b11      	ldr	r3, [pc, #68]	; (8001d40 <HAL_RCC_GetClockConfig+0x58>)
 8001cfa:	685b      	ldr	r3, [r3, #4]
 8001cfc:	f003 0203 	and.w	r2, r3, #3
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001d04:	4b0e      	ldr	r3, [pc, #56]	; (8001d40 <HAL_RCC_GetClockConfig+0x58>)
 8001d06:	685b      	ldr	r3, [r3, #4]
 8001d08:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001d10:	4b0b      	ldr	r3, [pc, #44]	; (8001d40 <HAL_RCC_GetClockConfig+0x58>)
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001d1c:	4b08      	ldr	r3, [pc, #32]	; (8001d40 <HAL_RCC_GetClockConfig+0x58>)
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	08db      	lsrs	r3, r3, #3
 8001d22:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001d2a:	4b06      	ldr	r3, [pc, #24]	; (8001d44 <HAL_RCC_GetClockConfig+0x5c>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f003 0207 	and.w	r2, r3, #7
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8001d36:	bf00      	nop
 8001d38:	370c      	adds	r7, #12
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bc80      	pop	{r7}
 8001d3e:	4770      	bx	lr
 8001d40:	40021000 	.word	0x40021000
 8001d44:	40022000 	.word	0x40022000

08001d48 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	b085      	sub	sp, #20
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001d50:	4b0a      	ldr	r3, [pc, #40]	; (8001d7c <RCC_Delay+0x34>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	4a0a      	ldr	r2, [pc, #40]	; (8001d80 <RCC_Delay+0x38>)
 8001d56:	fba2 2303 	umull	r2, r3, r2, r3
 8001d5a:	0a5b      	lsrs	r3, r3, #9
 8001d5c:	687a      	ldr	r2, [r7, #4]
 8001d5e:	fb02 f303 	mul.w	r3, r2, r3
 8001d62:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001d64:	bf00      	nop
  }
  while (Delay --);
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	1e5a      	subs	r2, r3, #1
 8001d6a:	60fa      	str	r2, [r7, #12]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d1f9      	bne.n	8001d64 <RCC_Delay+0x1c>
}
 8001d70:	bf00      	nop
 8001d72:	bf00      	nop
 8001d74:	3714      	adds	r7, #20
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bc80      	pop	{r7}
 8001d7a:	4770      	bx	lr
 8001d7c:	20000068 	.word	0x20000068
 8001d80:	10624dd3 	.word	0x10624dd3

08001d84 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b082      	sub	sp, #8
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d101      	bne.n	8001d96 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001d92:	2301      	movs	r3, #1
 8001d94:	e041      	b.n	8001e1a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d9c:	b2db      	uxtb	r3, r3
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d106      	bne.n	8001db0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	2200      	movs	r2, #0
 8001da6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001daa:	6878      	ldr	r0, [r7, #4]
 8001dac:	f7ff f834 	bl	8000e18 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2202      	movs	r2, #2
 8001db4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681a      	ldr	r2, [r3, #0]
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	3304      	adds	r3, #4
 8001dc0:	4619      	mov	r1, r3
 8001dc2:	4610      	mov	r0, r2
 8001dc4:	f000 fa6e 	bl	80022a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2201      	movs	r2, #1
 8001dcc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2201      	movs	r2, #1
 8001dd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2201      	movs	r2, #1
 8001ddc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2201      	movs	r2, #1
 8001de4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2201      	movs	r2, #1
 8001dec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2201      	movs	r2, #1
 8001df4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2201      	movs	r2, #1
 8001dfc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2201      	movs	r2, #1
 8001e04:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2201      	movs	r2, #1
 8001e0c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2201      	movs	r2, #1
 8001e14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001e18:	2300      	movs	r3, #0
}
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	3708      	adds	r7, #8
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}
	...

08001e24 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001e24:	b480      	push	{r7}
 8001e26:	b085      	sub	sp, #20
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e32:	b2db      	uxtb	r3, r3
 8001e34:	2b01      	cmp	r3, #1
 8001e36:	d001      	beq.n	8001e3c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001e38:	2301      	movs	r3, #1
 8001e3a:	e035      	b.n	8001ea8 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	2202      	movs	r2, #2
 8001e40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	68da      	ldr	r2, [r3, #12]
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f042 0201 	orr.w	r2, r2, #1
 8001e52:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4a16      	ldr	r2, [pc, #88]	; (8001eb4 <HAL_TIM_Base_Start_IT+0x90>)
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d009      	beq.n	8001e72 <HAL_TIM_Base_Start_IT+0x4e>
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e66:	d004      	beq.n	8001e72 <HAL_TIM_Base_Start_IT+0x4e>
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4a12      	ldr	r2, [pc, #72]	; (8001eb8 <HAL_TIM_Base_Start_IT+0x94>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d111      	bne.n	8001e96 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	689b      	ldr	r3, [r3, #8]
 8001e78:	f003 0307 	and.w	r3, r3, #7
 8001e7c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	2b06      	cmp	r3, #6
 8001e82:	d010      	beq.n	8001ea6 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	681a      	ldr	r2, [r3, #0]
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f042 0201 	orr.w	r2, r2, #1
 8001e92:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e94:	e007      	b.n	8001ea6 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	681a      	ldr	r2, [r3, #0]
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f042 0201 	orr.w	r2, r2, #1
 8001ea4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001ea6:	2300      	movs	r3, #0
}
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	3714      	adds	r7, #20
 8001eac:	46bd      	mov	sp, r7
 8001eae:	bc80      	pop	{r7}
 8001eb0:	4770      	bx	lr
 8001eb2:	bf00      	nop
 8001eb4:	40012c00 	.word	0x40012c00
 8001eb8:	40000400 	.word	0x40000400

08001ebc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b082      	sub	sp, #8
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	691b      	ldr	r3, [r3, #16]
 8001eca:	f003 0302 	and.w	r3, r3, #2
 8001ece:	2b02      	cmp	r3, #2
 8001ed0:	d122      	bne.n	8001f18 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	68db      	ldr	r3, [r3, #12]
 8001ed8:	f003 0302 	and.w	r3, r3, #2
 8001edc:	2b02      	cmp	r3, #2
 8001ede:	d11b      	bne.n	8001f18 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f06f 0202 	mvn.w	r2, #2
 8001ee8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	2201      	movs	r2, #1
 8001eee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	699b      	ldr	r3, [r3, #24]
 8001ef6:	f003 0303 	and.w	r3, r3, #3
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d003      	beq.n	8001f06 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001efe:	6878      	ldr	r0, [r7, #4]
 8001f00:	f000 f9b4 	bl	800226c <HAL_TIM_IC_CaptureCallback>
 8001f04:	e005      	b.n	8001f12 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f06:	6878      	ldr	r0, [r7, #4]
 8001f08:	f000 f9a7 	bl	800225a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f0c:	6878      	ldr	r0, [r7, #4]
 8001f0e:	f000 f9b6 	bl	800227e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	2200      	movs	r2, #0
 8001f16:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	691b      	ldr	r3, [r3, #16]
 8001f1e:	f003 0304 	and.w	r3, r3, #4
 8001f22:	2b04      	cmp	r3, #4
 8001f24:	d122      	bne.n	8001f6c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	68db      	ldr	r3, [r3, #12]
 8001f2c:	f003 0304 	and.w	r3, r3, #4
 8001f30:	2b04      	cmp	r3, #4
 8001f32:	d11b      	bne.n	8001f6c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f06f 0204 	mvn.w	r2, #4
 8001f3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	2202      	movs	r2, #2
 8001f42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	699b      	ldr	r3, [r3, #24]
 8001f4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d003      	beq.n	8001f5a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f52:	6878      	ldr	r0, [r7, #4]
 8001f54:	f000 f98a 	bl	800226c <HAL_TIM_IC_CaptureCallback>
 8001f58:	e005      	b.n	8001f66 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f5a:	6878      	ldr	r0, [r7, #4]
 8001f5c:	f000 f97d 	bl	800225a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f60:	6878      	ldr	r0, [r7, #4]
 8001f62:	f000 f98c 	bl	800227e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	2200      	movs	r2, #0
 8001f6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	691b      	ldr	r3, [r3, #16]
 8001f72:	f003 0308 	and.w	r3, r3, #8
 8001f76:	2b08      	cmp	r3, #8
 8001f78:	d122      	bne.n	8001fc0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	68db      	ldr	r3, [r3, #12]
 8001f80:	f003 0308 	and.w	r3, r3, #8
 8001f84:	2b08      	cmp	r3, #8
 8001f86:	d11b      	bne.n	8001fc0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f06f 0208 	mvn.w	r2, #8
 8001f90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	2204      	movs	r2, #4
 8001f96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	69db      	ldr	r3, [r3, #28]
 8001f9e:	f003 0303 	and.w	r3, r3, #3
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d003      	beq.n	8001fae <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001fa6:	6878      	ldr	r0, [r7, #4]
 8001fa8:	f000 f960 	bl	800226c <HAL_TIM_IC_CaptureCallback>
 8001fac:	e005      	b.n	8001fba <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fae:	6878      	ldr	r0, [r7, #4]
 8001fb0:	f000 f953 	bl	800225a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fb4:	6878      	ldr	r0, [r7, #4]
 8001fb6:	f000 f962 	bl	800227e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	691b      	ldr	r3, [r3, #16]
 8001fc6:	f003 0310 	and.w	r3, r3, #16
 8001fca:	2b10      	cmp	r3, #16
 8001fcc:	d122      	bne.n	8002014 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	68db      	ldr	r3, [r3, #12]
 8001fd4:	f003 0310 	and.w	r3, r3, #16
 8001fd8:	2b10      	cmp	r3, #16
 8001fda:	d11b      	bne.n	8002014 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f06f 0210 	mvn.w	r2, #16
 8001fe4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2208      	movs	r2, #8
 8001fea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	69db      	ldr	r3, [r3, #28]
 8001ff2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d003      	beq.n	8002002 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ffa:	6878      	ldr	r0, [r7, #4]
 8001ffc:	f000 f936 	bl	800226c <HAL_TIM_IC_CaptureCallback>
 8002000:	e005      	b.n	800200e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002002:	6878      	ldr	r0, [r7, #4]
 8002004:	f000 f929 	bl	800225a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002008:	6878      	ldr	r0, [r7, #4]
 800200a:	f000 f938 	bl	800227e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	2200      	movs	r2, #0
 8002012:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	691b      	ldr	r3, [r3, #16]
 800201a:	f003 0301 	and.w	r3, r3, #1
 800201e:	2b01      	cmp	r3, #1
 8002020:	d10e      	bne.n	8002040 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	68db      	ldr	r3, [r3, #12]
 8002028:	f003 0301 	and.w	r3, r3, #1
 800202c:	2b01      	cmp	r3, #1
 800202e:	d107      	bne.n	8002040 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f06f 0201 	mvn.w	r2, #1
 8002038:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800203a:	6878      	ldr	r0, [r7, #4]
 800203c:	f7fe fe58 	bl	8000cf0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	691b      	ldr	r3, [r3, #16]
 8002046:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800204a:	2b80      	cmp	r3, #128	; 0x80
 800204c:	d10e      	bne.n	800206c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	68db      	ldr	r3, [r3, #12]
 8002054:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002058:	2b80      	cmp	r3, #128	; 0x80
 800205a:	d107      	bne.n	800206c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002064:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002066:	6878      	ldr	r0, [r7, #4]
 8002068:	f000 fa6b 	bl	8002542 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	691b      	ldr	r3, [r3, #16]
 8002072:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002076:	2b40      	cmp	r3, #64	; 0x40
 8002078:	d10e      	bne.n	8002098 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	68db      	ldr	r3, [r3, #12]
 8002080:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002084:	2b40      	cmp	r3, #64	; 0x40
 8002086:	d107      	bne.n	8002098 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002090:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002092:	6878      	ldr	r0, [r7, #4]
 8002094:	f000 f8fc 	bl	8002290 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	691b      	ldr	r3, [r3, #16]
 800209e:	f003 0320 	and.w	r3, r3, #32
 80020a2:	2b20      	cmp	r3, #32
 80020a4:	d10e      	bne.n	80020c4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	68db      	ldr	r3, [r3, #12]
 80020ac:	f003 0320 	and.w	r3, r3, #32
 80020b0:	2b20      	cmp	r3, #32
 80020b2:	d107      	bne.n	80020c4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f06f 0220 	mvn.w	r2, #32
 80020bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80020be:	6878      	ldr	r0, [r7, #4]
 80020c0:	f000 fa36 	bl	8002530 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80020c4:	bf00      	nop
 80020c6:	3708      	adds	r7, #8
 80020c8:	46bd      	mov	sp, r7
 80020ca:	bd80      	pop	{r7, pc}

080020cc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b084      	sub	sp, #16
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
 80020d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80020d6:	2300      	movs	r3, #0
 80020d8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80020e0:	2b01      	cmp	r3, #1
 80020e2:	d101      	bne.n	80020e8 <HAL_TIM_ConfigClockSource+0x1c>
 80020e4:	2302      	movs	r3, #2
 80020e6:	e0b4      	b.n	8002252 <HAL_TIM_ConfigClockSource+0x186>
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2201      	movs	r2, #1
 80020ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2202      	movs	r2, #2
 80020f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	689b      	ldr	r3, [r3, #8]
 80020fe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002100:	68bb      	ldr	r3, [r7, #8]
 8002102:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002106:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002108:	68bb      	ldr	r3, [r7, #8]
 800210a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800210e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	68ba      	ldr	r2, [r7, #8]
 8002116:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002120:	d03e      	beq.n	80021a0 <HAL_TIM_ConfigClockSource+0xd4>
 8002122:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002126:	f200 8087 	bhi.w	8002238 <HAL_TIM_ConfigClockSource+0x16c>
 800212a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800212e:	f000 8086 	beq.w	800223e <HAL_TIM_ConfigClockSource+0x172>
 8002132:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002136:	d87f      	bhi.n	8002238 <HAL_TIM_ConfigClockSource+0x16c>
 8002138:	2b70      	cmp	r3, #112	; 0x70
 800213a:	d01a      	beq.n	8002172 <HAL_TIM_ConfigClockSource+0xa6>
 800213c:	2b70      	cmp	r3, #112	; 0x70
 800213e:	d87b      	bhi.n	8002238 <HAL_TIM_ConfigClockSource+0x16c>
 8002140:	2b60      	cmp	r3, #96	; 0x60
 8002142:	d050      	beq.n	80021e6 <HAL_TIM_ConfigClockSource+0x11a>
 8002144:	2b60      	cmp	r3, #96	; 0x60
 8002146:	d877      	bhi.n	8002238 <HAL_TIM_ConfigClockSource+0x16c>
 8002148:	2b50      	cmp	r3, #80	; 0x50
 800214a:	d03c      	beq.n	80021c6 <HAL_TIM_ConfigClockSource+0xfa>
 800214c:	2b50      	cmp	r3, #80	; 0x50
 800214e:	d873      	bhi.n	8002238 <HAL_TIM_ConfigClockSource+0x16c>
 8002150:	2b40      	cmp	r3, #64	; 0x40
 8002152:	d058      	beq.n	8002206 <HAL_TIM_ConfigClockSource+0x13a>
 8002154:	2b40      	cmp	r3, #64	; 0x40
 8002156:	d86f      	bhi.n	8002238 <HAL_TIM_ConfigClockSource+0x16c>
 8002158:	2b30      	cmp	r3, #48	; 0x30
 800215a:	d064      	beq.n	8002226 <HAL_TIM_ConfigClockSource+0x15a>
 800215c:	2b30      	cmp	r3, #48	; 0x30
 800215e:	d86b      	bhi.n	8002238 <HAL_TIM_ConfigClockSource+0x16c>
 8002160:	2b20      	cmp	r3, #32
 8002162:	d060      	beq.n	8002226 <HAL_TIM_ConfigClockSource+0x15a>
 8002164:	2b20      	cmp	r3, #32
 8002166:	d867      	bhi.n	8002238 <HAL_TIM_ConfigClockSource+0x16c>
 8002168:	2b00      	cmp	r3, #0
 800216a:	d05c      	beq.n	8002226 <HAL_TIM_ConfigClockSource+0x15a>
 800216c:	2b10      	cmp	r3, #16
 800216e:	d05a      	beq.n	8002226 <HAL_TIM_ConfigClockSource+0x15a>
 8002170:	e062      	b.n	8002238 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6818      	ldr	r0, [r3, #0]
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	6899      	ldr	r1, [r3, #8]
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	685a      	ldr	r2, [r3, #4]
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	68db      	ldr	r3, [r3, #12]
 8002182:	f000 f95e 	bl	8002442 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	689b      	ldr	r3, [r3, #8]
 800218c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800218e:	68bb      	ldr	r3, [r7, #8]
 8002190:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002194:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	68ba      	ldr	r2, [r7, #8]
 800219c:	609a      	str	r2, [r3, #8]
      break;
 800219e:	e04f      	b.n	8002240 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6818      	ldr	r0, [r3, #0]
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	6899      	ldr	r1, [r3, #8]
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	685a      	ldr	r2, [r3, #4]
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	68db      	ldr	r3, [r3, #12]
 80021b0:	f000 f947 	bl	8002442 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	689a      	ldr	r2, [r3, #8]
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80021c2:	609a      	str	r2, [r3, #8]
      break;
 80021c4:	e03c      	b.n	8002240 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6818      	ldr	r0, [r3, #0]
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	6859      	ldr	r1, [r3, #4]
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	68db      	ldr	r3, [r3, #12]
 80021d2:	461a      	mov	r2, r3
 80021d4:	f000 f8be 	bl	8002354 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	2150      	movs	r1, #80	; 0x50
 80021de:	4618      	mov	r0, r3
 80021e0:	f000 f915 	bl	800240e <TIM_ITRx_SetConfig>
      break;
 80021e4:	e02c      	b.n	8002240 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6818      	ldr	r0, [r3, #0]
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	6859      	ldr	r1, [r3, #4]
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	68db      	ldr	r3, [r3, #12]
 80021f2:	461a      	mov	r2, r3
 80021f4:	f000 f8dc 	bl	80023b0 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	2160      	movs	r1, #96	; 0x60
 80021fe:	4618      	mov	r0, r3
 8002200:	f000 f905 	bl	800240e <TIM_ITRx_SetConfig>
      break;
 8002204:	e01c      	b.n	8002240 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6818      	ldr	r0, [r3, #0]
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	6859      	ldr	r1, [r3, #4]
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	68db      	ldr	r3, [r3, #12]
 8002212:	461a      	mov	r2, r3
 8002214:	f000 f89e 	bl	8002354 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	2140      	movs	r1, #64	; 0x40
 800221e:	4618      	mov	r0, r3
 8002220:	f000 f8f5 	bl	800240e <TIM_ITRx_SetConfig>
      break;
 8002224:	e00c      	b.n	8002240 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681a      	ldr	r2, [r3, #0]
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	4619      	mov	r1, r3
 8002230:	4610      	mov	r0, r2
 8002232:	f000 f8ec 	bl	800240e <TIM_ITRx_SetConfig>
      break;
 8002236:	e003      	b.n	8002240 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002238:	2301      	movs	r3, #1
 800223a:	73fb      	strb	r3, [r7, #15]
      break;
 800223c:	e000      	b.n	8002240 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800223e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2201      	movs	r2, #1
 8002244:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2200      	movs	r2, #0
 800224c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002250:	7bfb      	ldrb	r3, [r7, #15]
}
 8002252:	4618      	mov	r0, r3
 8002254:	3710      	adds	r7, #16
 8002256:	46bd      	mov	sp, r7
 8002258:	bd80      	pop	{r7, pc}

0800225a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800225a:	b480      	push	{r7}
 800225c:	b083      	sub	sp, #12
 800225e:	af00      	add	r7, sp, #0
 8002260:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002262:	bf00      	nop
 8002264:	370c      	adds	r7, #12
 8002266:	46bd      	mov	sp, r7
 8002268:	bc80      	pop	{r7}
 800226a:	4770      	bx	lr

0800226c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800226c:	b480      	push	{r7}
 800226e:	b083      	sub	sp, #12
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002274:	bf00      	nop
 8002276:	370c      	adds	r7, #12
 8002278:	46bd      	mov	sp, r7
 800227a:	bc80      	pop	{r7}
 800227c:	4770      	bx	lr

0800227e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800227e:	b480      	push	{r7}
 8002280:	b083      	sub	sp, #12
 8002282:	af00      	add	r7, sp, #0
 8002284:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002286:	bf00      	nop
 8002288:	370c      	adds	r7, #12
 800228a:	46bd      	mov	sp, r7
 800228c:	bc80      	pop	{r7}
 800228e:	4770      	bx	lr

08002290 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002290:	b480      	push	{r7}
 8002292:	b083      	sub	sp, #12
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002298:	bf00      	nop
 800229a:	370c      	adds	r7, #12
 800229c:	46bd      	mov	sp, r7
 800229e:	bc80      	pop	{r7}
 80022a0:	4770      	bx	lr
	...

080022a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80022a4:	b480      	push	{r7}
 80022a6:	b085      	sub	sp, #20
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
 80022ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	4a25      	ldr	r2, [pc, #148]	; (800234c <TIM_Base_SetConfig+0xa8>)
 80022b8:	4293      	cmp	r3, r2
 80022ba:	d007      	beq.n	80022cc <TIM_Base_SetConfig+0x28>
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022c2:	d003      	beq.n	80022cc <TIM_Base_SetConfig+0x28>
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	4a22      	ldr	r2, [pc, #136]	; (8002350 <TIM_Base_SetConfig+0xac>)
 80022c8:	4293      	cmp	r3, r2
 80022ca:	d108      	bne.n	80022de <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80022d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	68fa      	ldr	r2, [r7, #12]
 80022da:	4313      	orrs	r3, r2
 80022dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	4a1a      	ldr	r2, [pc, #104]	; (800234c <TIM_Base_SetConfig+0xa8>)
 80022e2:	4293      	cmp	r3, r2
 80022e4:	d007      	beq.n	80022f6 <TIM_Base_SetConfig+0x52>
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022ec:	d003      	beq.n	80022f6 <TIM_Base_SetConfig+0x52>
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	4a17      	ldr	r2, [pc, #92]	; (8002350 <TIM_Base_SetConfig+0xac>)
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d108      	bne.n	8002308 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80022fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	68db      	ldr	r3, [r3, #12]
 8002302:	68fa      	ldr	r2, [r7, #12]
 8002304:	4313      	orrs	r3, r2
 8002306:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	695b      	ldr	r3, [r3, #20]
 8002312:	4313      	orrs	r3, r2
 8002314:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	68fa      	ldr	r2, [r7, #12]
 800231a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	689a      	ldr	r2, [r3, #8]
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	681a      	ldr	r2, [r3, #0]
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	4a07      	ldr	r2, [pc, #28]	; (800234c <TIM_Base_SetConfig+0xa8>)
 8002330:	4293      	cmp	r3, r2
 8002332:	d103      	bne.n	800233c <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	691a      	ldr	r2, [r3, #16]
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2201      	movs	r2, #1
 8002340:	615a      	str	r2, [r3, #20]
}
 8002342:	bf00      	nop
 8002344:	3714      	adds	r7, #20
 8002346:	46bd      	mov	sp, r7
 8002348:	bc80      	pop	{r7}
 800234a:	4770      	bx	lr
 800234c:	40012c00 	.word	0x40012c00
 8002350:	40000400 	.word	0x40000400

08002354 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002354:	b480      	push	{r7}
 8002356:	b087      	sub	sp, #28
 8002358:	af00      	add	r7, sp, #0
 800235a:	60f8      	str	r0, [r7, #12]
 800235c:	60b9      	str	r1, [r7, #8]
 800235e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	6a1b      	ldr	r3, [r3, #32]
 8002364:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	6a1b      	ldr	r3, [r3, #32]
 800236a:	f023 0201 	bic.w	r2, r3, #1
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	699b      	ldr	r3, [r3, #24]
 8002376:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002378:	693b      	ldr	r3, [r7, #16]
 800237a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800237e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	011b      	lsls	r3, r3, #4
 8002384:	693a      	ldr	r2, [r7, #16]
 8002386:	4313      	orrs	r3, r2
 8002388:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800238a:	697b      	ldr	r3, [r7, #20]
 800238c:	f023 030a 	bic.w	r3, r3, #10
 8002390:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002392:	697a      	ldr	r2, [r7, #20]
 8002394:	68bb      	ldr	r3, [r7, #8]
 8002396:	4313      	orrs	r3, r2
 8002398:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	693a      	ldr	r2, [r7, #16]
 800239e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	697a      	ldr	r2, [r7, #20]
 80023a4:	621a      	str	r2, [r3, #32]
}
 80023a6:	bf00      	nop
 80023a8:	371c      	adds	r7, #28
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bc80      	pop	{r7}
 80023ae:	4770      	bx	lr

080023b0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80023b0:	b480      	push	{r7}
 80023b2:	b087      	sub	sp, #28
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	60f8      	str	r0, [r7, #12]
 80023b8:	60b9      	str	r1, [r7, #8]
 80023ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	6a1b      	ldr	r3, [r3, #32]
 80023c0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	6a1b      	ldr	r3, [r3, #32]
 80023c6:	f023 0210 	bic.w	r2, r3, #16
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	699b      	ldr	r3, [r3, #24]
 80023d2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80023d4:	693b      	ldr	r3, [r7, #16]
 80023d6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80023da:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	031b      	lsls	r3, r3, #12
 80023e0:	693a      	ldr	r2, [r7, #16]
 80023e2:	4313      	orrs	r3, r2
 80023e4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80023e6:	697b      	ldr	r3, [r7, #20]
 80023e8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80023ec:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80023ee:	68bb      	ldr	r3, [r7, #8]
 80023f0:	011b      	lsls	r3, r3, #4
 80023f2:	697a      	ldr	r2, [r7, #20]
 80023f4:	4313      	orrs	r3, r2
 80023f6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	693a      	ldr	r2, [r7, #16]
 80023fc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	697a      	ldr	r2, [r7, #20]
 8002402:	621a      	str	r2, [r3, #32]
}
 8002404:	bf00      	nop
 8002406:	371c      	adds	r7, #28
 8002408:	46bd      	mov	sp, r7
 800240a:	bc80      	pop	{r7}
 800240c:	4770      	bx	lr

0800240e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800240e:	b480      	push	{r7}
 8002410:	b085      	sub	sp, #20
 8002412:	af00      	add	r7, sp, #0
 8002414:	6078      	str	r0, [r7, #4]
 8002416:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	689b      	ldr	r3, [r3, #8]
 800241c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002424:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002426:	683a      	ldr	r2, [r7, #0]
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	4313      	orrs	r3, r2
 800242c:	f043 0307 	orr.w	r3, r3, #7
 8002430:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	68fa      	ldr	r2, [r7, #12]
 8002436:	609a      	str	r2, [r3, #8]
}
 8002438:	bf00      	nop
 800243a:	3714      	adds	r7, #20
 800243c:	46bd      	mov	sp, r7
 800243e:	bc80      	pop	{r7}
 8002440:	4770      	bx	lr

08002442 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002442:	b480      	push	{r7}
 8002444:	b087      	sub	sp, #28
 8002446:	af00      	add	r7, sp, #0
 8002448:	60f8      	str	r0, [r7, #12]
 800244a:	60b9      	str	r1, [r7, #8]
 800244c:	607a      	str	r2, [r7, #4]
 800244e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	689b      	ldr	r3, [r3, #8]
 8002454:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002456:	697b      	ldr	r3, [r7, #20]
 8002458:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800245c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	021a      	lsls	r2, r3, #8
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	431a      	orrs	r2, r3
 8002466:	68bb      	ldr	r3, [r7, #8]
 8002468:	4313      	orrs	r3, r2
 800246a:	697a      	ldr	r2, [r7, #20]
 800246c:	4313      	orrs	r3, r2
 800246e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	697a      	ldr	r2, [r7, #20]
 8002474:	609a      	str	r2, [r3, #8]
}
 8002476:	bf00      	nop
 8002478:	371c      	adds	r7, #28
 800247a:	46bd      	mov	sp, r7
 800247c:	bc80      	pop	{r7}
 800247e:	4770      	bx	lr

08002480 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002480:	b480      	push	{r7}
 8002482:	b085      	sub	sp, #20
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
 8002488:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002490:	2b01      	cmp	r3, #1
 8002492:	d101      	bne.n	8002498 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002494:	2302      	movs	r3, #2
 8002496:	e041      	b.n	800251c <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2201      	movs	r2, #1
 800249c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2202      	movs	r2, #2
 80024a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	685b      	ldr	r3, [r3, #4]
 80024ae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	689b      	ldr	r3, [r3, #8]
 80024b6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024be:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	68fa      	ldr	r2, [r7, #12]
 80024c6:	4313      	orrs	r3, r2
 80024c8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	68fa      	ldr	r2, [r7, #12]
 80024d0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	4a14      	ldr	r2, [pc, #80]	; (8002528 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 80024d8:	4293      	cmp	r3, r2
 80024da:	d009      	beq.n	80024f0 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024e4:	d004      	beq.n	80024f0 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	4a10      	ldr	r2, [pc, #64]	; (800252c <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 80024ec:	4293      	cmp	r3, r2
 80024ee:	d10c      	bne.n	800250a <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80024f0:	68bb      	ldr	r3, [r7, #8]
 80024f2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80024f6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	68ba      	ldr	r2, [r7, #8]
 80024fe:	4313      	orrs	r3, r2
 8002500:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	68ba      	ldr	r2, [r7, #8]
 8002508:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	2201      	movs	r2, #1
 800250e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	2200      	movs	r2, #0
 8002516:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800251a:	2300      	movs	r3, #0
}
 800251c:	4618      	mov	r0, r3
 800251e:	3714      	adds	r7, #20
 8002520:	46bd      	mov	sp, r7
 8002522:	bc80      	pop	{r7}
 8002524:	4770      	bx	lr
 8002526:	bf00      	nop
 8002528:	40012c00 	.word	0x40012c00
 800252c:	40000400 	.word	0x40000400

08002530 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002530:	b480      	push	{r7}
 8002532:	b083      	sub	sp, #12
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002538:	bf00      	nop
 800253a:	370c      	adds	r7, #12
 800253c:	46bd      	mov	sp, r7
 800253e:	bc80      	pop	{r7}
 8002540:	4770      	bx	lr

08002542 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002542:	b480      	push	{r7}
 8002544:	b083      	sub	sp, #12
 8002546:	af00      	add	r7, sp, #0
 8002548:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800254a:	bf00      	nop
 800254c:	370c      	adds	r7, #12
 800254e:	46bd      	mov	sp, r7
 8002550:	bc80      	pop	{r7}
 8002552:	4770      	bx	lr

08002554 <__libc_init_array>:
 8002554:	b570      	push	{r4, r5, r6, lr}
 8002556:	2600      	movs	r6, #0
 8002558:	4d0c      	ldr	r5, [pc, #48]	; (800258c <__libc_init_array+0x38>)
 800255a:	4c0d      	ldr	r4, [pc, #52]	; (8002590 <__libc_init_array+0x3c>)
 800255c:	1b64      	subs	r4, r4, r5
 800255e:	10a4      	asrs	r4, r4, #2
 8002560:	42a6      	cmp	r6, r4
 8002562:	d109      	bne.n	8002578 <__libc_init_array+0x24>
 8002564:	f000 f822 	bl	80025ac <_init>
 8002568:	2600      	movs	r6, #0
 800256a:	4d0a      	ldr	r5, [pc, #40]	; (8002594 <__libc_init_array+0x40>)
 800256c:	4c0a      	ldr	r4, [pc, #40]	; (8002598 <__libc_init_array+0x44>)
 800256e:	1b64      	subs	r4, r4, r5
 8002570:	10a4      	asrs	r4, r4, #2
 8002572:	42a6      	cmp	r6, r4
 8002574:	d105      	bne.n	8002582 <__libc_init_array+0x2e>
 8002576:	bd70      	pop	{r4, r5, r6, pc}
 8002578:	f855 3b04 	ldr.w	r3, [r5], #4
 800257c:	4798      	blx	r3
 800257e:	3601      	adds	r6, #1
 8002580:	e7ee      	b.n	8002560 <__libc_init_array+0xc>
 8002582:	f855 3b04 	ldr.w	r3, [r5], #4
 8002586:	4798      	blx	r3
 8002588:	3601      	adds	r6, #1
 800258a:	e7f2      	b.n	8002572 <__libc_init_array+0x1e>
 800258c:	080025f0 	.word	0x080025f0
 8002590:	080025f0 	.word	0x080025f0
 8002594:	080025f0 	.word	0x080025f0
 8002598:	080025f4 	.word	0x080025f4

0800259c <memset>:
 800259c:	4603      	mov	r3, r0
 800259e:	4402      	add	r2, r0
 80025a0:	4293      	cmp	r3, r2
 80025a2:	d100      	bne.n	80025a6 <memset+0xa>
 80025a4:	4770      	bx	lr
 80025a6:	f803 1b01 	strb.w	r1, [r3], #1
 80025aa:	e7f9      	b.n	80025a0 <memset+0x4>

080025ac <_init>:
 80025ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025ae:	bf00      	nop
 80025b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80025b2:	bc08      	pop	{r3}
 80025b4:	469e      	mov	lr, r3
 80025b6:	4770      	bx	lr

080025b8 <_fini>:
 80025b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025ba:	bf00      	nop
 80025bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80025be:	bc08      	pop	{r3}
 80025c0:	469e      	mov	lr, r3
 80025c2:	4770      	bx	lr
