
lab3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002b0c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08002c18  08002c18  00012c18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002c44  08002c44  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  08002c44  08002c44  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002c44  08002c44  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002c44  08002c44  00012c44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002c48  08002c48  00012c48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08002c4c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000013c  2000005c  08002ca8  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000198  08002ca8  00020198  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009a7d  00000000  00000000  00020085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c59  00000000  00000000  00029b02  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a50  00000000  00000000  0002b760  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000940  00000000  00000000  0002c1b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016b22  00000000  00000000  0002caf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b490  00000000  00000000  00043612  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082455  00000000  00000000  0004eaa2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d0ef7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000289c  00000000  00000000  000d0f4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000005c 	.word	0x2000005c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002c00 	.word	0x08002c00

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000060 	.word	0x20000060
 8000148:	08002c00 	.word	0x08002c00

0800014c <isButtonPressed>:
int normal_flag[NUM_OF_BUTTONS] = {0};
int long_flag[NUM_OF_BUTTONS] = {0};

int TimeOutForKeyPress[NUM_OF_BUTTONS] = {0};

int isButtonPressed(int index){
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	if (normal_flag[index] == 1){
 8000154:	4a09      	ldr	r2, [pc, #36]	; (800017c <isButtonPressed+0x30>)
 8000156:	687b      	ldr	r3, [r7, #4]
 8000158:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800015c:	2b01      	cmp	r3, #1
 800015e:	d106      	bne.n	800016e <isButtonPressed+0x22>
		normal_flag[index] = 0;
 8000160:	4a06      	ldr	r2, [pc, #24]	; (800017c <isButtonPressed+0x30>)
 8000162:	687b      	ldr	r3, [r7, #4]
 8000164:	2100      	movs	r1, #0
 8000166:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 800016a:	2301      	movs	r3, #1
 800016c:	e000      	b.n	8000170 <isButtonPressed+0x24>
	}
	return 0;
 800016e:	2300      	movs	r3, #0
}
 8000170:	4618      	mov	r0, r3
 8000172:	370c      	adds	r7, #12
 8000174:	46bd      	mov	sp, r7
 8000176:	bc80      	pop	{r7}
 8000178:	4770      	bx	lr
 800017a:	bf00      	nop
 800017c:	20000078 	.word	0x20000078

08000180 <subKeyProcess>:

void subKeyProcess(int index){
 8000180:	b480      	push	{r7}
 8000182:	b083      	sub	sp, #12
 8000184:	af00      	add	r7, sp, #0
 8000186:	6078      	str	r0, [r7, #4]
	normal_flag[index] = 1;
 8000188:	4a04      	ldr	r2, [pc, #16]	; (800019c <subKeyProcess+0x1c>)
 800018a:	687b      	ldr	r3, [r7, #4]
 800018c:	2101      	movs	r1, #1
 800018e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8000192:	bf00      	nop
 8000194:	370c      	adds	r7, #12
 8000196:	46bd      	mov	sp, r7
 8000198:	bc80      	pop	{r7}
 800019a:	4770      	bx	lr
 800019c:	20000078 	.word	0x20000078

080001a0 <getKeyInput>:

void getKeyInput() {
 80001a0:	b580      	push	{r7, lr}
 80001a2:	b082      	sub	sp, #8
 80001a4:	af00      	add	r7, sp, #0
	for (int i = 0; i < NUM_OF_BUTTONS; i++) {
 80001a6:	2300      	movs	r3, #0
 80001a8:	607b      	str	r3, [r7, #4]
 80001aa:	e0a6      	b.n	80002fa <getKeyInput+0x15a>
		KeyReg0[i] = KeyReg1[i];
 80001ac:	4a57      	ldr	r2, [pc, #348]	; (800030c <getKeyInput+0x16c>)
 80001ae:	687b      	ldr	r3, [r7, #4]
 80001b0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001b4:	4956      	ldr	r1, [pc, #344]	; (8000310 <getKeyInput+0x170>)
 80001b6:	687b      	ldr	r3, [r7, #4]
 80001b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		KeyReg1[i] = KeyReg2[i];
 80001bc:	4a55      	ldr	r2, [pc, #340]	; (8000314 <getKeyInput+0x174>)
 80001be:	687b      	ldr	r3, [r7, #4]
 80001c0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001c4:	4951      	ldr	r1, [pc, #324]	; (800030c <getKeyInput+0x16c>)
 80001c6:	687b      	ldr	r3, [r7, #4]
 80001c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		// Read signals from buttons
		if (i == 0) {
 80001cc:	687b      	ldr	r3, [r7, #4]
 80001ce:	2b00      	cmp	r3, #0
 80001d0:	d10a      	bne.n	80001e8 <getKeyInput+0x48>
			KeyReg2[i] = HAL_GPIO_ReadPin(BTN1_GPIO_Port, BTN1_Pin);
 80001d2:	2108      	movs	r1, #8
 80001d4:	4850      	ldr	r0, [pc, #320]	; (8000318 <getKeyInput+0x178>)
 80001d6:	f001 fc8d 	bl	8001af4 <HAL_GPIO_ReadPin>
 80001da:	4603      	mov	r3, r0
 80001dc:	4619      	mov	r1, r3
 80001de:	4a4d      	ldr	r2, [pc, #308]	; (8000314 <getKeyInput+0x174>)
 80001e0:	687b      	ldr	r3, [r7, #4]
 80001e2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 80001e6:	e01a      	b.n	800021e <getKeyInput+0x7e>
		}
		else if (i == 1) {
 80001e8:	687b      	ldr	r3, [r7, #4]
 80001ea:	2b01      	cmp	r3, #1
 80001ec:	d10a      	bne.n	8000204 <getKeyInput+0x64>
			KeyReg2[i] = HAL_GPIO_ReadPin(BTN2_GPIO_Port, BTN2_Pin);
 80001ee:	2110      	movs	r1, #16
 80001f0:	4849      	ldr	r0, [pc, #292]	; (8000318 <getKeyInput+0x178>)
 80001f2:	f001 fc7f 	bl	8001af4 <HAL_GPIO_ReadPin>
 80001f6:	4603      	mov	r3, r0
 80001f8:	4619      	mov	r1, r3
 80001fa:	4a46      	ldr	r2, [pc, #280]	; (8000314 <getKeyInput+0x174>)
 80001fc:	687b      	ldr	r3, [r7, #4]
 80001fe:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000202:	e00c      	b.n	800021e <getKeyInput+0x7e>
		}
		else if (i == 2) {
 8000204:	687b      	ldr	r3, [r7, #4]
 8000206:	2b02      	cmp	r3, #2
 8000208:	d109      	bne.n	800021e <getKeyInput+0x7e>
			KeyReg2[i] = HAL_GPIO_ReadPin(BTN3_GPIO_Port, BTN3_Pin);
 800020a:	2120      	movs	r1, #32
 800020c:	4842      	ldr	r0, [pc, #264]	; (8000318 <getKeyInput+0x178>)
 800020e:	f001 fc71 	bl	8001af4 <HAL_GPIO_ReadPin>
 8000212:	4603      	mov	r3, r0
 8000214:	4619      	mov	r1, r3
 8000216:	4a3f      	ldr	r2, [pc, #252]	; (8000314 <getKeyInput+0x174>)
 8000218:	687b      	ldr	r3, [r7, #4]
 800021a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		}

		if ((KeyReg1[i] == KeyReg0[i]) && (KeyReg1[i] == KeyReg2[i])){
 800021e:	4a3b      	ldr	r2, [pc, #236]	; (800030c <getKeyInput+0x16c>)
 8000220:	687b      	ldr	r3, [r7, #4]
 8000222:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000226:	493a      	ldr	r1, [pc, #232]	; (8000310 <getKeyInput+0x170>)
 8000228:	687b      	ldr	r3, [r7, #4]
 800022a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800022e:	429a      	cmp	r2, r3
 8000230:	d159      	bne.n	80002e6 <getKeyInput+0x146>
 8000232:	4a36      	ldr	r2, [pc, #216]	; (800030c <getKeyInput+0x16c>)
 8000234:	687b      	ldr	r3, [r7, #4]
 8000236:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800023a:	4936      	ldr	r1, [pc, #216]	; (8000314 <getKeyInput+0x174>)
 800023c:	687b      	ldr	r3, [r7, #4]
 800023e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000242:	429a      	cmp	r2, r3
 8000244:	d14f      	bne.n	80002e6 <getKeyInput+0x146>
			if (KeyReg3[i] != KeyReg2[i]){
 8000246:	4a35      	ldr	r2, [pc, #212]	; (800031c <getKeyInput+0x17c>)
 8000248:	687b      	ldr	r3, [r7, #4]
 800024a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800024e:	4931      	ldr	r1, [pc, #196]	; (8000314 <getKeyInput+0x174>)
 8000250:	687b      	ldr	r3, [r7, #4]
 8000252:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000256:	429a      	cmp	r2, r3
 8000258:	d02b      	beq.n	80002b2 <getKeyInput+0x112>
				KeyReg3[i] = KeyReg2[i];
 800025a:	4a2e      	ldr	r2, [pc, #184]	; (8000314 <getKeyInput+0x174>)
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000262:	492e      	ldr	r1, [pc, #184]	; (800031c <getKeyInput+0x17c>)
 8000264:	687b      	ldr	r3, [r7, #4]
 8000266:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if (KeyReg2[i] == PRESSED_STATE){
 800026a:	4a2a      	ldr	r2, [pc, #168]	; (8000314 <getKeyInput+0x174>)
 800026c:	687b      	ldr	r3, [r7, #4]
 800026e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000272:	2b00      	cmp	r3, #0
 8000274:	d13d      	bne.n	80002f2 <getKeyInput+0x152>
					subKeyProcess(i);	// Set timer_flag[i] = 1;
 8000276:	6878      	ldr	r0, [r7, #4]
 8000278:	f7ff ff82 	bl	8000180 <subKeyProcess>
					if (long_flag[i] == 0) {
 800027c:	4a28      	ldr	r2, [pc, #160]	; (8000320 <getKeyInput+0x180>)
 800027e:	687b      	ldr	r3, [r7, #4]
 8000280:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000284:	2b00      	cmp	r3, #0
 8000286:	d10a      	bne.n	800029e <getKeyInput+0xfe>
						TimeOutForKeyPress[i] = 2000 / TIME_CYCLE;
 8000288:	4b26      	ldr	r3, [pc, #152]	; (8000324 <getKeyInput+0x184>)
 800028a:	681b      	ldr	r3, [r3, #0]
 800028c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000290:	fb92 f2f3 	sdiv	r2, r2, r3
 8000294:	4924      	ldr	r1, [pc, #144]	; (8000328 <getKeyInput+0x188>)
 8000296:	687b      	ldr	r3, [r7, #4]
 8000298:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if (KeyReg3[i] != KeyReg2[i]){
 800029c:	e029      	b.n	80002f2 <getKeyInput+0x152>
					}
					else {
						TimeOutForKeyPress[i] = 250 / TIME_CYCLE;
 800029e:	4b21      	ldr	r3, [pc, #132]	; (8000324 <getKeyInput+0x184>)
 80002a0:	681b      	ldr	r3, [r3, #0]
 80002a2:	22fa      	movs	r2, #250	; 0xfa
 80002a4:	fb92 f2f3 	sdiv	r2, r2, r3
 80002a8:	491f      	ldr	r1, [pc, #124]	; (8000328 <getKeyInput+0x188>)
 80002aa:	687b      	ldr	r3, [r7, #4]
 80002ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if (KeyReg3[i] != KeyReg2[i]){
 80002b0:	e01f      	b.n	80002f2 <getKeyInput+0x152>
					}
				}
			} else {
				TimeOutForKeyPress[i]--;
 80002b2:	4a1d      	ldr	r2, [pc, #116]	; (8000328 <getKeyInput+0x188>)
 80002b4:	687b      	ldr	r3, [r7, #4]
 80002b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002ba:	1e5a      	subs	r2, r3, #1
 80002bc:	491a      	ldr	r1, [pc, #104]	; (8000328 <getKeyInput+0x188>)
 80002be:	687b      	ldr	r3, [r7, #4]
 80002c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if (TimeOutForKeyPress[i] == 0){
 80002c4:	4a18      	ldr	r2, [pc, #96]	; (8000328 <getKeyInput+0x188>)
 80002c6:	687b      	ldr	r3, [r7, #4]
 80002c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d110      	bne.n	80002f2 <getKeyInput+0x152>
					KeyReg3[i] = NORMAL_STATE;
 80002d0:	4a12      	ldr	r2, [pc, #72]	; (800031c <getKeyInput+0x17c>)
 80002d2:	687b      	ldr	r3, [r7, #4]
 80002d4:	2101      	movs	r1, #1
 80002d6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					long_flag[i] = 1;
 80002da:	4a11      	ldr	r2, [pc, #68]	; (8000320 <getKeyInput+0x180>)
 80002dc:	687b      	ldr	r3, [r7, #4]
 80002de:	2101      	movs	r1, #1
 80002e0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			if (KeyReg3[i] != KeyReg2[i]){
 80002e4:	e005      	b.n	80002f2 <getKeyInput+0x152>
				}
			}
		}
		else {
			long_flag[i] = 0;
 80002e6:	4a0e      	ldr	r2, [pc, #56]	; (8000320 <getKeyInput+0x180>)
 80002e8:	687b      	ldr	r3, [r7, #4]
 80002ea:	2100      	movs	r1, #0
 80002ec:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 80002f0:	e000      	b.n	80002f4 <getKeyInput+0x154>
			if (KeyReg3[i] != KeyReg2[i]){
 80002f2:	bf00      	nop
	for (int i = 0; i < NUM_OF_BUTTONS; i++) {
 80002f4:	687b      	ldr	r3, [r7, #4]
 80002f6:	3301      	adds	r3, #1
 80002f8:	607b      	str	r3, [r7, #4]
 80002fa:	687b      	ldr	r3, [r7, #4]
 80002fc:	2b02      	cmp	r3, #2
 80002fe:	f77f af55 	ble.w	80001ac <getKeyInput+0xc>
		}
	}
}
 8000302:	bf00      	nop
 8000304:	bf00      	nop
 8000306:	3708      	adds	r7, #8
 8000308:	46bd      	mov	sp, r7
 800030a:	bd80      	pop	{r7, pc}
 800030c:	20000010 	.word	0x20000010
 8000310:	20000004 	.word	0x20000004
 8000314:	2000001c 	.word	0x2000001c
 8000318:	40010800 	.word	0x40010800
 800031c:	20000028 	.word	0x20000028
 8000320:	20000084 	.word	0x20000084
 8000324:	20000000 	.word	0x20000000
 8000328:	20000090 	.word	0x20000090

0800032c <display7seg_landscape>:
};


//SEG for landscape LED

void display7seg_landscape(int num){
 800032c:	b480      	push	{r7}
 800032e:	b085      	sub	sp, #20
 8000330:	af00      	add	r7, sp, #0
 8000332:	6078      	str	r0, [r7, #4]
	uint8_t n= table[num];
 8000334:	4a09      	ldr	r2, [pc, #36]	; (800035c <display7seg_landscape+0x30>)
 8000336:	687b      	ldr	r3, [r7, #4]
 8000338:	4413      	add	r3, r2
 800033a:	781b      	ldrb	r3, [r3, #0]
 800033c:	73fb      	strb	r3, [r7, #15]
	GPIOB->ODR = (GPIOB->ODR & ~0x7F) | (n & 0x7F);
 800033e:	4b08      	ldr	r3, [pc, #32]	; (8000360 <display7seg_landscape+0x34>)
 8000340:	68db      	ldr	r3, [r3, #12]
 8000342:	f023 027f 	bic.w	r2, r3, #127	; 0x7f
 8000346:	7bfb      	ldrb	r3, [r7, #15]
 8000348:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800034c:	4904      	ldr	r1, [pc, #16]	; (8000360 <display7seg_landscape+0x34>)
 800034e:	4313      	orrs	r3, r2
 8000350:	60cb      	str	r3, [r1, #12]
}
 8000352:	bf00      	nop
 8000354:	3714      	adds	r7, #20
 8000356:	46bd      	mov	sp, r7
 8000358:	bc80      	pop	{r7}
 800035a:	4770      	bx	lr
 800035c:	20000034 	.word	0x20000034
 8000360:	40010c00 	.word	0x40010c00

08000364 <display7seg_portrait>:

//A0 -> F0 for portrait LED
void display7seg_portrait(int num){
 8000364:	b480      	push	{r7}
 8000366:	b085      	sub	sp, #20
 8000368:	af00      	add	r7, sp, #0
 800036a:	6078      	str	r0, [r7, #4]
	uint8_t n= table[num];
 800036c:	4a0a      	ldr	r2, [pc, #40]	; (8000398 <display7seg_portrait+0x34>)
 800036e:	687b      	ldr	r3, [r7, #4]
 8000370:	4413      	add	r3, r2
 8000372:	781b      	ldrb	r3, [r3, #0]
 8000374:	73fb      	strb	r3, [r7, #15]
	GPIOB->ODR = (GPIOB->ODR & ~(0x7F << 7)) | ((n & 0x7F) << 7);
 8000376:	4b09      	ldr	r3, [pc, #36]	; (800039c <display7seg_portrait+0x38>)
 8000378:	68db      	ldr	r3, [r3, #12]
 800037a:	f423 527e 	bic.w	r2, r3, #16256	; 0x3f80
 800037e:	7bfb      	ldrb	r3, [r7, #15]
 8000380:	01db      	lsls	r3, r3, #7
 8000382:	f403 537e 	and.w	r3, r3, #16256	; 0x3f80
 8000386:	4905      	ldr	r1, [pc, #20]	; (800039c <display7seg_portrait+0x38>)
 8000388:	4313      	orrs	r3, r2
 800038a:	60cb      	str	r3, [r1, #12]
}
 800038c:	bf00      	nop
 800038e:	3714      	adds	r7, #20
 8000390:	46bd      	mov	sp, r7
 8000392:	bc80      	pop	{r7}
 8000394:	4770      	bx	lr
 8000396:	bf00      	nop
 8000398:	20000034 	.word	0x20000034
 800039c:	40010c00 	.word	0x40010c00

080003a0 <update7SEG>:

const int MAX_LED = 4;
int index_led = 0;
int led_buffer[4] = {0};
//led_buffer is used 0 - 1 for landscape, 2 - 3 for portrait LED
void update7SEG(int index){
 80003a0:	b580      	push	{r7, lr}
 80003a2:	b082      	sub	sp, #8
 80003a4:	af00      	add	r7, sp, #0
 80003a6:	6078      	str	r0, [r7, #4]
 80003a8:	687b      	ldr	r3, [r7, #4]
 80003aa:	2b03      	cmp	r3, #3
 80003ac:	d84e      	bhi.n	800044c <update7SEG+0xac>
 80003ae:	a201      	add	r2, pc, #4	; (adr r2, 80003b4 <update7SEG+0x14>)
 80003b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80003b4:	080003c5 	.word	0x080003c5
 80003b8:	080003e5 	.word	0x080003e5
 80003bc:	08000405 	.word	0x08000405
 80003c0:	08000429 	.word	0x08000429
	switch(index){
		case 0:
			display7seg_landscape(led_buffer[0]);
 80003c4:	4b24      	ldr	r3, [pc, #144]	; (8000458 <update7SEG+0xb8>)
 80003c6:	681b      	ldr	r3, [r3, #0]
 80003c8:	4618      	mov	r0, r3
 80003ca:	f7ff ffaf 	bl	800032c <display7seg_landscape>
			HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, RESET);
 80003ce:	2200      	movs	r2, #0
 80003d0:	2140      	movs	r1, #64	; 0x40
 80003d2:	4822      	ldr	r0, [pc, #136]	; (800045c <update7SEG+0xbc>)
 80003d4:	f001 fba5 	bl	8001b22 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, SET);
 80003d8:	2201      	movs	r2, #1
 80003da:	2180      	movs	r1, #128	; 0x80
 80003dc:	481f      	ldr	r0, [pc, #124]	; (800045c <update7SEG+0xbc>)
 80003de:	f001 fba0 	bl	8001b22 <HAL_GPIO_WritePin>
			break;
 80003e2:	e034      	b.n	800044e <update7SEG+0xae>
		case 1:
			display7seg_landscape(led_buffer[1]);
 80003e4:	4b1c      	ldr	r3, [pc, #112]	; (8000458 <update7SEG+0xb8>)
 80003e6:	685b      	ldr	r3, [r3, #4]
 80003e8:	4618      	mov	r0, r3
 80003ea:	f7ff ff9f 	bl	800032c <display7seg_landscape>
			HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, SET);
 80003ee:	2201      	movs	r2, #1
 80003f0:	2140      	movs	r1, #64	; 0x40
 80003f2:	481a      	ldr	r0, [pc, #104]	; (800045c <update7SEG+0xbc>)
 80003f4:	f001 fb95 	bl	8001b22 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, RESET);
 80003f8:	2200      	movs	r2, #0
 80003fa:	2180      	movs	r1, #128	; 0x80
 80003fc:	4817      	ldr	r0, [pc, #92]	; (800045c <update7SEG+0xbc>)
 80003fe:	f001 fb90 	bl	8001b22 <HAL_GPIO_WritePin>
			break;
 8000402:	e024      	b.n	800044e <update7SEG+0xae>
		case 2:
			display7seg_portrait(led_buffer[2]);
 8000404:	4b14      	ldr	r3, [pc, #80]	; (8000458 <update7SEG+0xb8>)
 8000406:	689b      	ldr	r3, [r3, #8]
 8000408:	4618      	mov	r0, r3
 800040a:	f7ff ffab 	bl	8000364 <display7seg_portrait>
			HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, RESET);
 800040e:	2200      	movs	r2, #0
 8000410:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000414:	4811      	ldr	r0, [pc, #68]	; (800045c <update7SEG+0xbc>)
 8000416:	f001 fb84 	bl	8001b22 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, SET);
 800041a:	2201      	movs	r2, #1
 800041c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000420:	480e      	ldr	r0, [pc, #56]	; (800045c <update7SEG+0xbc>)
 8000422:	f001 fb7e 	bl	8001b22 <HAL_GPIO_WritePin>
			break;
 8000426:	e012      	b.n	800044e <update7SEG+0xae>
		case 3:
			display7seg_portrait(led_buffer[3]);
 8000428:	4b0b      	ldr	r3, [pc, #44]	; (8000458 <update7SEG+0xb8>)
 800042a:	68db      	ldr	r3, [r3, #12]
 800042c:	4618      	mov	r0, r3
 800042e:	f7ff ff99 	bl	8000364 <display7seg_portrait>
			HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, SET);
 8000432:	2201      	movs	r2, #1
 8000434:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000438:	4808      	ldr	r0, [pc, #32]	; (800045c <update7SEG+0xbc>)
 800043a:	f001 fb72 	bl	8001b22 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, RESET);
 800043e:	2200      	movs	r2, #0
 8000440:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000444:	4805      	ldr	r0, [pc, #20]	; (800045c <update7SEG+0xbc>)
 8000446:	f001 fb6c 	bl	8001b22 <HAL_GPIO_WritePin>
			break;
 800044a:	e000      	b.n	800044e <update7SEG+0xae>
		default:
			break;
 800044c:	bf00      	nop
	}
}
 800044e:	bf00      	nop
 8000450:	3708      	adds	r7, #8
 8000452:	46bd      	mov	sp, r7
 8000454:	bd80      	pop	{r7, pc}
 8000456:	bf00      	nop
 8000458:	200000a0 	.word	0x200000a0
 800045c:	40010800 	.word	0x40010800

08000460 <updateLedBufferMode1>:

int counter1 = 1, counter2 = 1;
void updateLedBufferMode1(){
 8000460:	b480      	push	{r7}
 8000462:	af00      	add	r7, sp, #0
	// 2 7-SEG LED Landscape
	/* Turn on RED-Landscape (count down from RED -> 0) */
	if (counter1 <= RED){
 8000464:	4b9b      	ldr	r3, [pc, #620]	; (80006d4 <updateLedBufferMode1+0x274>)
 8000466:	681a      	ldr	r2, [r3, #0]
 8000468:	4b9b      	ldr	r3, [pc, #620]	; (80006d8 <updateLedBufferMode1+0x278>)
 800046a:	681b      	ldr	r3, [r3, #0]
 800046c:	429a      	cmp	r2, r3
 800046e:	dc21      	bgt.n	80004b4 <updateLedBufferMode1+0x54>
		led_buffer[0] = (RED - counter1 + 1) / 10;
 8000470:	4b99      	ldr	r3, [pc, #612]	; (80006d8 <updateLedBufferMode1+0x278>)
 8000472:	681a      	ldr	r2, [r3, #0]
 8000474:	4b97      	ldr	r3, [pc, #604]	; (80006d4 <updateLedBufferMode1+0x274>)
 8000476:	681b      	ldr	r3, [r3, #0]
 8000478:	1ad3      	subs	r3, r2, r3
 800047a:	3301      	adds	r3, #1
 800047c:	4a97      	ldr	r2, [pc, #604]	; (80006dc <updateLedBufferMode1+0x27c>)
 800047e:	fb82 1203 	smull	r1, r2, r2, r3
 8000482:	1092      	asrs	r2, r2, #2
 8000484:	17db      	asrs	r3, r3, #31
 8000486:	1ad3      	subs	r3, r2, r3
 8000488:	4a95      	ldr	r2, [pc, #596]	; (80006e0 <updateLedBufferMode1+0x280>)
 800048a:	6013      	str	r3, [r2, #0]
		led_buffer[1] = (RED - counter1 + 1) % 10;
 800048c:	4b92      	ldr	r3, [pc, #584]	; (80006d8 <updateLedBufferMode1+0x278>)
 800048e:	681a      	ldr	r2, [r3, #0]
 8000490:	4b90      	ldr	r3, [pc, #576]	; (80006d4 <updateLedBufferMode1+0x274>)
 8000492:	681b      	ldr	r3, [r3, #0]
 8000494:	1ad3      	subs	r3, r2, r3
 8000496:	1c59      	adds	r1, r3, #1
 8000498:	4b90      	ldr	r3, [pc, #576]	; (80006dc <updateLedBufferMode1+0x27c>)
 800049a:	fb83 2301 	smull	r2, r3, r3, r1
 800049e:	109a      	asrs	r2, r3, #2
 80004a0:	17cb      	asrs	r3, r1, #31
 80004a2:	1ad2      	subs	r2, r2, r3
 80004a4:	4613      	mov	r3, r2
 80004a6:	009b      	lsls	r3, r3, #2
 80004a8:	4413      	add	r3, r2
 80004aa:	005b      	lsls	r3, r3, #1
 80004ac:	1aca      	subs	r2, r1, r3
 80004ae:	4b8c      	ldr	r3, [pc, #560]	; (80006e0 <updateLedBufferMode1+0x280>)
 80004b0:	605a      	str	r2, [r3, #4]
 80004b2:	e05d      	b.n	8000570 <updateLedBufferMode1+0x110>
	}
	/* Turn on GREEN-Landscape (count down from GREEN -> 0) */
	else if (counter1 <= (RED + GREEN)){
 80004b4:	4b88      	ldr	r3, [pc, #544]	; (80006d8 <updateLedBufferMode1+0x278>)
 80004b6:	681a      	ldr	r2, [r3, #0]
 80004b8:	4b8a      	ldr	r3, [pc, #552]	; (80006e4 <updateLedBufferMode1+0x284>)
 80004ba:	681b      	ldr	r3, [r3, #0]
 80004bc:	441a      	add	r2, r3
 80004be:	4b85      	ldr	r3, [pc, #532]	; (80006d4 <updateLedBufferMode1+0x274>)
 80004c0:	681b      	ldr	r3, [r3, #0]
 80004c2:	429a      	cmp	r2, r3
 80004c4:	db27      	blt.n	8000516 <updateLedBufferMode1+0xb6>
		led_buffer[0] = (RED + GREEN - counter1 + 1) / 10;
 80004c6:	4b84      	ldr	r3, [pc, #528]	; (80006d8 <updateLedBufferMode1+0x278>)
 80004c8:	681a      	ldr	r2, [r3, #0]
 80004ca:	4b86      	ldr	r3, [pc, #536]	; (80006e4 <updateLedBufferMode1+0x284>)
 80004cc:	681b      	ldr	r3, [r3, #0]
 80004ce:	441a      	add	r2, r3
 80004d0:	4b80      	ldr	r3, [pc, #512]	; (80006d4 <updateLedBufferMode1+0x274>)
 80004d2:	681b      	ldr	r3, [r3, #0]
 80004d4:	1ad3      	subs	r3, r2, r3
 80004d6:	3301      	adds	r3, #1
 80004d8:	4a80      	ldr	r2, [pc, #512]	; (80006dc <updateLedBufferMode1+0x27c>)
 80004da:	fb82 1203 	smull	r1, r2, r2, r3
 80004de:	1092      	asrs	r2, r2, #2
 80004e0:	17db      	asrs	r3, r3, #31
 80004e2:	1ad3      	subs	r3, r2, r3
 80004e4:	4a7e      	ldr	r2, [pc, #504]	; (80006e0 <updateLedBufferMode1+0x280>)
 80004e6:	6013      	str	r3, [r2, #0]
		led_buffer[1] = (RED + GREEN - counter1 + 1) % 10;
 80004e8:	4b7b      	ldr	r3, [pc, #492]	; (80006d8 <updateLedBufferMode1+0x278>)
 80004ea:	681a      	ldr	r2, [r3, #0]
 80004ec:	4b7d      	ldr	r3, [pc, #500]	; (80006e4 <updateLedBufferMode1+0x284>)
 80004ee:	681b      	ldr	r3, [r3, #0]
 80004f0:	441a      	add	r2, r3
 80004f2:	4b78      	ldr	r3, [pc, #480]	; (80006d4 <updateLedBufferMode1+0x274>)
 80004f4:	681b      	ldr	r3, [r3, #0]
 80004f6:	1ad3      	subs	r3, r2, r3
 80004f8:	1c59      	adds	r1, r3, #1
 80004fa:	4b78      	ldr	r3, [pc, #480]	; (80006dc <updateLedBufferMode1+0x27c>)
 80004fc:	fb83 2301 	smull	r2, r3, r3, r1
 8000500:	109a      	asrs	r2, r3, #2
 8000502:	17cb      	asrs	r3, r1, #31
 8000504:	1ad2      	subs	r2, r2, r3
 8000506:	4613      	mov	r3, r2
 8000508:	009b      	lsls	r3, r3, #2
 800050a:	4413      	add	r3, r2
 800050c:	005b      	lsls	r3, r3, #1
 800050e:	1aca      	subs	r2, r1, r3
 8000510:	4b73      	ldr	r3, [pc, #460]	; (80006e0 <updateLedBufferMode1+0x280>)
 8000512:	605a      	str	r2, [r3, #4]
 8000514:	e02c      	b.n	8000570 <updateLedBufferMode1+0x110>
	}
	/* Turn on AMPER-Landscape (count down from AMPER -> 0) */
	else{
		led_buffer[0] = (RED + GREEN + AMBER - counter1 + 1) / 10;
 8000516:	4b70      	ldr	r3, [pc, #448]	; (80006d8 <updateLedBufferMode1+0x278>)
 8000518:	681a      	ldr	r2, [r3, #0]
 800051a:	4b72      	ldr	r3, [pc, #456]	; (80006e4 <updateLedBufferMode1+0x284>)
 800051c:	681b      	ldr	r3, [r3, #0]
 800051e:	441a      	add	r2, r3
 8000520:	4b71      	ldr	r3, [pc, #452]	; (80006e8 <updateLedBufferMode1+0x288>)
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	441a      	add	r2, r3
 8000526:	4b6b      	ldr	r3, [pc, #428]	; (80006d4 <updateLedBufferMode1+0x274>)
 8000528:	681b      	ldr	r3, [r3, #0]
 800052a:	1ad3      	subs	r3, r2, r3
 800052c:	3301      	adds	r3, #1
 800052e:	4a6b      	ldr	r2, [pc, #428]	; (80006dc <updateLedBufferMode1+0x27c>)
 8000530:	fb82 1203 	smull	r1, r2, r2, r3
 8000534:	1092      	asrs	r2, r2, #2
 8000536:	17db      	asrs	r3, r3, #31
 8000538:	1ad3      	subs	r3, r2, r3
 800053a:	4a69      	ldr	r2, [pc, #420]	; (80006e0 <updateLedBufferMode1+0x280>)
 800053c:	6013      	str	r3, [r2, #0]
		led_buffer[1] = (RED + GREEN + AMBER - counter1 + 1) % 10;
 800053e:	4b66      	ldr	r3, [pc, #408]	; (80006d8 <updateLedBufferMode1+0x278>)
 8000540:	681a      	ldr	r2, [r3, #0]
 8000542:	4b68      	ldr	r3, [pc, #416]	; (80006e4 <updateLedBufferMode1+0x284>)
 8000544:	681b      	ldr	r3, [r3, #0]
 8000546:	441a      	add	r2, r3
 8000548:	4b67      	ldr	r3, [pc, #412]	; (80006e8 <updateLedBufferMode1+0x288>)
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	441a      	add	r2, r3
 800054e:	4b61      	ldr	r3, [pc, #388]	; (80006d4 <updateLedBufferMode1+0x274>)
 8000550:	681b      	ldr	r3, [r3, #0]
 8000552:	1ad3      	subs	r3, r2, r3
 8000554:	1c59      	adds	r1, r3, #1
 8000556:	4b61      	ldr	r3, [pc, #388]	; (80006dc <updateLedBufferMode1+0x27c>)
 8000558:	fb83 2301 	smull	r2, r3, r3, r1
 800055c:	109a      	asrs	r2, r3, #2
 800055e:	17cb      	asrs	r3, r1, #31
 8000560:	1ad2      	subs	r2, r2, r3
 8000562:	4613      	mov	r3, r2
 8000564:	009b      	lsls	r3, r3, #2
 8000566:	4413      	add	r3, r2
 8000568:	005b      	lsls	r3, r3, #1
 800056a:	1aca      	subs	r2, r1, r3
 800056c:	4b5c      	ldr	r3, [pc, #368]	; (80006e0 <updateLedBufferMode1+0x280>)
 800056e:	605a      	str	r2, [r3, #4]
	}
	counter1++;
 8000570:	4b58      	ldr	r3, [pc, #352]	; (80006d4 <updateLedBufferMode1+0x274>)
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	3301      	adds	r3, #1
 8000576:	4a57      	ldr	r2, [pc, #348]	; (80006d4 <updateLedBufferMode1+0x274>)
 8000578:	6013      	str	r3, [r2, #0]
	/* Return to turn on RED-Landscape */
	if (counter1 > RED + AMBER + GREEN) counter1 = 1;
 800057a:	4b57      	ldr	r3, [pc, #348]	; (80006d8 <updateLedBufferMode1+0x278>)
 800057c:	681a      	ldr	r2, [r3, #0]
 800057e:	4b5a      	ldr	r3, [pc, #360]	; (80006e8 <updateLedBufferMode1+0x288>)
 8000580:	681b      	ldr	r3, [r3, #0]
 8000582:	441a      	add	r2, r3
 8000584:	4b57      	ldr	r3, [pc, #348]	; (80006e4 <updateLedBufferMode1+0x284>)
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	441a      	add	r2, r3
 800058a:	4b52      	ldr	r3, [pc, #328]	; (80006d4 <updateLedBufferMode1+0x274>)
 800058c:	681b      	ldr	r3, [r3, #0]
 800058e:	429a      	cmp	r2, r3
 8000590:	da02      	bge.n	8000598 <updateLedBufferMode1+0x138>
 8000592:	4b50      	ldr	r3, [pc, #320]	; (80006d4 <updateLedBufferMode1+0x274>)
 8000594:	2201      	movs	r2, #1
 8000596:	601a      	str	r2, [r3, #0]


	// 2 7-SEG LED Portrait
	/* Turn on GREEN-Portrait (count down from GREEN -> 0) */
	if (counter2 <= GREEN){
 8000598:	4b54      	ldr	r3, [pc, #336]	; (80006ec <updateLedBufferMode1+0x28c>)
 800059a:	681a      	ldr	r2, [r3, #0]
 800059c:	4b51      	ldr	r3, [pc, #324]	; (80006e4 <updateLedBufferMode1+0x284>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	429a      	cmp	r2, r3
 80005a2:	dc21      	bgt.n	80005e8 <updateLedBufferMode1+0x188>
		led_buffer[2] = (GREEN - counter2 + 1) / 10;
 80005a4:	4b4f      	ldr	r3, [pc, #316]	; (80006e4 <updateLedBufferMode1+0x284>)
 80005a6:	681a      	ldr	r2, [r3, #0]
 80005a8:	4b50      	ldr	r3, [pc, #320]	; (80006ec <updateLedBufferMode1+0x28c>)
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	1ad3      	subs	r3, r2, r3
 80005ae:	3301      	adds	r3, #1
 80005b0:	4a4a      	ldr	r2, [pc, #296]	; (80006dc <updateLedBufferMode1+0x27c>)
 80005b2:	fb82 1203 	smull	r1, r2, r2, r3
 80005b6:	1092      	asrs	r2, r2, #2
 80005b8:	17db      	asrs	r3, r3, #31
 80005ba:	1ad3      	subs	r3, r2, r3
 80005bc:	4a48      	ldr	r2, [pc, #288]	; (80006e0 <updateLedBufferMode1+0x280>)
 80005be:	6093      	str	r3, [r2, #8]
		led_buffer[3] = (GREEN - counter2 + 1) % 10;
 80005c0:	4b48      	ldr	r3, [pc, #288]	; (80006e4 <updateLedBufferMode1+0x284>)
 80005c2:	681a      	ldr	r2, [r3, #0]
 80005c4:	4b49      	ldr	r3, [pc, #292]	; (80006ec <updateLedBufferMode1+0x28c>)
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	1ad3      	subs	r3, r2, r3
 80005ca:	1c59      	adds	r1, r3, #1
 80005cc:	4b43      	ldr	r3, [pc, #268]	; (80006dc <updateLedBufferMode1+0x27c>)
 80005ce:	fb83 2301 	smull	r2, r3, r3, r1
 80005d2:	109a      	asrs	r2, r3, #2
 80005d4:	17cb      	asrs	r3, r1, #31
 80005d6:	1ad2      	subs	r2, r2, r3
 80005d8:	4613      	mov	r3, r2
 80005da:	009b      	lsls	r3, r3, #2
 80005dc:	4413      	add	r3, r2
 80005de:	005b      	lsls	r3, r3, #1
 80005e0:	1aca      	subs	r2, r1, r3
 80005e2:	4b3f      	ldr	r3, [pc, #252]	; (80006e0 <updateLedBufferMode1+0x280>)
 80005e4:	60da      	str	r2, [r3, #12]
 80005e6:	e05d      	b.n	80006a4 <updateLedBufferMode1+0x244>
	}
	/* Turn on AMPER-Portrait (count down from AMPER -> 0) */
	else if (counter2 <= (AMBER + GREEN)){
 80005e8:	4b3f      	ldr	r3, [pc, #252]	; (80006e8 <updateLedBufferMode1+0x288>)
 80005ea:	681a      	ldr	r2, [r3, #0]
 80005ec:	4b3d      	ldr	r3, [pc, #244]	; (80006e4 <updateLedBufferMode1+0x284>)
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	441a      	add	r2, r3
 80005f2:	4b3e      	ldr	r3, [pc, #248]	; (80006ec <updateLedBufferMode1+0x28c>)
 80005f4:	681b      	ldr	r3, [r3, #0]
 80005f6:	429a      	cmp	r2, r3
 80005f8:	db27      	blt.n	800064a <updateLedBufferMode1+0x1ea>
		led_buffer[2] = (AMBER + GREEN - counter2 + 1) / 10;
 80005fa:	4b3b      	ldr	r3, [pc, #236]	; (80006e8 <updateLedBufferMode1+0x288>)
 80005fc:	681a      	ldr	r2, [r3, #0]
 80005fe:	4b39      	ldr	r3, [pc, #228]	; (80006e4 <updateLedBufferMode1+0x284>)
 8000600:	681b      	ldr	r3, [r3, #0]
 8000602:	441a      	add	r2, r3
 8000604:	4b39      	ldr	r3, [pc, #228]	; (80006ec <updateLedBufferMode1+0x28c>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	1ad3      	subs	r3, r2, r3
 800060a:	3301      	adds	r3, #1
 800060c:	4a33      	ldr	r2, [pc, #204]	; (80006dc <updateLedBufferMode1+0x27c>)
 800060e:	fb82 1203 	smull	r1, r2, r2, r3
 8000612:	1092      	asrs	r2, r2, #2
 8000614:	17db      	asrs	r3, r3, #31
 8000616:	1ad3      	subs	r3, r2, r3
 8000618:	4a31      	ldr	r2, [pc, #196]	; (80006e0 <updateLedBufferMode1+0x280>)
 800061a:	6093      	str	r3, [r2, #8]
		led_buffer[3] = (AMBER + GREEN - counter2 + 1) % 10;
 800061c:	4b32      	ldr	r3, [pc, #200]	; (80006e8 <updateLedBufferMode1+0x288>)
 800061e:	681a      	ldr	r2, [r3, #0]
 8000620:	4b30      	ldr	r3, [pc, #192]	; (80006e4 <updateLedBufferMode1+0x284>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	441a      	add	r2, r3
 8000626:	4b31      	ldr	r3, [pc, #196]	; (80006ec <updateLedBufferMode1+0x28c>)
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	1ad3      	subs	r3, r2, r3
 800062c:	1c59      	adds	r1, r3, #1
 800062e:	4b2b      	ldr	r3, [pc, #172]	; (80006dc <updateLedBufferMode1+0x27c>)
 8000630:	fb83 2301 	smull	r2, r3, r3, r1
 8000634:	109a      	asrs	r2, r3, #2
 8000636:	17cb      	asrs	r3, r1, #31
 8000638:	1ad2      	subs	r2, r2, r3
 800063a:	4613      	mov	r3, r2
 800063c:	009b      	lsls	r3, r3, #2
 800063e:	4413      	add	r3, r2
 8000640:	005b      	lsls	r3, r3, #1
 8000642:	1aca      	subs	r2, r1, r3
 8000644:	4b26      	ldr	r3, [pc, #152]	; (80006e0 <updateLedBufferMode1+0x280>)
 8000646:	60da      	str	r2, [r3, #12]
 8000648:	e02c      	b.n	80006a4 <updateLedBufferMode1+0x244>
	}
	/* Turn on RED-Portrait (count down from RED -> 0) */
	else {
		led_buffer[2] = (RED + GREEN + AMBER - counter2 + 1) / 10;
 800064a:	4b23      	ldr	r3, [pc, #140]	; (80006d8 <updateLedBufferMode1+0x278>)
 800064c:	681a      	ldr	r2, [r3, #0]
 800064e:	4b25      	ldr	r3, [pc, #148]	; (80006e4 <updateLedBufferMode1+0x284>)
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	441a      	add	r2, r3
 8000654:	4b24      	ldr	r3, [pc, #144]	; (80006e8 <updateLedBufferMode1+0x288>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	441a      	add	r2, r3
 800065a:	4b24      	ldr	r3, [pc, #144]	; (80006ec <updateLedBufferMode1+0x28c>)
 800065c:	681b      	ldr	r3, [r3, #0]
 800065e:	1ad3      	subs	r3, r2, r3
 8000660:	3301      	adds	r3, #1
 8000662:	4a1e      	ldr	r2, [pc, #120]	; (80006dc <updateLedBufferMode1+0x27c>)
 8000664:	fb82 1203 	smull	r1, r2, r2, r3
 8000668:	1092      	asrs	r2, r2, #2
 800066a:	17db      	asrs	r3, r3, #31
 800066c:	1ad3      	subs	r3, r2, r3
 800066e:	4a1c      	ldr	r2, [pc, #112]	; (80006e0 <updateLedBufferMode1+0x280>)
 8000670:	6093      	str	r3, [r2, #8]
		led_buffer[3] = (RED + GREEN + AMBER - counter2 + 1) % 10;
 8000672:	4b19      	ldr	r3, [pc, #100]	; (80006d8 <updateLedBufferMode1+0x278>)
 8000674:	681a      	ldr	r2, [r3, #0]
 8000676:	4b1b      	ldr	r3, [pc, #108]	; (80006e4 <updateLedBufferMode1+0x284>)
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	441a      	add	r2, r3
 800067c:	4b1a      	ldr	r3, [pc, #104]	; (80006e8 <updateLedBufferMode1+0x288>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	441a      	add	r2, r3
 8000682:	4b1a      	ldr	r3, [pc, #104]	; (80006ec <updateLedBufferMode1+0x28c>)
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	1ad3      	subs	r3, r2, r3
 8000688:	1c59      	adds	r1, r3, #1
 800068a:	4b14      	ldr	r3, [pc, #80]	; (80006dc <updateLedBufferMode1+0x27c>)
 800068c:	fb83 2301 	smull	r2, r3, r3, r1
 8000690:	109a      	asrs	r2, r3, #2
 8000692:	17cb      	asrs	r3, r1, #31
 8000694:	1ad2      	subs	r2, r2, r3
 8000696:	4613      	mov	r3, r2
 8000698:	009b      	lsls	r3, r3, #2
 800069a:	4413      	add	r3, r2
 800069c:	005b      	lsls	r3, r3, #1
 800069e:	1aca      	subs	r2, r1, r3
 80006a0:	4b0f      	ldr	r3, [pc, #60]	; (80006e0 <updateLedBufferMode1+0x280>)
 80006a2:	60da      	str	r2, [r3, #12]
	}
	counter2++;
 80006a4:	4b11      	ldr	r3, [pc, #68]	; (80006ec <updateLedBufferMode1+0x28c>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	3301      	adds	r3, #1
 80006aa:	4a10      	ldr	r2, [pc, #64]	; (80006ec <updateLedBufferMode1+0x28c>)
 80006ac:	6013      	str	r3, [r2, #0]
	/* Return to turn on GREEN-Portrait */
	if (counter2 > RED + AMBER + GREEN) counter2 = 1;
 80006ae:	4b0a      	ldr	r3, [pc, #40]	; (80006d8 <updateLedBufferMode1+0x278>)
 80006b0:	681a      	ldr	r2, [r3, #0]
 80006b2:	4b0d      	ldr	r3, [pc, #52]	; (80006e8 <updateLedBufferMode1+0x288>)
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	441a      	add	r2, r3
 80006b8:	4b0a      	ldr	r3, [pc, #40]	; (80006e4 <updateLedBufferMode1+0x284>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	441a      	add	r2, r3
 80006be:	4b0b      	ldr	r3, [pc, #44]	; (80006ec <updateLedBufferMode1+0x28c>)
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	429a      	cmp	r2, r3
 80006c4:	da02      	bge.n	80006cc <updateLedBufferMode1+0x26c>
 80006c6:	4b09      	ldr	r3, [pc, #36]	; (80006ec <updateLedBufferMode1+0x28c>)
 80006c8:	2201      	movs	r2, #1
 80006ca:	601a      	str	r2, [r3, #0]
}
 80006cc:	bf00      	nop
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bc80      	pop	{r7}
 80006d2:	4770      	bx	lr
 80006d4:	20000040 	.word	0x20000040
 80006d8:	20000048 	.word	0x20000048
 80006dc:	66666667 	.word	0x66666667
 80006e0:	200000a0 	.word	0x200000a0
 80006e4:	20000050 	.word	0x20000050
 80006e8:	2000004c 	.word	0x2000004c
 80006ec:	20000044 	.word	0x20000044

080006f0 <updateLedBufferMode2>:

void updateLedBufferMode2(){
 80006f0:	b480      	push	{r7}
 80006f2:	af00      	add	r7, sp, #0
	// Display mode 2
	led_buffer[0] = 0;
 80006f4:	4b11      	ldr	r3, [pc, #68]	; (800073c <updateLedBufferMode2+0x4c>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	601a      	str	r2, [r3, #0]
	led_buffer[1] = 2;
 80006fa:	4b10      	ldr	r3, [pc, #64]	; (800073c <updateLedBufferMode2+0x4c>)
 80006fc:	2202      	movs	r2, #2
 80006fe:	605a      	str	r2, [r3, #4]
	// Display value RED
	led_buffer[2] = RED / 10;
 8000700:	4b0f      	ldr	r3, [pc, #60]	; (8000740 <updateLedBufferMode2+0x50>)
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	4a0f      	ldr	r2, [pc, #60]	; (8000744 <updateLedBufferMode2+0x54>)
 8000706:	fb82 1203 	smull	r1, r2, r2, r3
 800070a:	1092      	asrs	r2, r2, #2
 800070c:	17db      	asrs	r3, r3, #31
 800070e:	1ad3      	subs	r3, r2, r3
 8000710:	4a0a      	ldr	r2, [pc, #40]	; (800073c <updateLedBufferMode2+0x4c>)
 8000712:	6093      	str	r3, [r2, #8]
	led_buffer[3] = RED % 10;
 8000714:	4b0a      	ldr	r3, [pc, #40]	; (8000740 <updateLedBufferMode2+0x50>)
 8000716:	6819      	ldr	r1, [r3, #0]
 8000718:	4b0a      	ldr	r3, [pc, #40]	; (8000744 <updateLedBufferMode2+0x54>)
 800071a:	fb83 2301 	smull	r2, r3, r3, r1
 800071e:	109a      	asrs	r2, r3, #2
 8000720:	17cb      	asrs	r3, r1, #31
 8000722:	1ad2      	subs	r2, r2, r3
 8000724:	4613      	mov	r3, r2
 8000726:	009b      	lsls	r3, r3, #2
 8000728:	4413      	add	r3, r2
 800072a:	005b      	lsls	r3, r3, #1
 800072c:	1aca      	subs	r2, r1, r3
 800072e:	4b03      	ldr	r3, [pc, #12]	; (800073c <updateLedBufferMode2+0x4c>)
 8000730:	60da      	str	r2, [r3, #12]
}
 8000732:	bf00      	nop
 8000734:	46bd      	mov	sp, r7
 8000736:	bc80      	pop	{r7}
 8000738:	4770      	bx	lr
 800073a:	bf00      	nop
 800073c:	200000a0 	.word	0x200000a0
 8000740:	20000048 	.word	0x20000048
 8000744:	66666667 	.word	0x66666667

08000748 <updateLedBufferMode3>:

void updateLedBufferMode3(){
 8000748:	b480      	push	{r7}
 800074a:	af00      	add	r7, sp, #0
	// Display mode 3
	led_buffer[0] = 0;
 800074c:	4b11      	ldr	r3, [pc, #68]	; (8000794 <updateLedBufferMode3+0x4c>)
 800074e:	2200      	movs	r2, #0
 8000750:	601a      	str	r2, [r3, #0]
	led_buffer[1] = 3;
 8000752:	4b10      	ldr	r3, [pc, #64]	; (8000794 <updateLedBufferMode3+0x4c>)
 8000754:	2203      	movs	r2, #3
 8000756:	605a      	str	r2, [r3, #4]
	// Display value AMBER
	led_buffer[2] = AMBER / 10;
 8000758:	4b0f      	ldr	r3, [pc, #60]	; (8000798 <updateLedBufferMode3+0x50>)
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	4a0f      	ldr	r2, [pc, #60]	; (800079c <updateLedBufferMode3+0x54>)
 800075e:	fb82 1203 	smull	r1, r2, r2, r3
 8000762:	1092      	asrs	r2, r2, #2
 8000764:	17db      	asrs	r3, r3, #31
 8000766:	1ad3      	subs	r3, r2, r3
 8000768:	4a0a      	ldr	r2, [pc, #40]	; (8000794 <updateLedBufferMode3+0x4c>)
 800076a:	6093      	str	r3, [r2, #8]
	led_buffer[3] = AMBER % 10;
 800076c:	4b0a      	ldr	r3, [pc, #40]	; (8000798 <updateLedBufferMode3+0x50>)
 800076e:	6819      	ldr	r1, [r3, #0]
 8000770:	4b0a      	ldr	r3, [pc, #40]	; (800079c <updateLedBufferMode3+0x54>)
 8000772:	fb83 2301 	smull	r2, r3, r3, r1
 8000776:	109a      	asrs	r2, r3, #2
 8000778:	17cb      	asrs	r3, r1, #31
 800077a:	1ad2      	subs	r2, r2, r3
 800077c:	4613      	mov	r3, r2
 800077e:	009b      	lsls	r3, r3, #2
 8000780:	4413      	add	r3, r2
 8000782:	005b      	lsls	r3, r3, #1
 8000784:	1aca      	subs	r2, r1, r3
 8000786:	4b03      	ldr	r3, [pc, #12]	; (8000794 <updateLedBufferMode3+0x4c>)
 8000788:	60da      	str	r2, [r3, #12]
}
 800078a:	bf00      	nop
 800078c:	46bd      	mov	sp, r7
 800078e:	bc80      	pop	{r7}
 8000790:	4770      	bx	lr
 8000792:	bf00      	nop
 8000794:	200000a0 	.word	0x200000a0
 8000798:	2000004c 	.word	0x2000004c
 800079c:	66666667 	.word	0x66666667

080007a0 <updateLedBufferMode4>:

void updateLedBufferMode4(){
 80007a0:	b480      	push	{r7}
 80007a2:	af00      	add	r7, sp, #0
	// Display mode 4
	led_buffer[0] = 0;
 80007a4:	4b11      	ldr	r3, [pc, #68]	; (80007ec <updateLedBufferMode4+0x4c>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	601a      	str	r2, [r3, #0]
	led_buffer[1] = 4;
 80007aa:	4b10      	ldr	r3, [pc, #64]	; (80007ec <updateLedBufferMode4+0x4c>)
 80007ac:	2204      	movs	r2, #4
 80007ae:	605a      	str	r2, [r3, #4]
	// Display value GREEN
	led_buffer[2] = GREEN / 10;
 80007b0:	4b0f      	ldr	r3, [pc, #60]	; (80007f0 <updateLedBufferMode4+0x50>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	4a0f      	ldr	r2, [pc, #60]	; (80007f4 <updateLedBufferMode4+0x54>)
 80007b6:	fb82 1203 	smull	r1, r2, r2, r3
 80007ba:	1092      	asrs	r2, r2, #2
 80007bc:	17db      	asrs	r3, r3, #31
 80007be:	1ad3      	subs	r3, r2, r3
 80007c0:	4a0a      	ldr	r2, [pc, #40]	; (80007ec <updateLedBufferMode4+0x4c>)
 80007c2:	6093      	str	r3, [r2, #8]
	led_buffer[3] = GREEN % 10;
 80007c4:	4b0a      	ldr	r3, [pc, #40]	; (80007f0 <updateLedBufferMode4+0x50>)
 80007c6:	6819      	ldr	r1, [r3, #0]
 80007c8:	4b0a      	ldr	r3, [pc, #40]	; (80007f4 <updateLedBufferMode4+0x54>)
 80007ca:	fb83 2301 	smull	r2, r3, r3, r1
 80007ce:	109a      	asrs	r2, r3, #2
 80007d0:	17cb      	asrs	r3, r1, #31
 80007d2:	1ad2      	subs	r2, r2, r3
 80007d4:	4613      	mov	r3, r2
 80007d6:	009b      	lsls	r3, r3, #2
 80007d8:	4413      	add	r3, r2
 80007da:	005b      	lsls	r3, r3, #1
 80007dc:	1aca      	subs	r2, r1, r3
 80007de:	4b03      	ldr	r3, [pc, #12]	; (80007ec <updateLedBufferMode4+0x4c>)
 80007e0:	60da      	str	r2, [r3, #12]
}
 80007e2:	bf00      	nop
 80007e4:	46bd      	mov	sp, r7
 80007e6:	bc80      	pop	{r7}
 80007e8:	4770      	bx	lr
 80007ea:	bf00      	nop
 80007ec:	200000a0 	.word	0x200000a0
 80007f0:	20000050 	.word	0x20000050
 80007f4:	66666667 	.word	0x66666667

080007f8 <fsm_traffic_light>:

#include "fsm_traffic_light.h"

int status = INIT;

void fsm_traffic_light(){
 80007f8:	b580      	push	{r7, lr}
 80007fa:	af00      	add	r7, sp, #0
	switch(status){
 80007fc:	4bc4      	ldr	r3, [pc, #784]	; (8000b10 <fsm_traffic_light+0x318>)
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	2b2a      	cmp	r3, #42	; 0x2a
 8000802:	f200 844c 	bhi.w	800109e <fsm_traffic_light+0x8a6>
 8000806:	a201      	add	r2, pc, #4	; (adr r2, 800080c <fsm_traffic_light+0x14>)
 8000808:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800080c:	080008b9 	.word	0x080008b9
 8000810:	080008c3 	.word	0x080008c3
 8000814:	08000bb1 	.word	0x08000bb1
 8000818:	08000d43 	.word	0x08000d43
 800081c:	08000ee5 	.word	0x08000ee5
 8000820:	0800109f 	.word	0x0800109f
 8000824:	0800109f 	.word	0x0800109f
 8000828:	0800109f 	.word	0x0800109f
 800082c:	0800109f 	.word	0x0800109f
 8000830:	0800109f 	.word	0x0800109f
 8000834:	0800109f 	.word	0x0800109f
 8000838:	08000961 	.word	0x08000961
 800083c:	080009f9 	.word	0x080009f9
 8000840:	08000a79 	.word	0x08000a79
 8000844:	08000b31 	.word	0x08000b31
 8000848:	0800109f 	.word	0x0800109f
 800084c:	0800109f 	.word	0x0800109f
 8000850:	0800109f 	.word	0x0800109f
 8000854:	0800109f 	.word	0x0800109f
 8000858:	0800109f 	.word	0x0800109f
 800085c:	0800109f 	.word	0x0800109f
 8000860:	08000c33 	.word	0x08000c33
 8000864:	08000cbb 	.word	0x08000cbb
 8000868:	0800109f 	.word	0x0800109f
 800086c:	0800109f 	.word	0x0800109f
 8000870:	0800109f 	.word	0x0800109f
 8000874:	0800109f 	.word	0x0800109f
 8000878:	0800109f 	.word	0x0800109f
 800087c:	0800109f 	.word	0x0800109f
 8000880:	0800109f 	.word	0x0800109f
 8000884:	0800109f 	.word	0x0800109f
 8000888:	08000ddd 	.word	0x08000ddd
 800088c:	08000e61 	.word	0x08000e61
 8000890:	0800109f 	.word	0x0800109f
 8000894:	0800109f 	.word	0x0800109f
 8000898:	0800109f 	.word	0x0800109f
 800089c:	0800109f 	.word	0x0800109f
 80008a0:	0800109f 	.word	0x0800109f
 80008a4:	0800109f 	.word	0x0800109f
 80008a8:	0800109f 	.word	0x0800109f
 80008ac:	0800109f 	.word	0x0800109f
 80008b0:	08000f67 	.word	0x08000f67
 80008b4:	08001015 	.word	0x08001015

	//INIT
	case INIT:
		status = MODE1;
 80008b8:	4b95      	ldr	r3, [pc, #596]	; (8000b10 <fsm_traffic_light+0x318>)
 80008ba:	2201      	movs	r2, #1
 80008bc:	601a      	str	r2, [r3, #0]
		break;
 80008be:	f000 bc12 	b.w	80010e6 <fsm_traffic_light+0x8ee>

	//MODE1
	case MODE1:
		status = RED_GREEN;
 80008c2:	4b93      	ldr	r3, [pc, #588]	; (8000b10 <fsm_traffic_light+0x318>)
 80008c4:	220b      	movs	r2, #11
 80008c6:	601a      	str	r2, [r3, #0]
		//Set up LED
		HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin, RESET);
 80008c8:	2200      	movs	r2, #0
 80008ca:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80008ce:	4891      	ldr	r0, [pc, #580]	; (8000b14 <fsm_traffic_light+0x31c>)
 80008d0:	f001 f927 	bl	8001b22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(A1_GPIO_Port, A1_Pin, SET);
 80008d4:	2201      	movs	r2, #1
 80008d6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80008da:	488e      	ldr	r0, [pc, #568]	; (8000b14 <fsm_traffic_light+0x31c>)
 80008dc:	f001 f921 	bl	8001b22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(G1_GPIO_Port, G1_Pin, SET);
 80008e0:	2201      	movs	r2, #1
 80008e2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80008e6:	488b      	ldr	r0, [pc, #556]	; (8000b14 <fsm_traffic_light+0x31c>)
 80008e8:	f001 f91b 	bl	8001b22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin, SET);
 80008ec:	2201      	movs	r2, #1
 80008ee:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80008f2:	4888      	ldr	r0, [pc, #544]	; (8000b14 <fsm_traffic_light+0x31c>)
 80008f4:	f001 f915 	bl	8001b22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(A2_GPIO_Port, A2_Pin, SET);
 80008f8:	2201      	movs	r2, #1
 80008fa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80008fe:	4885      	ldr	r0, [pc, #532]	; (8000b14 <fsm_traffic_light+0x31c>)
 8000900:	f001 f90f 	bl	8001b22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(G2_GPIO_Port, G2_Pin, RESET);
 8000904:	2200      	movs	r2, #0
 8000906:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800090a:	4882      	ldr	r0, [pc, #520]	; (8000b14 <fsm_traffic_light+0x31c>)
 800090c:	f001 f909 	bl	8001b22 <HAL_GPIO_WritePin>

		//Set up default value
		counter1 = counter2 = 1;
 8000910:	4b81      	ldr	r3, [pc, #516]	; (8000b18 <fsm_traffic_light+0x320>)
 8000912:	2201      	movs	r2, #1
 8000914:	601a      	str	r2, [r3, #0]
 8000916:	4b80      	ldr	r3, [pc, #512]	; (8000b18 <fsm_traffic_light+0x320>)
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	4a80      	ldr	r2, [pc, #512]	; (8000b1c <fsm_traffic_light+0x324>)
 800091c:	6013      	str	r3, [r2, #0]
		index_led = 0;
 800091e:	4b80      	ldr	r3, [pc, #512]	; (8000b20 <fsm_traffic_light+0x328>)
 8000920:	2200      	movs	r2, #0
 8000922:	601a      	str	r2, [r3, #0]
		updateLedBufferMode1();
 8000924:	f7ff fd9c 	bl	8000460 <updateLedBufferMode1>
		update7SEG(index_led);
 8000928:	4b7d      	ldr	r3, [pc, #500]	; (8000b20 <fsm_traffic_light+0x328>)
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	4618      	mov	r0, r3
 800092e:	f7ff fd37 	bl	80003a0 <update7SEG>

		//Set timer
		setTimer(0, GREEN * 1000);	// Set timer for RED_GREEN
 8000932:	4b7c      	ldr	r3, [pc, #496]	; (8000b24 <fsm_traffic_light+0x32c>)
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800093a:	fb02 f303 	mul.w	r3, r2, r3
 800093e:	4619      	mov	r1, r3
 8000940:	2000      	movs	r0, #0
 8000942:	f000 fce1 	bl	8001308 <setTimer>
		setTimer(1, 1000);			// Set timer for updateLedBufferMode1
 8000946:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800094a:	2001      	movs	r0, #1
 800094c:	f000 fcdc 	bl	8001308 <setTimer>
		setTimer(2, 250);			// Set timer for 7SEG LED
 8000950:	21fa      	movs	r1, #250	; 0xfa
 8000952:	2002      	movs	r0, #2
 8000954:	f000 fcd8 	bl	8001308 <setTimer>
		clearTimer(3);				// Clear timer for blinking LED
 8000958:	2003      	movs	r0, #3
 800095a:	f000 fcf5 	bl	8001348 <clearTimer>

		break;
 800095e:	e3c2      	b.n	80010e6 <fsm_traffic_light+0x8ee>

	case RED_GREEN:
		//Set up LED
		HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin, RESET);
 8000960:	2200      	movs	r2, #0
 8000962:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000966:	486b      	ldr	r0, [pc, #428]	; (8000b14 <fsm_traffic_light+0x31c>)
 8000968:	f001 f8db 	bl	8001b22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(A1_GPIO_Port, A1_Pin, SET);
 800096c:	2201      	movs	r2, #1
 800096e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000972:	4868      	ldr	r0, [pc, #416]	; (8000b14 <fsm_traffic_light+0x31c>)
 8000974:	f001 f8d5 	bl	8001b22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(R2_GPIO_Port, R2_Pin, SET);
 8000978:	2201      	movs	r2, #1
 800097a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800097e:	4865      	ldr	r0, [pc, #404]	; (8000b14 <fsm_traffic_light+0x31c>)
 8000980:	f001 f8cf 	bl	8001b22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(G2_GPIO_Port, G2_Pin, RESET);
 8000984:	2200      	movs	r2, #0
 8000986:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800098a:	4862      	ldr	r0, [pc, #392]	; (8000b14 <fsm_traffic_light+0x31c>)
 800098c:	f001 f8c9 	bl	8001b22 <HAL_GPIO_WritePin>

		if (timer_flag[0] == 1){
 8000990:	4b65      	ldr	r3, [pc, #404]	; (8000b28 <fsm_traffic_light+0x330>)
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	2b01      	cmp	r3, #1
 8000996:	d10c      	bne.n	80009b2 <fsm_traffic_light+0x1ba>
			status = RED_AMBER;
 8000998:	4b5d      	ldr	r3, [pc, #372]	; (8000b10 <fsm_traffic_light+0x318>)
 800099a:	220c      	movs	r2, #12
 800099c:	601a      	str	r2, [r3, #0]
			setTimer(0, AMBER * 1000);
 800099e:	4b63      	ldr	r3, [pc, #396]	; (8000b2c <fsm_traffic_light+0x334>)
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80009a6:	fb02 f303 	mul.w	r3, r2, r3
 80009aa:	4619      	mov	r1, r3
 80009ac:	2000      	movs	r0, #0
 80009ae:	f000 fcab 	bl	8001308 <setTimer>
		}

		if (timer_flag[1] == 1){
 80009b2:	4b5d      	ldr	r3, [pc, #372]	; (8000b28 <fsm_traffic_light+0x330>)
 80009b4:	685b      	ldr	r3, [r3, #4]
 80009b6:	2b01      	cmp	r3, #1
 80009b8:	d106      	bne.n	80009c8 <fsm_traffic_light+0x1d0>
			updateLedBufferMode1();
 80009ba:	f7ff fd51 	bl	8000460 <updateLedBufferMode1>
			setTimer(1, 1000);
 80009be:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80009c2:	2001      	movs	r0, #1
 80009c4:	f000 fca0 	bl	8001308 <setTimer>
		}

		if (timer_flag[2] == 1){
 80009c8:	4b57      	ldr	r3, [pc, #348]	; (8000b28 <fsm_traffic_light+0x330>)
 80009ca:	689b      	ldr	r3, [r3, #8]
 80009cc:	2b01      	cmp	r3, #1
 80009ce:	d108      	bne.n	80009e2 <fsm_traffic_light+0x1ea>
			update7SEG(index_led);
 80009d0:	4b53      	ldr	r3, [pc, #332]	; (8000b20 <fsm_traffic_light+0x328>)
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	4618      	mov	r0, r3
 80009d6:	f7ff fce3 	bl	80003a0 <update7SEG>
			setTimer(2, 250);
 80009da:	21fa      	movs	r1, #250	; 0xfa
 80009dc:	2002      	movs	r0, #2
 80009de:	f000 fc93 	bl	8001308 <setTimer>
		}
		// If button 1 is pressed, come to MODE2
		if (isButtonPressed(0) == 1){
 80009e2:	2000      	movs	r0, #0
 80009e4:	f7ff fbb2 	bl	800014c <isButtonPressed>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b01      	cmp	r3, #1
 80009ec:	f040 8359 	bne.w	80010a2 <fsm_traffic_light+0x8aa>
			status = MODE2;
 80009f0:	4b47      	ldr	r3, [pc, #284]	; (8000b10 <fsm_traffic_light+0x318>)
 80009f2:	2202      	movs	r2, #2
 80009f4:	601a      	str	r2, [r3, #0]
		}
		break;
 80009f6:	e354      	b.n	80010a2 <fsm_traffic_light+0x8aa>

	case RED_AMBER:
		//Set up LED
		HAL_GPIO_WritePin(G2_GPIO_Port, G2_Pin, SET);
 80009f8:	2201      	movs	r2, #1
 80009fa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80009fe:	4845      	ldr	r0, [pc, #276]	; (8000b14 <fsm_traffic_light+0x31c>)
 8000a00:	f001 f88f 	bl	8001b22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(A2_GPIO_Port, A2_Pin, RESET);
 8000a04:	2200      	movs	r2, #0
 8000a06:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a0a:	4842      	ldr	r0, [pc, #264]	; (8000b14 <fsm_traffic_light+0x31c>)
 8000a0c:	f001 f889 	bl	8001b22 <HAL_GPIO_WritePin>

		if (timer_flag[0] == 1){
 8000a10:	4b45      	ldr	r3, [pc, #276]	; (8000b28 <fsm_traffic_light+0x330>)
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	2b01      	cmp	r3, #1
 8000a16:	d10c      	bne.n	8000a32 <fsm_traffic_light+0x23a>
			status = GREEN_RED;
 8000a18:	4b3d      	ldr	r3, [pc, #244]	; (8000b10 <fsm_traffic_light+0x318>)
 8000a1a:	220d      	movs	r2, #13
 8000a1c:	601a      	str	r2, [r3, #0]
			setTimer(0, GREEN * 1000);
 8000a1e:	4b41      	ldr	r3, [pc, #260]	; (8000b24 <fsm_traffic_light+0x32c>)
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000a26:	fb02 f303 	mul.w	r3, r2, r3
 8000a2a:	4619      	mov	r1, r3
 8000a2c:	2000      	movs	r0, #0
 8000a2e:	f000 fc6b 	bl	8001308 <setTimer>
		}

		if (timer_flag[1] == 1){
 8000a32:	4b3d      	ldr	r3, [pc, #244]	; (8000b28 <fsm_traffic_light+0x330>)
 8000a34:	685b      	ldr	r3, [r3, #4]
 8000a36:	2b01      	cmp	r3, #1
 8000a38:	d106      	bne.n	8000a48 <fsm_traffic_light+0x250>
			updateLedBufferMode1();
 8000a3a:	f7ff fd11 	bl	8000460 <updateLedBufferMode1>
			setTimer(1, 1000);
 8000a3e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000a42:	2001      	movs	r0, #1
 8000a44:	f000 fc60 	bl	8001308 <setTimer>
		}

		if (timer_flag[2] == 1){
 8000a48:	4b37      	ldr	r3, [pc, #220]	; (8000b28 <fsm_traffic_light+0x330>)
 8000a4a:	689b      	ldr	r3, [r3, #8]
 8000a4c:	2b01      	cmp	r3, #1
 8000a4e:	d108      	bne.n	8000a62 <fsm_traffic_light+0x26a>
			update7SEG(index_led);
 8000a50:	4b33      	ldr	r3, [pc, #204]	; (8000b20 <fsm_traffic_light+0x328>)
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	4618      	mov	r0, r3
 8000a56:	f7ff fca3 	bl	80003a0 <update7SEG>
			setTimer(2, 250);
 8000a5a:	21fa      	movs	r1, #250	; 0xfa
 8000a5c:	2002      	movs	r0, #2
 8000a5e:	f000 fc53 	bl	8001308 <setTimer>
		}
		// If button 1 is pressed, come to MODE2
		if (isButtonPressed(0) == 1){
 8000a62:	2000      	movs	r0, #0
 8000a64:	f7ff fb72 	bl	800014c <isButtonPressed>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	2b01      	cmp	r3, #1
 8000a6c:	f040 831b 	bne.w	80010a6 <fsm_traffic_light+0x8ae>
			status = MODE2;
 8000a70:	4b27      	ldr	r3, [pc, #156]	; (8000b10 <fsm_traffic_light+0x318>)
 8000a72:	2202      	movs	r2, #2
 8000a74:	601a      	str	r2, [r3, #0]
		}
		break;
 8000a76:	e316      	b.n	80010a6 <fsm_traffic_light+0x8ae>

	case GREEN_RED:
		//Set up LED
		HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin, SET);
 8000a78:	2201      	movs	r2, #1
 8000a7a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a7e:	4825      	ldr	r0, [pc, #148]	; (8000b14 <fsm_traffic_light+0x31c>)
 8000a80:	f001 f84f 	bl	8001b22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(G1_GPIO_Port, G1_Pin, RESET);
 8000a84:	2200      	movs	r2, #0
 8000a86:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a8a:	4822      	ldr	r0, [pc, #136]	; (8000b14 <fsm_traffic_light+0x31c>)
 8000a8c:	f001 f849 	bl	8001b22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(A2_GPIO_Port, A2_Pin, SET);
 8000a90:	2201      	movs	r2, #1
 8000a92:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a96:	481f      	ldr	r0, [pc, #124]	; (8000b14 <fsm_traffic_light+0x31c>)
 8000a98:	f001 f843 	bl	8001b22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(R2_GPIO_Port, R2_Pin, RESET);
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000aa2:	481c      	ldr	r0, [pc, #112]	; (8000b14 <fsm_traffic_light+0x31c>)
 8000aa4:	f001 f83d 	bl	8001b22 <HAL_GPIO_WritePin>

		if (timer_flag[0] == 1){
 8000aa8:	4b1f      	ldr	r3, [pc, #124]	; (8000b28 <fsm_traffic_light+0x330>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	2b01      	cmp	r3, #1
 8000aae:	d10c      	bne.n	8000aca <fsm_traffic_light+0x2d2>
			status = AMBER_RED;
 8000ab0:	4b17      	ldr	r3, [pc, #92]	; (8000b10 <fsm_traffic_light+0x318>)
 8000ab2:	220e      	movs	r2, #14
 8000ab4:	601a      	str	r2, [r3, #0]
			setTimer(0, AMBER * 1000);
 8000ab6:	4b1d      	ldr	r3, [pc, #116]	; (8000b2c <fsm_traffic_light+0x334>)
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000abe:	fb02 f303 	mul.w	r3, r2, r3
 8000ac2:	4619      	mov	r1, r3
 8000ac4:	2000      	movs	r0, #0
 8000ac6:	f000 fc1f 	bl	8001308 <setTimer>
		}

		if (timer_flag[1] == 1){
 8000aca:	4b17      	ldr	r3, [pc, #92]	; (8000b28 <fsm_traffic_light+0x330>)
 8000acc:	685b      	ldr	r3, [r3, #4]
 8000ace:	2b01      	cmp	r3, #1
 8000ad0:	d106      	bne.n	8000ae0 <fsm_traffic_light+0x2e8>
			updateLedBufferMode1();
 8000ad2:	f7ff fcc5 	bl	8000460 <updateLedBufferMode1>
			setTimer(1, 1000);
 8000ad6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000ada:	2001      	movs	r0, #1
 8000adc:	f000 fc14 	bl	8001308 <setTimer>
		}

		if (timer_flag[2] == 1){
 8000ae0:	4b11      	ldr	r3, [pc, #68]	; (8000b28 <fsm_traffic_light+0x330>)
 8000ae2:	689b      	ldr	r3, [r3, #8]
 8000ae4:	2b01      	cmp	r3, #1
 8000ae6:	d108      	bne.n	8000afa <fsm_traffic_light+0x302>
			update7SEG(index_led);
 8000ae8:	4b0d      	ldr	r3, [pc, #52]	; (8000b20 <fsm_traffic_light+0x328>)
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	4618      	mov	r0, r3
 8000aee:	f7ff fc57 	bl	80003a0 <update7SEG>
			setTimer(2, 250);
 8000af2:	21fa      	movs	r1, #250	; 0xfa
 8000af4:	2002      	movs	r0, #2
 8000af6:	f000 fc07 	bl	8001308 <setTimer>
		}
		// If button 1 is pressed, come to MODE2
		if (isButtonPressed(0) == 1){
 8000afa:	2000      	movs	r0, #0
 8000afc:	f7ff fb26 	bl	800014c <isButtonPressed>
 8000b00:	4603      	mov	r3, r0
 8000b02:	2b01      	cmp	r3, #1
 8000b04:	f040 82d1 	bne.w	80010aa <fsm_traffic_light+0x8b2>
			status = MODE2;
 8000b08:	4b01      	ldr	r3, [pc, #4]	; (8000b10 <fsm_traffic_light+0x318>)
 8000b0a:	2202      	movs	r2, #2
 8000b0c:	601a      	str	r2, [r3, #0]
		}
		break;
 8000b0e:	e2cc      	b.n	80010aa <fsm_traffic_light+0x8b2>
 8000b10:	200000b0 	.word	0x200000b0
 8000b14:	40010800 	.word	0x40010800
 8000b18:	20000044 	.word	0x20000044
 8000b1c:	20000040 	.word	0x20000040
 8000b20:	2000009c 	.word	0x2000009c
 8000b24:	20000050 	.word	0x20000050
 8000b28:	200000dc 	.word	0x200000dc
 8000b2c:	2000004c 	.word	0x2000004c

	case AMBER_RED:
		//Set up LED
		HAL_GPIO_WritePin(A1_GPIO_Port, A1_Pin, RESET);
 8000b30:	2200      	movs	r2, #0
 8000b32:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b36:	48a3      	ldr	r0, [pc, #652]	; (8000dc4 <fsm_traffic_light+0x5cc>)
 8000b38:	f000 fff3 	bl	8001b22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(G1_GPIO_Port, G1_Pin, SET);
 8000b3c:	2201      	movs	r2, #1
 8000b3e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b42:	48a0      	ldr	r0, [pc, #640]	; (8000dc4 <fsm_traffic_light+0x5cc>)
 8000b44:	f000 ffed 	bl	8001b22 <HAL_GPIO_WritePin>

		if (timer_flag[0] == 1){
 8000b48:	4b9f      	ldr	r3, [pc, #636]	; (8000dc8 <fsm_traffic_light+0x5d0>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	2b01      	cmp	r3, #1
 8000b4e:	d10c      	bne.n	8000b6a <fsm_traffic_light+0x372>
			status = RED_GREEN;
 8000b50:	4b9e      	ldr	r3, [pc, #632]	; (8000dcc <fsm_traffic_light+0x5d4>)
 8000b52:	220b      	movs	r2, #11
 8000b54:	601a      	str	r2, [r3, #0]
			setTimer(0, GREEN * 1000);
 8000b56:	4b9e      	ldr	r3, [pc, #632]	; (8000dd0 <fsm_traffic_light+0x5d8>)
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000b5e:	fb02 f303 	mul.w	r3, r2, r3
 8000b62:	4619      	mov	r1, r3
 8000b64:	2000      	movs	r0, #0
 8000b66:	f000 fbcf 	bl	8001308 <setTimer>
		}

		if (timer_flag[1] == 1){
 8000b6a:	4b97      	ldr	r3, [pc, #604]	; (8000dc8 <fsm_traffic_light+0x5d0>)
 8000b6c:	685b      	ldr	r3, [r3, #4]
 8000b6e:	2b01      	cmp	r3, #1
 8000b70:	d106      	bne.n	8000b80 <fsm_traffic_light+0x388>
			updateLedBufferMode1();
 8000b72:	f7ff fc75 	bl	8000460 <updateLedBufferMode1>
			setTimer(1, 1000);
 8000b76:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000b7a:	2001      	movs	r0, #1
 8000b7c:	f000 fbc4 	bl	8001308 <setTimer>
		}

		if (timer_flag[2] == 1){
 8000b80:	4b91      	ldr	r3, [pc, #580]	; (8000dc8 <fsm_traffic_light+0x5d0>)
 8000b82:	689b      	ldr	r3, [r3, #8]
 8000b84:	2b01      	cmp	r3, #1
 8000b86:	d108      	bne.n	8000b9a <fsm_traffic_light+0x3a2>
			update7SEG(index_led);
 8000b88:	4b92      	ldr	r3, [pc, #584]	; (8000dd4 <fsm_traffic_light+0x5dc>)
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	f7ff fc07 	bl	80003a0 <update7SEG>
			setTimer(2, 250);
 8000b92:	21fa      	movs	r1, #250	; 0xfa
 8000b94:	2002      	movs	r0, #2
 8000b96:	f000 fbb7 	bl	8001308 <setTimer>
		}
		// If button 1 is pressed, come to MODE2
		if (isButtonPressed(0) == 1){
 8000b9a:	2000      	movs	r0, #0
 8000b9c:	f7ff fad6 	bl	800014c <isButtonPressed>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	2b01      	cmp	r3, #1
 8000ba4:	f040 8292 	bne.w	80010cc <fsm_traffic_light+0x8d4>
			status = MODE2;
 8000ba8:	4b88      	ldr	r3, [pc, #544]	; (8000dcc <fsm_traffic_light+0x5d4>)
 8000baa:	2202      	movs	r2, #2
 8000bac:	601a      	str	r2, [r3, #0]
		}
		break;
 8000bae:	e28d      	b.n	80010cc <fsm_traffic_light+0x8d4>

	//MODE2
	case MODE2:
		status = AUTO_RED;
 8000bb0:	4b86      	ldr	r3, [pc, #536]	; (8000dcc <fsm_traffic_light+0x5d4>)
 8000bb2:	2215      	movs	r2, #21
 8000bb4:	601a      	str	r2, [r3, #0]
		//Set up RED LED
		HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin, RESET);
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000bbc:	4881      	ldr	r0, [pc, #516]	; (8000dc4 <fsm_traffic_light+0x5cc>)
 8000bbe:	f000 ffb0 	bl	8001b22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(A1_GPIO_Port, A1_Pin, SET);
 8000bc2:	2201      	movs	r2, #1
 8000bc4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000bc8:	487e      	ldr	r0, [pc, #504]	; (8000dc4 <fsm_traffic_light+0x5cc>)
 8000bca:	f000 ffaa 	bl	8001b22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(G1_GPIO_Port, G1_Pin, SET);
 8000bce:	2201      	movs	r2, #1
 8000bd0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000bd4:	487b      	ldr	r0, [pc, #492]	; (8000dc4 <fsm_traffic_light+0x5cc>)
 8000bd6:	f000 ffa4 	bl	8001b22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin, RESET);
 8000bda:	2200      	movs	r2, #0
 8000bdc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000be0:	4878      	ldr	r0, [pc, #480]	; (8000dc4 <fsm_traffic_light+0x5cc>)
 8000be2:	f000 ff9e 	bl	8001b22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(A2_GPIO_Port, A2_Pin, SET);
 8000be6:	2201      	movs	r2, #1
 8000be8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000bec:	4875      	ldr	r0, [pc, #468]	; (8000dc4 <fsm_traffic_light+0x5cc>)
 8000bee:	f000 ff98 	bl	8001b22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(G2_GPIO_Port, G2_Pin, SET);
 8000bf2:	2201      	movs	r2, #1
 8000bf4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000bf8:	4872      	ldr	r0, [pc, #456]	; (8000dc4 <fsm_traffic_light+0x5cc>)
 8000bfa:	f000 ff92 	bl	8001b22 <HAL_GPIO_WritePin>

		index_led = 0;
 8000bfe:	4b75      	ldr	r3, [pc, #468]	; (8000dd4 <fsm_traffic_light+0x5dc>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	601a      	str	r2, [r3, #0]
		updateLedBufferMode2();
 8000c04:	f7ff fd74 	bl	80006f0 <updateLedBufferMode2>
		update7SEG(index_led);
 8000c08:	4b72      	ldr	r3, [pc, #456]	; (8000dd4 <fsm_traffic_light+0x5dc>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	f7ff fbc7 	bl	80003a0 <update7SEG>

		setTimer(2, 250);			// Set timer for 7SEG LED
 8000c12:	21fa      	movs	r1, #250	; 0xfa
 8000c14:	2002      	movs	r0, #2
 8000c16:	f000 fb77 	bl	8001308 <setTimer>
		setTimer(3, 500);			// Set timer for blinking LED
 8000c1a:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000c1e:	2003      	movs	r0, #3
 8000c20:	f000 fb72 	bl	8001308 <setTimer>
		clearTimer(0);				// Clear timer display LED in MODE1
 8000c24:	2000      	movs	r0, #0
 8000c26:	f000 fb8f 	bl	8001348 <clearTimer>
		clearTimer(1);				// Clear timer update buffer
 8000c2a:	2001      	movs	r0, #1
 8000c2c:	f000 fb8c 	bl	8001348 <clearTimer>
		break;
 8000c30:	e259      	b.n	80010e6 <fsm_traffic_light+0x8ee>


	case AUTO_RED:
		if (timer_flag[2] == 1){
 8000c32:	4b65      	ldr	r3, [pc, #404]	; (8000dc8 <fsm_traffic_light+0x5d0>)
 8000c34:	689b      	ldr	r3, [r3, #8]
 8000c36:	2b01      	cmp	r3, #1
 8000c38:	d10a      	bne.n	8000c50 <fsm_traffic_light+0x458>
			updateLedBufferMode2();
 8000c3a:	f7ff fd59 	bl	80006f0 <updateLedBufferMode2>
			update7SEG(index_led);
 8000c3e:	4b65      	ldr	r3, [pc, #404]	; (8000dd4 <fsm_traffic_light+0x5dc>)
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	4618      	mov	r0, r3
 8000c44:	f7ff fbac 	bl	80003a0 <update7SEG>
			setTimer(2, 250);
 8000c48:	21fa      	movs	r1, #250	; 0xfa
 8000c4a:	2002      	movs	r0, #2
 8000c4c:	f000 fb5c 	bl	8001308 <setTimer>
		}
		if (timer_flag[3] == 1){
 8000c50:	4b5d      	ldr	r3, [pc, #372]	; (8000dc8 <fsm_traffic_light+0x5d0>)
 8000c52:	68db      	ldr	r3, [r3, #12]
 8000c54:	2b01      	cmp	r3, #1
 8000c56:	d10d      	bne.n	8000c74 <fsm_traffic_light+0x47c>
			HAL_GPIO_TogglePin(R1_GPIO_Port, R1_Pin);
 8000c58:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c5c:	4859      	ldr	r0, [pc, #356]	; (8000dc4 <fsm_traffic_light+0x5cc>)
 8000c5e:	f000 ff78 	bl	8001b52 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(R2_GPIO_Port, R2_Pin);
 8000c62:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c66:	4857      	ldr	r0, [pc, #348]	; (8000dc4 <fsm_traffic_light+0x5cc>)
 8000c68:	f000 ff73 	bl	8001b52 <HAL_GPIO_TogglePin>
			setTimer(3, 250);
 8000c6c:	21fa      	movs	r1, #250	; 0xfa
 8000c6e:	2003      	movs	r0, #3
 8000c70:	f000 fb4a 	bl	8001308 <setTimer>
		}
		if (isButtonPressed(0) == 1){
 8000c74:	2000      	movs	r0, #0
 8000c76:	f7ff fa69 	bl	800014c <isButtonPressed>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	2b01      	cmp	r3, #1
 8000c7e:	d102      	bne.n	8000c86 <fsm_traffic_light+0x48e>
			status = MODE3;
 8000c80:	4b52      	ldr	r3, [pc, #328]	; (8000dcc <fsm_traffic_light+0x5d4>)
 8000c82:	2203      	movs	r2, #3
 8000c84:	601a      	str	r2, [r3, #0]
		}
		if (isButtonPressed(1) == 1){
 8000c86:	2001      	movs	r0, #1
 8000c88:	f7ff fa60 	bl	800014c <isButtonPressed>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	2b01      	cmp	r3, #1
 8000c90:	f040 821e 	bne.w	80010d0 <fsm_traffic_light+0x8d8>
			status = INC_RED;
 8000c94:	4b4d      	ldr	r3, [pc, #308]	; (8000dcc <fsm_traffic_light+0x5d4>)
 8000c96:	2216      	movs	r2, #22
 8000c98:	601a      	str	r2, [r3, #0]
			if (RED >= 99) RED = GREEN + 1;
 8000c9a:	4b4f      	ldr	r3, [pc, #316]	; (8000dd8 <fsm_traffic_light+0x5e0>)
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	2b62      	cmp	r3, #98	; 0x62
 8000ca0:	dd05      	ble.n	8000cae <fsm_traffic_light+0x4b6>
 8000ca2:	4b4b      	ldr	r3, [pc, #300]	; (8000dd0 <fsm_traffic_light+0x5d8>)
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	3301      	adds	r3, #1
 8000ca8:	4a4b      	ldr	r2, [pc, #300]	; (8000dd8 <fsm_traffic_light+0x5e0>)
 8000caa:	6013      	str	r3, [r2, #0]
			else RED++;
		}
		break;
 8000cac:	e210      	b.n	80010d0 <fsm_traffic_light+0x8d8>
			else RED++;
 8000cae:	4b4a      	ldr	r3, [pc, #296]	; (8000dd8 <fsm_traffic_light+0x5e0>)
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	3301      	adds	r3, #1
 8000cb4:	4a48      	ldr	r2, [pc, #288]	; (8000dd8 <fsm_traffic_light+0x5e0>)
 8000cb6:	6013      	str	r3, [r2, #0]
		break;
 8000cb8:	e20a      	b.n	80010d0 <fsm_traffic_light+0x8d8>

	case INC_RED:
		if (timer_flag[2] == 1){
 8000cba:	4b43      	ldr	r3, [pc, #268]	; (8000dc8 <fsm_traffic_light+0x5d0>)
 8000cbc:	689b      	ldr	r3, [r3, #8]
 8000cbe:	2b01      	cmp	r3, #1
 8000cc0:	d10a      	bne.n	8000cd8 <fsm_traffic_light+0x4e0>
			updateLedBufferMode2();
 8000cc2:	f7ff fd15 	bl	80006f0 <updateLedBufferMode2>
			update7SEG(index_led);
 8000cc6:	4b43      	ldr	r3, [pc, #268]	; (8000dd4 <fsm_traffic_light+0x5dc>)
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	4618      	mov	r0, r3
 8000ccc:	f7ff fb68 	bl	80003a0 <update7SEG>
			setTimer(2, 250);
 8000cd0:	21fa      	movs	r1, #250	; 0xfa
 8000cd2:	2002      	movs	r0, #2
 8000cd4:	f000 fb18 	bl	8001308 <setTimer>
		}
		if (timer_flag[3] == 1){
 8000cd8:	4b3b      	ldr	r3, [pc, #236]	; (8000dc8 <fsm_traffic_light+0x5d0>)
 8000cda:	68db      	ldr	r3, [r3, #12]
 8000cdc:	2b01      	cmp	r3, #1
 8000cde:	d10d      	bne.n	8000cfc <fsm_traffic_light+0x504>
			HAL_GPIO_TogglePin(R1_GPIO_Port, R1_Pin);
 8000ce0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ce4:	4837      	ldr	r0, [pc, #220]	; (8000dc4 <fsm_traffic_light+0x5cc>)
 8000ce6:	f000 ff34 	bl	8001b52 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(R2_GPIO_Port, R2_Pin);
 8000cea:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000cee:	4835      	ldr	r0, [pc, #212]	; (8000dc4 <fsm_traffic_light+0x5cc>)
 8000cf0:	f000 ff2f 	bl	8001b52 <HAL_GPIO_TogglePin>
			setTimer(3, 250);
 8000cf4:	21fa      	movs	r1, #250	; 0xfa
 8000cf6:	2003      	movs	r0, #3
 8000cf8:	f000 fb06 	bl	8001308 <setTimer>
		}
		if (isButtonPressed(1) == 1){
 8000cfc:	2001      	movs	r0, #1
 8000cfe:	f7ff fa25 	bl	800014c <isButtonPressed>
 8000d02:	4603      	mov	r3, r0
 8000d04:	2b01      	cmp	r3, #1
 8000d06:	d111      	bne.n	8000d2c <fsm_traffic_light+0x534>
			status = INC_RED;
 8000d08:	4b30      	ldr	r3, [pc, #192]	; (8000dcc <fsm_traffic_light+0x5d4>)
 8000d0a:	2216      	movs	r2, #22
 8000d0c:	601a      	str	r2, [r3, #0]
			if (RED >= 99) RED = GREEN + 1;
 8000d0e:	4b32      	ldr	r3, [pc, #200]	; (8000dd8 <fsm_traffic_light+0x5e0>)
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	2b62      	cmp	r3, #98	; 0x62
 8000d14:	dd05      	ble.n	8000d22 <fsm_traffic_light+0x52a>
 8000d16:	4b2e      	ldr	r3, [pc, #184]	; (8000dd0 <fsm_traffic_light+0x5d8>)
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	3301      	adds	r3, #1
 8000d1c:	4a2e      	ldr	r2, [pc, #184]	; (8000dd8 <fsm_traffic_light+0x5e0>)
 8000d1e:	6013      	str	r3, [r2, #0]
 8000d20:	e004      	b.n	8000d2c <fsm_traffic_light+0x534>
			else RED++;
 8000d22:	4b2d      	ldr	r3, [pc, #180]	; (8000dd8 <fsm_traffic_light+0x5e0>)
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	3301      	adds	r3, #1
 8000d28:	4a2b      	ldr	r2, [pc, #172]	; (8000dd8 <fsm_traffic_light+0x5e0>)
 8000d2a:	6013      	str	r3, [r2, #0]
		}
		if (isButtonPressed(2) == 1){
 8000d2c:	2002      	movs	r0, #2
 8000d2e:	f7ff fa0d 	bl	800014c <isButtonPressed>
 8000d32:	4603      	mov	r3, r0
 8000d34:	2b01      	cmp	r3, #1
 8000d36:	f040 81cd 	bne.w	80010d4 <fsm_traffic_light+0x8dc>
			status = AUTO_RED;
 8000d3a:	4b24      	ldr	r3, [pc, #144]	; (8000dcc <fsm_traffic_light+0x5d4>)
 8000d3c:	2215      	movs	r2, #21
 8000d3e:	601a      	str	r2, [r3, #0]
//			GREEN = RED - AMBER;
		}
		break;
 8000d40:	e1c8      	b.n	80010d4 <fsm_traffic_light+0x8dc>


	//MODE3
	case MODE3:
		status = AUTO_AMBER;
 8000d42:	4b22      	ldr	r3, [pc, #136]	; (8000dcc <fsm_traffic_light+0x5d4>)
 8000d44:	221f      	movs	r2, #31
 8000d46:	601a      	str	r2, [r3, #0]
		//Set up AMBER LED
		HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin, SET);
 8000d48:	2201      	movs	r2, #1
 8000d4a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d4e:	481d      	ldr	r0, [pc, #116]	; (8000dc4 <fsm_traffic_light+0x5cc>)
 8000d50:	f000 fee7 	bl	8001b22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(A1_GPIO_Port, A1_Pin, RESET);
 8000d54:	2200      	movs	r2, #0
 8000d56:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d5a:	481a      	ldr	r0, [pc, #104]	; (8000dc4 <fsm_traffic_light+0x5cc>)
 8000d5c:	f000 fee1 	bl	8001b22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(G1_GPIO_Port, G1_Pin, SET);
 8000d60:	2201      	movs	r2, #1
 8000d62:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d66:	4817      	ldr	r0, [pc, #92]	; (8000dc4 <fsm_traffic_light+0x5cc>)
 8000d68:	f000 fedb 	bl	8001b22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(R2_GPIO_Port, R2_Pin, SET);
 8000d6c:	2201      	movs	r2, #1
 8000d6e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d72:	4814      	ldr	r0, [pc, #80]	; (8000dc4 <fsm_traffic_light+0x5cc>)
 8000d74:	f000 fed5 	bl	8001b22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(A2_GPIO_Port, A2_Pin, RESET);
 8000d78:	2200      	movs	r2, #0
 8000d7a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d7e:	4811      	ldr	r0, [pc, #68]	; (8000dc4 <fsm_traffic_light+0x5cc>)
 8000d80:	f000 fecf 	bl	8001b22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(G2_GPIO_Port, G2_Pin, SET);
 8000d84:	2201      	movs	r2, #1
 8000d86:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d8a:	480e      	ldr	r0, [pc, #56]	; (8000dc4 <fsm_traffic_light+0x5cc>)
 8000d8c:	f000 fec9 	bl	8001b22 <HAL_GPIO_WritePin>

		index_led = 0;
 8000d90:	4b10      	ldr	r3, [pc, #64]	; (8000dd4 <fsm_traffic_light+0x5dc>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	601a      	str	r2, [r3, #0]
		updateLedBufferMode3();
 8000d96:	f7ff fcd7 	bl	8000748 <updateLedBufferMode3>
		update7SEG(index_led);
 8000d9a:	4b0e      	ldr	r3, [pc, #56]	; (8000dd4 <fsm_traffic_light+0x5dc>)
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	4618      	mov	r0, r3
 8000da0:	f7ff fafe 	bl	80003a0 <update7SEG>

		setTimer(2, 250);			// Set timer for 7SEG LED
 8000da4:	21fa      	movs	r1, #250	; 0xfa
 8000da6:	2002      	movs	r0, #2
 8000da8:	f000 faae 	bl	8001308 <setTimer>
		setTimer(3, 500);			// Set timer for blinking LED
 8000dac:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000db0:	2003      	movs	r0, #3
 8000db2:	f000 faa9 	bl	8001308 <setTimer>
		clearTimer(0);				// Clear timer display LED in MODE1
 8000db6:	2000      	movs	r0, #0
 8000db8:	f000 fac6 	bl	8001348 <clearTimer>
		clearTimer(1);				// Clear timer update buffer
 8000dbc:	2001      	movs	r0, #1
 8000dbe:	f000 fac3 	bl	8001348 <clearTimer>
		break;
 8000dc2:	e190      	b.n	80010e6 <fsm_traffic_light+0x8ee>
 8000dc4:	40010800 	.word	0x40010800
 8000dc8:	200000dc 	.word	0x200000dc
 8000dcc:	200000b0 	.word	0x200000b0
 8000dd0:	20000050 	.word	0x20000050
 8000dd4:	2000009c 	.word	0x2000009c
 8000dd8:	20000048 	.word	0x20000048

	case AUTO_AMBER:
		if (timer_flag[2] == 1){
 8000ddc:	4bb4      	ldr	r3, [pc, #720]	; (80010b0 <fsm_traffic_light+0x8b8>)
 8000dde:	689b      	ldr	r3, [r3, #8]
 8000de0:	2b01      	cmp	r3, #1
 8000de2:	d10a      	bne.n	8000dfa <fsm_traffic_light+0x602>
			updateLedBufferMode3();
 8000de4:	f7ff fcb0 	bl	8000748 <updateLedBufferMode3>
			update7SEG(index_led);
 8000de8:	4bb2      	ldr	r3, [pc, #712]	; (80010b4 <fsm_traffic_light+0x8bc>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	4618      	mov	r0, r3
 8000dee:	f7ff fad7 	bl	80003a0 <update7SEG>
			setTimer(2, 250);
 8000df2:	21fa      	movs	r1, #250	; 0xfa
 8000df4:	2002      	movs	r0, #2
 8000df6:	f000 fa87 	bl	8001308 <setTimer>
		}
		if (timer_flag[3] == 1){
 8000dfa:	4bad      	ldr	r3, [pc, #692]	; (80010b0 <fsm_traffic_light+0x8b8>)
 8000dfc:	68db      	ldr	r3, [r3, #12]
 8000dfe:	2b01      	cmp	r3, #1
 8000e00:	d10d      	bne.n	8000e1e <fsm_traffic_light+0x626>
			HAL_GPIO_TogglePin(A1_GPIO_Port, A1_Pin);
 8000e02:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e06:	48ac      	ldr	r0, [pc, #688]	; (80010b8 <fsm_traffic_light+0x8c0>)
 8000e08:	f000 fea3 	bl	8001b52 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(A2_GPIO_Port, A2_Pin);
 8000e0c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e10:	48a9      	ldr	r0, [pc, #676]	; (80010b8 <fsm_traffic_light+0x8c0>)
 8000e12:	f000 fe9e 	bl	8001b52 <HAL_GPIO_TogglePin>
			setTimer(3, 250);
 8000e16:	21fa      	movs	r1, #250	; 0xfa
 8000e18:	2003      	movs	r0, #3
 8000e1a:	f000 fa75 	bl	8001308 <setTimer>
		}
		if (isButtonPressed(0) == 1){
 8000e1e:	2000      	movs	r0, #0
 8000e20:	f7ff f994 	bl	800014c <isButtonPressed>
 8000e24:	4603      	mov	r3, r0
 8000e26:	2b01      	cmp	r3, #1
 8000e28:	d102      	bne.n	8000e30 <fsm_traffic_light+0x638>
			status = MODE4;
 8000e2a:	4ba4      	ldr	r3, [pc, #656]	; (80010bc <fsm_traffic_light+0x8c4>)
 8000e2c:	2204      	movs	r2, #4
 8000e2e:	601a      	str	r2, [r3, #0]
		}
		if (isButtonPressed(1) == 1){
 8000e30:	2001      	movs	r0, #1
 8000e32:	f7ff f98b 	bl	800014c <isButtonPressed>
 8000e36:	4603      	mov	r3, r0
 8000e38:	2b01      	cmp	r3, #1
 8000e3a:	f040 814d 	bne.w	80010d8 <fsm_traffic_light+0x8e0>
			status = INC_AMBER;
 8000e3e:	4b9f      	ldr	r3, [pc, #636]	; (80010bc <fsm_traffic_light+0x8c4>)
 8000e40:	2220      	movs	r2, #32
 8000e42:	601a      	str	r2, [r3, #0]
			if (AMBER >= 4) AMBER = 1;
 8000e44:	4b9e      	ldr	r3, [pc, #632]	; (80010c0 <fsm_traffic_light+0x8c8>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	2b03      	cmp	r3, #3
 8000e4a:	dd03      	ble.n	8000e54 <fsm_traffic_light+0x65c>
 8000e4c:	4b9c      	ldr	r3, [pc, #624]	; (80010c0 <fsm_traffic_light+0x8c8>)
 8000e4e:	2201      	movs	r2, #1
 8000e50:	601a      	str	r2, [r3, #0]
			else AMBER++;
		}
		break;
 8000e52:	e141      	b.n	80010d8 <fsm_traffic_light+0x8e0>
			else AMBER++;
 8000e54:	4b9a      	ldr	r3, [pc, #616]	; (80010c0 <fsm_traffic_light+0x8c8>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	3301      	adds	r3, #1
 8000e5a:	4a99      	ldr	r2, [pc, #612]	; (80010c0 <fsm_traffic_light+0x8c8>)
 8000e5c:	6013      	str	r3, [r2, #0]
		break;
 8000e5e:	e13b      	b.n	80010d8 <fsm_traffic_light+0x8e0>

	case INC_AMBER:
		if (timer_flag[2] == 1){
 8000e60:	4b93      	ldr	r3, [pc, #588]	; (80010b0 <fsm_traffic_light+0x8b8>)
 8000e62:	689b      	ldr	r3, [r3, #8]
 8000e64:	2b01      	cmp	r3, #1
 8000e66:	d10a      	bne.n	8000e7e <fsm_traffic_light+0x686>
			updateLedBufferMode3();
 8000e68:	f7ff fc6e 	bl	8000748 <updateLedBufferMode3>
			update7SEG(index_led);
 8000e6c:	4b91      	ldr	r3, [pc, #580]	; (80010b4 <fsm_traffic_light+0x8bc>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	4618      	mov	r0, r3
 8000e72:	f7ff fa95 	bl	80003a0 <update7SEG>
			setTimer(2, 250);
 8000e76:	21fa      	movs	r1, #250	; 0xfa
 8000e78:	2002      	movs	r0, #2
 8000e7a:	f000 fa45 	bl	8001308 <setTimer>
		}
		if (timer_flag[3] == 1){
 8000e7e:	4b8c      	ldr	r3, [pc, #560]	; (80010b0 <fsm_traffic_light+0x8b8>)
 8000e80:	68db      	ldr	r3, [r3, #12]
 8000e82:	2b01      	cmp	r3, #1
 8000e84:	d10d      	bne.n	8000ea2 <fsm_traffic_light+0x6aa>
			HAL_GPIO_TogglePin(A1_GPIO_Port, A1_Pin);
 8000e86:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e8a:	488b      	ldr	r0, [pc, #556]	; (80010b8 <fsm_traffic_light+0x8c0>)
 8000e8c:	f000 fe61 	bl	8001b52 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(A2_GPIO_Port, A2_Pin);
 8000e90:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e94:	4888      	ldr	r0, [pc, #544]	; (80010b8 <fsm_traffic_light+0x8c0>)
 8000e96:	f000 fe5c 	bl	8001b52 <HAL_GPIO_TogglePin>
			setTimer(3, 250);
 8000e9a:	21fa      	movs	r1, #250	; 0xfa
 8000e9c:	2003      	movs	r0, #3
 8000e9e:	f000 fa33 	bl	8001308 <setTimer>
		}
		if (isButtonPressed(1) == 1){
 8000ea2:	2001      	movs	r0, #1
 8000ea4:	f7ff f952 	bl	800014c <isButtonPressed>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	2b01      	cmp	r3, #1
 8000eac:	d10f      	bne.n	8000ece <fsm_traffic_light+0x6d6>
			status = INC_AMBER;
 8000eae:	4b83      	ldr	r3, [pc, #524]	; (80010bc <fsm_traffic_light+0x8c4>)
 8000eb0:	2220      	movs	r2, #32
 8000eb2:	601a      	str	r2, [r3, #0]
			if (AMBER >= 4) AMBER = 1;
 8000eb4:	4b82      	ldr	r3, [pc, #520]	; (80010c0 <fsm_traffic_light+0x8c8>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	2b03      	cmp	r3, #3
 8000eba:	dd03      	ble.n	8000ec4 <fsm_traffic_light+0x6cc>
 8000ebc:	4b80      	ldr	r3, [pc, #512]	; (80010c0 <fsm_traffic_light+0x8c8>)
 8000ebe:	2201      	movs	r2, #1
 8000ec0:	601a      	str	r2, [r3, #0]
 8000ec2:	e004      	b.n	8000ece <fsm_traffic_light+0x6d6>
			else AMBER++;
 8000ec4:	4b7e      	ldr	r3, [pc, #504]	; (80010c0 <fsm_traffic_light+0x8c8>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	3301      	adds	r3, #1
 8000eca:	4a7d      	ldr	r2, [pc, #500]	; (80010c0 <fsm_traffic_light+0x8c8>)
 8000ecc:	6013      	str	r3, [r2, #0]
		}
		if (isButtonPressed(2) == 1){
 8000ece:	2002      	movs	r0, #2
 8000ed0:	f7ff f93c 	bl	800014c <isButtonPressed>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	2b01      	cmp	r3, #1
 8000ed8:	f040 8100 	bne.w	80010dc <fsm_traffic_light+0x8e4>
			status = AUTO_AMBER;
 8000edc:	4b77      	ldr	r3, [pc, #476]	; (80010bc <fsm_traffic_light+0x8c4>)
 8000ede:	221f      	movs	r2, #31
 8000ee0:	601a      	str	r2, [r3, #0]
//			if (RED <= AMBER) RED = AMBER + 1;
//			GREEN = RED - AMBER;
		}
		break;
 8000ee2:	e0fb      	b.n	80010dc <fsm_traffic_light+0x8e4>

	//MODE4
	case MODE4:
		status = AUTO_GREEN;
 8000ee4:	4b75      	ldr	r3, [pc, #468]	; (80010bc <fsm_traffic_light+0x8c4>)
 8000ee6:	2229      	movs	r2, #41	; 0x29
 8000ee8:	601a      	str	r2, [r3, #0]
		//Set up GREEN LED
		HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin, SET);
 8000eea:	2201      	movs	r2, #1
 8000eec:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ef0:	4871      	ldr	r0, [pc, #452]	; (80010b8 <fsm_traffic_light+0x8c0>)
 8000ef2:	f000 fe16 	bl	8001b22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(A1_GPIO_Port, A1_Pin, SET);
 8000ef6:	2201      	movs	r2, #1
 8000ef8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000efc:	486e      	ldr	r0, [pc, #440]	; (80010b8 <fsm_traffic_light+0x8c0>)
 8000efe:	f000 fe10 	bl	8001b22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(G1_GPIO_Port, G1_Pin, RESET);
 8000f02:	2200      	movs	r2, #0
 8000f04:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f08:	486b      	ldr	r0, [pc, #428]	; (80010b8 <fsm_traffic_light+0x8c0>)
 8000f0a:	f000 fe0a 	bl	8001b22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(R2_GPIO_Port, R2_Pin, SET);
 8000f0e:	2201      	movs	r2, #1
 8000f10:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f14:	4868      	ldr	r0, [pc, #416]	; (80010b8 <fsm_traffic_light+0x8c0>)
 8000f16:	f000 fe04 	bl	8001b22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(A2_GPIO_Port, A2_Pin, SET);
 8000f1a:	2201      	movs	r2, #1
 8000f1c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f20:	4865      	ldr	r0, [pc, #404]	; (80010b8 <fsm_traffic_light+0x8c0>)
 8000f22:	f000 fdfe 	bl	8001b22 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(G2_GPIO_Port, G2_Pin, RESET);
 8000f26:	2200      	movs	r2, #0
 8000f28:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f2c:	4862      	ldr	r0, [pc, #392]	; (80010b8 <fsm_traffic_light+0x8c0>)
 8000f2e:	f000 fdf8 	bl	8001b22 <HAL_GPIO_WritePin>

		index_led = 0;
 8000f32:	4b60      	ldr	r3, [pc, #384]	; (80010b4 <fsm_traffic_light+0x8bc>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	601a      	str	r2, [r3, #0]
		updateLedBufferMode4();
 8000f38:	f7ff fc32 	bl	80007a0 <updateLedBufferMode4>
		update7SEG(index_led);
 8000f3c:	4b5d      	ldr	r3, [pc, #372]	; (80010b4 <fsm_traffic_light+0x8bc>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	4618      	mov	r0, r3
 8000f42:	f7ff fa2d 	bl	80003a0 <update7SEG>

		setTimer(2, 250);			// Set timer for 7SEG LED
 8000f46:	21fa      	movs	r1, #250	; 0xfa
 8000f48:	2002      	movs	r0, #2
 8000f4a:	f000 f9dd 	bl	8001308 <setTimer>
		setTimer(3, 500);			// Set timer for blinking LED
 8000f4e:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000f52:	2003      	movs	r0, #3
 8000f54:	f000 f9d8 	bl	8001308 <setTimer>
		clearTimer(0);				// Clear timer display LED in MODE1
 8000f58:	2000      	movs	r0, #0
 8000f5a:	f000 f9f5 	bl	8001348 <clearTimer>
		clearTimer(1);				// Clear timer update buffer
 8000f5e:	2001      	movs	r0, #1
 8000f60:	f000 f9f2 	bl	8001348 <clearTimer>
		break;
 8000f64:	e0bf      	b.n	80010e6 <fsm_traffic_light+0x8ee>

	case AUTO_GREEN:
		if (timer_flag[2] == 1){
 8000f66:	4b52      	ldr	r3, [pc, #328]	; (80010b0 <fsm_traffic_light+0x8b8>)
 8000f68:	689b      	ldr	r3, [r3, #8]
 8000f6a:	2b01      	cmp	r3, #1
 8000f6c:	d10a      	bne.n	8000f84 <fsm_traffic_light+0x78c>
			updateLedBufferMode4();
 8000f6e:	f7ff fc17 	bl	80007a0 <updateLedBufferMode4>
			update7SEG(index_led);
 8000f72:	4b50      	ldr	r3, [pc, #320]	; (80010b4 <fsm_traffic_light+0x8bc>)
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	4618      	mov	r0, r3
 8000f78:	f7ff fa12 	bl	80003a0 <update7SEG>
			setTimer(2, 250);
 8000f7c:	21fa      	movs	r1, #250	; 0xfa
 8000f7e:	2002      	movs	r0, #2
 8000f80:	f000 f9c2 	bl	8001308 <setTimer>
		}
		if (timer_flag[3] == 1){
 8000f84:	4b4a      	ldr	r3, [pc, #296]	; (80010b0 <fsm_traffic_light+0x8b8>)
 8000f86:	68db      	ldr	r3, [r3, #12]
 8000f88:	2b01      	cmp	r3, #1
 8000f8a:	d10d      	bne.n	8000fa8 <fsm_traffic_light+0x7b0>
			HAL_GPIO_TogglePin(G1_GPIO_Port, G1_Pin);
 8000f8c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f90:	4849      	ldr	r0, [pc, #292]	; (80010b8 <fsm_traffic_light+0x8c0>)
 8000f92:	f000 fdde 	bl	8001b52 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(G2_GPIO_Port, G2_Pin);
 8000f96:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f9a:	4847      	ldr	r0, [pc, #284]	; (80010b8 <fsm_traffic_light+0x8c0>)
 8000f9c:	f000 fdd9 	bl	8001b52 <HAL_GPIO_TogglePin>
			setTimer(3, 250);
 8000fa0:	21fa      	movs	r1, #250	; 0xfa
 8000fa2:	2003      	movs	r0, #3
 8000fa4:	f000 f9b0 	bl	8001308 <setTimer>
		}
		if (isButtonPressed(0) == 1){
 8000fa8:	2000      	movs	r0, #0
 8000faa:	f7ff f8cf 	bl	800014c <isButtonPressed>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	2b01      	cmp	r3, #1
 8000fb2:	d114      	bne.n	8000fde <fsm_traffic_light+0x7e6>
			status = MODE1;
 8000fb4:	4b41      	ldr	r3, [pc, #260]	; (80010bc <fsm_traffic_light+0x8c4>)
 8000fb6:	2201      	movs	r2, #1
 8000fb8:	601a      	str	r2, [r3, #0]
			if (GREEN <= AMBER) GREEN = AMBER + 1;
 8000fba:	4b42      	ldr	r3, [pc, #264]	; (80010c4 <fsm_traffic_light+0x8cc>)
 8000fbc:	681a      	ldr	r2, [r3, #0]
 8000fbe:	4b40      	ldr	r3, [pc, #256]	; (80010c0 <fsm_traffic_light+0x8c8>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	429a      	cmp	r2, r3
 8000fc4:	dc04      	bgt.n	8000fd0 <fsm_traffic_light+0x7d8>
 8000fc6:	4b3e      	ldr	r3, [pc, #248]	; (80010c0 <fsm_traffic_light+0x8c8>)
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	3301      	adds	r3, #1
 8000fcc:	4a3d      	ldr	r2, [pc, #244]	; (80010c4 <fsm_traffic_light+0x8cc>)
 8000fce:	6013      	str	r3, [r2, #0]
			RED = GREEN + AMBER;
 8000fd0:	4b3c      	ldr	r3, [pc, #240]	; (80010c4 <fsm_traffic_light+0x8cc>)
 8000fd2:	681a      	ldr	r2, [r3, #0]
 8000fd4:	4b3a      	ldr	r3, [pc, #232]	; (80010c0 <fsm_traffic_light+0x8c8>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	4413      	add	r3, r2
 8000fda:	4a3b      	ldr	r2, [pc, #236]	; (80010c8 <fsm_traffic_light+0x8d0>)
 8000fdc:	6013      	str	r3, [r2, #0]
		}
		if (isButtonPressed(1) == 1){
 8000fde:	2001      	movs	r0, #1
 8000fe0:	f7ff f8b4 	bl	800014c <isButtonPressed>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	2b01      	cmp	r3, #1
 8000fe8:	d17a      	bne.n	80010e0 <fsm_traffic_light+0x8e8>
			status = INC_GREEN;
 8000fea:	4b34      	ldr	r3, [pc, #208]	; (80010bc <fsm_traffic_light+0x8c4>)
 8000fec:	222a      	movs	r2, #42	; 0x2a
 8000fee:	601a      	str	r2, [r3, #0]
			if (GREEN >= 99) GREEN = RED - AMBER;
 8000ff0:	4b34      	ldr	r3, [pc, #208]	; (80010c4 <fsm_traffic_light+0x8cc>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	2b62      	cmp	r3, #98	; 0x62
 8000ff6:	dd07      	ble.n	8001008 <fsm_traffic_light+0x810>
 8000ff8:	4b33      	ldr	r3, [pc, #204]	; (80010c8 <fsm_traffic_light+0x8d0>)
 8000ffa:	681a      	ldr	r2, [r3, #0]
 8000ffc:	4b30      	ldr	r3, [pc, #192]	; (80010c0 <fsm_traffic_light+0x8c8>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	1ad3      	subs	r3, r2, r3
 8001002:	4a30      	ldr	r2, [pc, #192]	; (80010c4 <fsm_traffic_light+0x8cc>)
 8001004:	6013      	str	r3, [r2, #0]
			else GREEN++;
		}
		break;
 8001006:	e06b      	b.n	80010e0 <fsm_traffic_light+0x8e8>
			else GREEN++;
 8001008:	4b2e      	ldr	r3, [pc, #184]	; (80010c4 <fsm_traffic_light+0x8cc>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	3301      	adds	r3, #1
 800100e:	4a2d      	ldr	r2, [pc, #180]	; (80010c4 <fsm_traffic_light+0x8cc>)
 8001010:	6013      	str	r3, [r2, #0]
		break;
 8001012:	e065      	b.n	80010e0 <fsm_traffic_light+0x8e8>

	case INC_GREEN:
		if (timer_flag[2] == 1){
 8001014:	4b26      	ldr	r3, [pc, #152]	; (80010b0 <fsm_traffic_light+0x8b8>)
 8001016:	689b      	ldr	r3, [r3, #8]
 8001018:	2b01      	cmp	r3, #1
 800101a:	d10a      	bne.n	8001032 <fsm_traffic_light+0x83a>
			updateLedBufferMode4();
 800101c:	f7ff fbc0 	bl	80007a0 <updateLedBufferMode4>
			update7SEG(index_led);
 8001020:	4b24      	ldr	r3, [pc, #144]	; (80010b4 <fsm_traffic_light+0x8bc>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	4618      	mov	r0, r3
 8001026:	f7ff f9bb 	bl	80003a0 <update7SEG>
			setTimer(2, 250);
 800102a:	21fa      	movs	r1, #250	; 0xfa
 800102c:	2002      	movs	r0, #2
 800102e:	f000 f96b 	bl	8001308 <setTimer>
		}
		if (timer_flag[3] == 1){
 8001032:	4b1f      	ldr	r3, [pc, #124]	; (80010b0 <fsm_traffic_light+0x8b8>)
 8001034:	68db      	ldr	r3, [r3, #12]
 8001036:	2b01      	cmp	r3, #1
 8001038:	d10d      	bne.n	8001056 <fsm_traffic_light+0x85e>
			HAL_GPIO_TogglePin(G1_GPIO_Port, G1_Pin);
 800103a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800103e:	481e      	ldr	r0, [pc, #120]	; (80010b8 <fsm_traffic_light+0x8c0>)
 8001040:	f000 fd87 	bl	8001b52 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(G2_GPIO_Port, G2_Pin);
 8001044:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001048:	481b      	ldr	r0, [pc, #108]	; (80010b8 <fsm_traffic_light+0x8c0>)
 800104a:	f000 fd82 	bl	8001b52 <HAL_GPIO_TogglePin>
			setTimer(3, 250);
 800104e:	21fa      	movs	r1, #250	; 0xfa
 8001050:	2003      	movs	r0, #3
 8001052:	f000 f959 	bl	8001308 <setTimer>
		}
		if (isButtonPressed(1) == 1){
 8001056:	2001      	movs	r0, #1
 8001058:	f7ff f878 	bl	800014c <isButtonPressed>
 800105c:	4603      	mov	r3, r0
 800105e:	2b01      	cmp	r3, #1
 8001060:	d113      	bne.n	800108a <fsm_traffic_light+0x892>
			status = INC_GREEN;
 8001062:	4b16      	ldr	r3, [pc, #88]	; (80010bc <fsm_traffic_light+0x8c4>)
 8001064:	222a      	movs	r2, #42	; 0x2a
 8001066:	601a      	str	r2, [r3, #0]
			if (GREEN >= 99) GREEN = RED - AMBER;
 8001068:	4b16      	ldr	r3, [pc, #88]	; (80010c4 <fsm_traffic_light+0x8cc>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	2b62      	cmp	r3, #98	; 0x62
 800106e:	dd07      	ble.n	8001080 <fsm_traffic_light+0x888>
 8001070:	4b15      	ldr	r3, [pc, #84]	; (80010c8 <fsm_traffic_light+0x8d0>)
 8001072:	681a      	ldr	r2, [r3, #0]
 8001074:	4b12      	ldr	r3, [pc, #72]	; (80010c0 <fsm_traffic_light+0x8c8>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	1ad3      	subs	r3, r2, r3
 800107a:	4a12      	ldr	r2, [pc, #72]	; (80010c4 <fsm_traffic_light+0x8cc>)
 800107c:	6013      	str	r3, [r2, #0]
 800107e:	e004      	b.n	800108a <fsm_traffic_light+0x892>
			else GREEN++;
 8001080:	4b10      	ldr	r3, [pc, #64]	; (80010c4 <fsm_traffic_light+0x8cc>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	3301      	adds	r3, #1
 8001086:	4a0f      	ldr	r2, [pc, #60]	; (80010c4 <fsm_traffic_light+0x8cc>)
 8001088:	6013      	str	r3, [r2, #0]
		}
		if (isButtonPressed(2) == 1){
 800108a:	2002      	movs	r0, #2
 800108c:	f7ff f85e 	bl	800014c <isButtonPressed>
 8001090:	4603      	mov	r3, r0
 8001092:	2b01      	cmp	r3, #1
 8001094:	d126      	bne.n	80010e4 <fsm_traffic_light+0x8ec>
			status = AUTO_GREEN;
 8001096:	4b09      	ldr	r3, [pc, #36]	; (80010bc <fsm_traffic_light+0x8c4>)
 8001098:	2229      	movs	r2, #41	; 0x29
 800109a:	601a      	str	r2, [r3, #0]
//			RED = GREEN + AMBER;
		}
		break;
 800109c:	e022      	b.n	80010e4 <fsm_traffic_light+0x8ec>

	default:
		break;
 800109e:	bf00      	nop
 80010a0:	e021      	b.n	80010e6 <fsm_traffic_light+0x8ee>
		break;
 80010a2:	bf00      	nop
 80010a4:	e01f      	b.n	80010e6 <fsm_traffic_light+0x8ee>
		break;
 80010a6:	bf00      	nop
 80010a8:	e01d      	b.n	80010e6 <fsm_traffic_light+0x8ee>
		break;
 80010aa:	bf00      	nop
 80010ac:	e01b      	b.n	80010e6 <fsm_traffic_light+0x8ee>
 80010ae:	bf00      	nop
 80010b0:	200000dc 	.word	0x200000dc
 80010b4:	2000009c 	.word	0x2000009c
 80010b8:	40010800 	.word	0x40010800
 80010bc:	200000b0 	.word	0x200000b0
 80010c0:	2000004c 	.word	0x2000004c
 80010c4:	20000050 	.word	0x20000050
 80010c8:	20000048 	.word	0x20000048
		break;
 80010cc:	bf00      	nop
 80010ce:	e00a      	b.n	80010e6 <fsm_traffic_light+0x8ee>
		break;
 80010d0:	bf00      	nop
 80010d2:	e008      	b.n	80010e6 <fsm_traffic_light+0x8ee>
		break;
 80010d4:	bf00      	nop
 80010d6:	e006      	b.n	80010e6 <fsm_traffic_light+0x8ee>
		break;
 80010d8:	bf00      	nop
 80010da:	e004      	b.n	80010e6 <fsm_traffic_light+0x8ee>
		break;
 80010dc:	bf00      	nop
 80010de:	e002      	b.n	80010e6 <fsm_traffic_light+0x8ee>
		break;
 80010e0:	bf00      	nop
 80010e2:	e000      	b.n	80010e6 <fsm_traffic_light+0x8ee>
		break;
 80010e4:	bf00      	nop

	}
}
 80010e6:	bf00      	nop
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop

080010ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010f0:	f000 fa86 	bl	8001600 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010f4:	f000 f80c 	bl	8001110 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_TIM2_Init();
 80010f8:	f000 f846 	bl	8001188 <MX_TIM2_Init>
  MX_GPIO_Init();
 80010fc:	f000 f890 	bl	8001220 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8001100:	4802      	ldr	r0, [pc, #8]	; (800110c <main+0x20>)
 8001102:	f001 f9b9 	bl	8002478 <HAL_TIM_Base_Start_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  fsm_traffic_light();
 8001106:	f7ff fb77 	bl	80007f8 <fsm_traffic_light>
 800110a:	e7fc      	b.n	8001106 <main+0x1a>
 800110c:	20000104 	.word	0x20000104

08001110 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b090      	sub	sp, #64	; 0x40
 8001114:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001116:	f107 0318 	add.w	r3, r7, #24
 800111a:	2228      	movs	r2, #40	; 0x28
 800111c:	2100      	movs	r1, #0
 800111e:	4618      	mov	r0, r3
 8001120:	f001 fd66 	bl	8002bf0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001124:	1d3b      	adds	r3, r7, #4
 8001126:	2200      	movs	r2, #0
 8001128:	601a      	str	r2, [r3, #0]
 800112a:	605a      	str	r2, [r3, #4]
 800112c:	609a      	str	r2, [r3, #8]
 800112e:	60da      	str	r2, [r3, #12]
 8001130:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001132:	2302      	movs	r3, #2
 8001134:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001136:	2301      	movs	r3, #1
 8001138:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800113a:	2310      	movs	r3, #16
 800113c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800113e:	2300      	movs	r3, #0
 8001140:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001142:	f107 0318 	add.w	r3, r7, #24
 8001146:	4618      	mov	r0, r3
 8001148:	f000 fd1c 	bl	8001b84 <HAL_RCC_OscConfig>
 800114c:	4603      	mov	r3, r0
 800114e:	2b00      	cmp	r3, #0
 8001150:	d001      	beq.n	8001156 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8001152:	f000 f8d3 	bl	80012fc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001156:	230f      	movs	r3, #15
 8001158:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800115a:	2300      	movs	r3, #0
 800115c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800115e:	2300      	movs	r3, #0
 8001160:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001162:	2300      	movs	r3, #0
 8001164:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001166:	2300      	movs	r3, #0
 8001168:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800116a:	1d3b      	adds	r3, r7, #4
 800116c:	2100      	movs	r1, #0
 800116e:	4618      	mov	r0, r3
 8001170:	f000 ff88 	bl	8002084 <HAL_RCC_ClockConfig>
 8001174:	4603      	mov	r3, r0
 8001176:	2b00      	cmp	r3, #0
 8001178:	d001      	beq.n	800117e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800117a:	f000 f8bf 	bl	80012fc <Error_Handler>
  }
}
 800117e:	bf00      	nop
 8001180:	3740      	adds	r7, #64	; 0x40
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}
	...

08001188 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b086      	sub	sp, #24
 800118c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800118e:	f107 0308 	add.w	r3, r7, #8
 8001192:	2200      	movs	r2, #0
 8001194:	601a      	str	r2, [r3, #0]
 8001196:	605a      	str	r2, [r3, #4]
 8001198:	609a      	str	r2, [r3, #8]
 800119a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800119c:	463b      	mov	r3, r7
 800119e:	2200      	movs	r2, #0
 80011a0:	601a      	str	r2, [r3, #0]
 80011a2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80011a4:	4b1d      	ldr	r3, [pc, #116]	; (800121c <MX_TIM2_Init+0x94>)
 80011a6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80011aa:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 80011ac:	4b1b      	ldr	r3, [pc, #108]	; (800121c <MX_TIM2_Init+0x94>)
 80011ae:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80011b2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011b4:	4b19      	ldr	r3, [pc, #100]	; (800121c <MX_TIM2_Init+0x94>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 80011ba:	4b18      	ldr	r3, [pc, #96]	; (800121c <MX_TIM2_Init+0x94>)
 80011bc:	2209      	movs	r2, #9
 80011be:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011c0:	4b16      	ldr	r3, [pc, #88]	; (800121c <MX_TIM2_Init+0x94>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011c6:	4b15      	ldr	r3, [pc, #84]	; (800121c <MX_TIM2_Init+0x94>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80011cc:	4813      	ldr	r0, [pc, #76]	; (800121c <MX_TIM2_Init+0x94>)
 80011ce:	f001 f903 	bl	80023d8 <HAL_TIM_Base_Init>
 80011d2:	4603      	mov	r3, r0
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d001      	beq.n	80011dc <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80011d8:	f000 f890 	bl	80012fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011e0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80011e2:	f107 0308 	add.w	r3, r7, #8
 80011e6:	4619      	mov	r1, r3
 80011e8:	480c      	ldr	r0, [pc, #48]	; (800121c <MX_TIM2_Init+0x94>)
 80011ea:	f001 fa99 	bl	8002720 <HAL_TIM_ConfigClockSource>
 80011ee:	4603      	mov	r3, r0
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d001      	beq.n	80011f8 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80011f4:	f000 f882 	bl	80012fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011f8:	2300      	movs	r3, #0
 80011fa:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011fc:	2300      	movs	r3, #0
 80011fe:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001200:	463b      	mov	r3, r7
 8001202:	4619      	mov	r1, r3
 8001204:	4805      	ldr	r0, [pc, #20]	; (800121c <MX_TIM2_Init+0x94>)
 8001206:	f001 fc65 	bl	8002ad4 <HAL_TIMEx_MasterConfigSynchronization>
 800120a:	4603      	mov	r3, r0
 800120c:	2b00      	cmp	r3, #0
 800120e:	d001      	beq.n	8001214 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001210:	f000 f874 	bl	80012fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001214:	bf00      	nop
 8001216:	3718      	adds	r7, #24
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}
 800121c:	20000104 	.word	0x20000104

08001220 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b086      	sub	sp, #24
 8001224:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001226:	f107 0308 	add.w	r3, r7, #8
 800122a:	2200      	movs	r2, #0
 800122c:	601a      	str	r2, [r3, #0]
 800122e:	605a      	str	r2, [r3, #4]
 8001230:	609a      	str	r2, [r3, #8]
 8001232:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001234:	4b28      	ldr	r3, [pc, #160]	; (80012d8 <MX_GPIO_Init+0xb8>)
 8001236:	699b      	ldr	r3, [r3, #24]
 8001238:	4a27      	ldr	r2, [pc, #156]	; (80012d8 <MX_GPIO_Init+0xb8>)
 800123a:	f043 0304 	orr.w	r3, r3, #4
 800123e:	6193      	str	r3, [r2, #24]
 8001240:	4b25      	ldr	r3, [pc, #148]	; (80012d8 <MX_GPIO_Init+0xb8>)
 8001242:	699b      	ldr	r3, [r3, #24]
 8001244:	f003 0304 	and.w	r3, r3, #4
 8001248:	607b      	str	r3, [r7, #4]
 800124a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800124c:	4b22      	ldr	r3, [pc, #136]	; (80012d8 <MX_GPIO_Init+0xb8>)
 800124e:	699b      	ldr	r3, [r3, #24]
 8001250:	4a21      	ldr	r2, [pc, #132]	; (80012d8 <MX_GPIO_Init+0xb8>)
 8001252:	f043 0308 	orr.w	r3, r3, #8
 8001256:	6193      	str	r3, [r2, #24]
 8001258:	4b1f      	ldr	r3, [pc, #124]	; (80012d8 <MX_GPIO_Init+0xb8>)
 800125a:	699b      	ldr	r3, [r3, #24]
 800125c:	f003 0308 	and.w	r3, r3, #8
 8001260:	603b      	str	r3, [r7, #0]
 8001262:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, EN0_Pin|EN1_Pin|EN2_Pin|EN3_Pin
 8001264:	2200      	movs	r2, #0
 8001266:	f64f 71c0 	movw	r1, #65472	; 0xffc0
 800126a:	481c      	ldr	r0, [pc, #112]	; (80012dc <MX_GPIO_Init+0xbc>)
 800126c:	f000 fc59 	bl	8001b22 <HAL_GPIO_WritePin>
                          |R1_Pin|A1_Pin|G1_Pin|R2_Pin
                          |A2_Pin|G2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SEG0_Pin|SEG1_Pin|SEG2_Pin|D0_Pin
 8001270:	2200      	movs	r2, #0
 8001272:	f643 71ff 	movw	r1, #16383	; 0x3fff
 8001276:	481a      	ldr	r0, [pc, #104]	; (80012e0 <MX_GPIO_Init+0xc0>)
 8001278:	f000 fc53 	bl	8001b22 <HAL_GPIO_WritePin>
                          |E0_Pin|F0_Pin|G0_Pin|SEG3_Pin
                          |SEG4_Pin|SEG5_Pin|SEG6_Pin|A0_Pin
                          |B0_Pin|C0_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : BTN1_Pin BTN2_Pin BTN3_Pin */
  GPIO_InitStruct.Pin = BTN1_Pin|BTN2_Pin|BTN3_Pin;
 800127c:	2338      	movs	r3, #56	; 0x38
 800127e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001280:	2300      	movs	r3, #0
 8001282:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001284:	2300      	movs	r3, #0
 8001286:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001288:	f107 0308 	add.w	r3, r7, #8
 800128c:	4619      	mov	r1, r3
 800128e:	4813      	ldr	r0, [pc, #76]	; (80012dc <MX_GPIO_Init+0xbc>)
 8001290:	f000 fab6 	bl	8001800 <HAL_GPIO_Init>

  /*Configure GPIO pins : EN0_Pin EN1_Pin EN2_Pin EN3_Pin
                           R1_Pin A1_Pin G1_Pin R2_Pin
                           A2_Pin G2_Pin */
  GPIO_InitStruct.Pin = EN0_Pin|EN1_Pin|EN2_Pin|EN3_Pin
 8001294:	f64f 73c0 	movw	r3, #65472	; 0xffc0
 8001298:	60bb      	str	r3, [r7, #8]
                          |R1_Pin|A1_Pin|G1_Pin|R2_Pin
                          |A2_Pin|G2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800129a:	2301      	movs	r3, #1
 800129c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800129e:	2300      	movs	r3, #0
 80012a0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012a2:	2302      	movs	r3, #2
 80012a4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012a6:	f107 0308 	add.w	r3, r7, #8
 80012aa:	4619      	mov	r1, r3
 80012ac:	480b      	ldr	r0, [pc, #44]	; (80012dc <MX_GPIO_Init+0xbc>)
 80012ae:	f000 faa7 	bl	8001800 <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG0_Pin SEG1_Pin SEG2_Pin D0_Pin
                           E0_Pin F0_Pin G0_Pin SEG3_Pin
                           SEG4_Pin SEG5_Pin SEG6_Pin A0_Pin
                           B0_Pin C0_Pin */
  GPIO_InitStruct.Pin = SEG0_Pin|SEG1_Pin|SEG2_Pin|D0_Pin
 80012b2:	f643 73ff 	movw	r3, #16383	; 0x3fff
 80012b6:	60bb      	str	r3, [r7, #8]
                          |E0_Pin|F0_Pin|G0_Pin|SEG3_Pin
                          |SEG4_Pin|SEG5_Pin|SEG6_Pin|A0_Pin
                          |B0_Pin|C0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012b8:	2301      	movs	r3, #1
 80012ba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012bc:	2300      	movs	r3, #0
 80012be:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012c0:	2302      	movs	r3, #2
 80012c2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012c4:	f107 0308 	add.w	r3, r7, #8
 80012c8:	4619      	mov	r1, r3
 80012ca:	4805      	ldr	r0, [pc, #20]	; (80012e0 <MX_GPIO_Init+0xc0>)
 80012cc:	f000 fa98 	bl	8001800 <HAL_GPIO_Init>

}
 80012d0:	bf00      	nop
 80012d2:	3718      	adds	r7, #24
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}
 80012d8:	40021000 	.word	0x40021000
 80012dc:	40010800 	.word	0x40010800
 80012e0:	40010c00 	.word	0x40010c00

080012e4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b082      	sub	sp, #8
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
  timerRun();
 80012ec:	f000 f844 	bl	8001378 <timerRun>
  getKeyInput();
 80012f0:	f7fe ff56 	bl	80001a0 <getKeyInput>
  /* USER CODE END Callback 0 */
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80012f4:	bf00      	nop
 80012f6:	3708      	adds	r7, #8
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd80      	pop	{r7, pc}

080012fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012fc:	b480      	push	{r7}
 80012fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001300:	b672      	cpsid	i
}
 8001302:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001304:	e7fe      	b.n	8001304 <Error_Handler+0x8>
	...

08001308 <setTimer>:
#include "software_timer.h"

int timer_counter[NUM_OF_TIMERS] = {0};
int timer_flag[NUM_OF_TIMERS] = {0};

void setTimer(int index, int duration){
 8001308:	b480      	push	{r7}
 800130a:	b083      	sub	sp, #12
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
 8001310:	6039      	str	r1, [r7, #0]
	timer_counter[index] = duration / TIME_CYCLE;
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	4a09      	ldr	r2, [pc, #36]	; (800133c <setTimer+0x34>)
 8001316:	fb82 1203 	smull	r1, r2, r2, r3
 800131a:	1092      	asrs	r2, r2, #2
 800131c:	17db      	asrs	r3, r3, #31
 800131e:	1ad2      	subs	r2, r2, r3
 8001320:	4907      	ldr	r1, [pc, #28]	; (8001340 <setTimer+0x38>)
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	timer_flag[index] = 0;
 8001328:	4a06      	ldr	r2, [pc, #24]	; (8001344 <setTimer+0x3c>)
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	2100      	movs	r1, #0
 800132e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8001332:	bf00      	nop
 8001334:	370c      	adds	r7, #12
 8001336:	46bd      	mov	sp, r7
 8001338:	bc80      	pop	{r7}
 800133a:	4770      	bx	lr
 800133c:	66666667 	.word	0x66666667
 8001340:	200000b4 	.word	0x200000b4
 8001344:	200000dc 	.word	0x200000dc

08001348 <clearTimer>:

void clearTimer(int index){
 8001348:	b480      	push	{r7}
 800134a:	b083      	sub	sp, #12
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
	timer_counter[index] = 0;
 8001350:	4a07      	ldr	r2, [pc, #28]	; (8001370 <clearTimer+0x28>)
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	2100      	movs	r1, #0
 8001356:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	timer_flag[index] = 0;
 800135a:	4a06      	ldr	r2, [pc, #24]	; (8001374 <clearTimer+0x2c>)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	2100      	movs	r1, #0
 8001360:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8001364:	bf00      	nop
 8001366:	370c      	adds	r7, #12
 8001368:	46bd      	mov	sp, r7
 800136a:	bc80      	pop	{r7}
 800136c:	4770      	bx	lr
 800136e:	bf00      	nop
 8001370:	200000b4 	.word	0x200000b4
 8001374:	200000dc 	.word	0x200000dc

08001378 <timerRun>:

void timerRun(){
 8001378:	b480      	push	{r7}
 800137a:	b083      	sub	sp, #12
 800137c:	af00      	add	r7, sp, #0
	for (int i = 0; i < NUM_OF_TIMERS; i++){
 800137e:	2300      	movs	r3, #0
 8001380:	607b      	str	r3, [r7, #4]
 8001382:	e01c      	b.n	80013be <timerRun+0x46>
		if (timer_counter[i] > 0){
 8001384:	4a12      	ldr	r2, [pc, #72]	; (80013d0 <timerRun+0x58>)
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800138c:	2b00      	cmp	r3, #0
 800138e:	dd13      	ble.n	80013b8 <timerRun+0x40>
			timer_counter[i]--;
 8001390:	4a0f      	ldr	r2, [pc, #60]	; (80013d0 <timerRun+0x58>)
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001398:	1e5a      	subs	r2, r3, #1
 800139a:	490d      	ldr	r1, [pc, #52]	; (80013d0 <timerRun+0x58>)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if (timer_counter[i] <= 0){
 80013a2:	4a0b      	ldr	r2, [pc, #44]	; (80013d0 <timerRun+0x58>)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	dc04      	bgt.n	80013b8 <timerRun+0x40>
				timer_flag[i] = 1;
 80013ae:	4a09      	ldr	r2, [pc, #36]	; (80013d4 <timerRun+0x5c>)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	2101      	movs	r1, #1
 80013b4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < NUM_OF_TIMERS; i++){
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	3301      	adds	r3, #1
 80013bc:	607b      	str	r3, [r7, #4]
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	2b09      	cmp	r3, #9
 80013c2:	dddf      	ble.n	8001384 <timerRun+0xc>
			}
		}
	}
}
 80013c4:	bf00      	nop
 80013c6:	bf00      	nop
 80013c8:	370c      	adds	r7, #12
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bc80      	pop	{r7}
 80013ce:	4770      	bx	lr
 80013d0:	200000b4 	.word	0x200000b4
 80013d4:	200000dc 	.word	0x200000dc

080013d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013d8:	b480      	push	{r7}
 80013da:	b085      	sub	sp, #20
 80013dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80013de:	4b15      	ldr	r3, [pc, #84]	; (8001434 <HAL_MspInit+0x5c>)
 80013e0:	699b      	ldr	r3, [r3, #24]
 80013e2:	4a14      	ldr	r2, [pc, #80]	; (8001434 <HAL_MspInit+0x5c>)
 80013e4:	f043 0301 	orr.w	r3, r3, #1
 80013e8:	6193      	str	r3, [r2, #24]
 80013ea:	4b12      	ldr	r3, [pc, #72]	; (8001434 <HAL_MspInit+0x5c>)
 80013ec:	699b      	ldr	r3, [r3, #24]
 80013ee:	f003 0301 	and.w	r3, r3, #1
 80013f2:	60bb      	str	r3, [r7, #8]
 80013f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013f6:	4b0f      	ldr	r3, [pc, #60]	; (8001434 <HAL_MspInit+0x5c>)
 80013f8:	69db      	ldr	r3, [r3, #28]
 80013fa:	4a0e      	ldr	r2, [pc, #56]	; (8001434 <HAL_MspInit+0x5c>)
 80013fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001400:	61d3      	str	r3, [r2, #28]
 8001402:	4b0c      	ldr	r3, [pc, #48]	; (8001434 <HAL_MspInit+0x5c>)
 8001404:	69db      	ldr	r3, [r3, #28]
 8001406:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800140a:	607b      	str	r3, [r7, #4]
 800140c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 800140e:	4b0a      	ldr	r3, [pc, #40]	; (8001438 <HAL_MspInit+0x60>)
 8001410:	685b      	ldr	r3, [r3, #4]
 8001412:	60fb      	str	r3, [r7, #12]
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800141a:	60fb      	str	r3, [r7, #12]
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001422:	60fb      	str	r3, [r7, #12]
 8001424:	4a04      	ldr	r2, [pc, #16]	; (8001438 <HAL_MspInit+0x60>)
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800142a:	bf00      	nop
 800142c:	3714      	adds	r7, #20
 800142e:	46bd      	mov	sp, r7
 8001430:	bc80      	pop	{r7}
 8001432:	4770      	bx	lr
 8001434:	40021000 	.word	0x40021000
 8001438:	40010000 	.word	0x40010000

0800143c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b084      	sub	sp, #16
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800144c:	d113      	bne.n	8001476 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800144e:	4b0c      	ldr	r3, [pc, #48]	; (8001480 <HAL_TIM_Base_MspInit+0x44>)
 8001450:	69db      	ldr	r3, [r3, #28]
 8001452:	4a0b      	ldr	r2, [pc, #44]	; (8001480 <HAL_TIM_Base_MspInit+0x44>)
 8001454:	f043 0301 	orr.w	r3, r3, #1
 8001458:	61d3      	str	r3, [r2, #28]
 800145a:	4b09      	ldr	r3, [pc, #36]	; (8001480 <HAL_TIM_Base_MspInit+0x44>)
 800145c:	69db      	ldr	r3, [r3, #28]
 800145e:	f003 0301 	and.w	r3, r3, #1
 8001462:	60fb      	str	r3, [r7, #12]
 8001464:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001466:	2200      	movs	r2, #0
 8001468:	2100      	movs	r1, #0
 800146a:	201c      	movs	r0, #28
 800146c:	f000 f99d 	bl	80017aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001470:	201c      	movs	r0, #28
 8001472:	f000 f9b6 	bl	80017e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001476:	bf00      	nop
 8001478:	3710      	adds	r7, #16
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}
 800147e:	bf00      	nop
 8001480:	40021000 	.word	0x40021000

08001484 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b08c      	sub	sp, #48	; 0x30
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800148c:	2300      	movs	r3, #0
 800148e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001490:	2300      	movs	r3, #0
 8001492:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0);
 8001494:	2200      	movs	r2, #0
 8001496:	6879      	ldr	r1, [r7, #4]
 8001498:	2019      	movs	r0, #25
 800149a:	f000 f986 	bl	80017aa <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 800149e:	2019      	movs	r0, #25
 80014a0:	f000 f99f 	bl	80017e2 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80014a4:	4b1e      	ldr	r3, [pc, #120]	; (8001520 <HAL_InitTick+0x9c>)
 80014a6:	699b      	ldr	r3, [r3, #24]
 80014a8:	4a1d      	ldr	r2, [pc, #116]	; (8001520 <HAL_InitTick+0x9c>)
 80014aa:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80014ae:	6193      	str	r3, [r2, #24]
 80014b0:	4b1b      	ldr	r3, [pc, #108]	; (8001520 <HAL_InitTick+0x9c>)
 80014b2:	699b      	ldr	r3, [r3, #24]
 80014b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80014b8:	60fb      	str	r3, [r7, #12]
 80014ba:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80014bc:	f107 0210 	add.w	r2, r7, #16
 80014c0:	f107 0314 	add.w	r3, r7, #20
 80014c4:	4611      	mov	r1, r2
 80014c6:	4618      	mov	r0, r3
 80014c8:	f000 ff38 	bl	800233c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80014cc:	f000 ff22 	bl	8002314 <HAL_RCC_GetPCLK2Freq>
 80014d0:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80014d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014d4:	4a13      	ldr	r2, [pc, #76]	; (8001524 <HAL_InitTick+0xa0>)
 80014d6:	fba2 2303 	umull	r2, r3, r2, r3
 80014da:	0c9b      	lsrs	r3, r3, #18
 80014dc:	3b01      	subs	r3, #1
 80014de:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80014e0:	4b11      	ldr	r3, [pc, #68]	; (8001528 <HAL_InitTick+0xa4>)
 80014e2:	4a12      	ldr	r2, [pc, #72]	; (800152c <HAL_InitTick+0xa8>)
 80014e4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80014e6:	4b10      	ldr	r3, [pc, #64]	; (8001528 <HAL_InitTick+0xa4>)
 80014e8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80014ec:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80014ee:	4a0e      	ldr	r2, [pc, #56]	; (8001528 <HAL_InitTick+0xa4>)
 80014f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014f2:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80014f4:	4b0c      	ldr	r3, [pc, #48]	; (8001528 <HAL_InitTick+0xa4>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014fa:	4b0b      	ldr	r3, [pc, #44]	; (8001528 <HAL_InitTick+0xa4>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8001500:	4809      	ldr	r0, [pc, #36]	; (8001528 <HAL_InitTick+0xa4>)
 8001502:	f000 ff69 	bl	80023d8 <HAL_TIM_Base_Init>
 8001506:	4603      	mov	r3, r0
 8001508:	2b00      	cmp	r3, #0
 800150a:	d104      	bne.n	8001516 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 800150c:	4806      	ldr	r0, [pc, #24]	; (8001528 <HAL_InitTick+0xa4>)
 800150e:	f000 ffb3 	bl	8002478 <HAL_TIM_Base_Start_IT>
 8001512:	4603      	mov	r3, r0
 8001514:	e000      	b.n	8001518 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8001516:	2301      	movs	r3, #1
}
 8001518:	4618      	mov	r0, r3
 800151a:	3730      	adds	r7, #48	; 0x30
 800151c:	46bd      	mov	sp, r7
 800151e:	bd80      	pop	{r7, pc}
 8001520:	40021000 	.word	0x40021000
 8001524:	431bde83 	.word	0x431bde83
 8001528:	2000014c 	.word	0x2000014c
 800152c:	40012c00 	.word	0x40012c00

08001530 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001530:	b480      	push	{r7}
 8001532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001534:	e7fe      	b.n	8001534 <NMI_Handler+0x4>

08001536 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001536:	b480      	push	{r7}
 8001538:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800153a:	e7fe      	b.n	800153a <HardFault_Handler+0x4>

0800153c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800153c:	b480      	push	{r7}
 800153e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001540:	e7fe      	b.n	8001540 <MemManage_Handler+0x4>

08001542 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001542:	b480      	push	{r7}
 8001544:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001546:	e7fe      	b.n	8001546 <BusFault_Handler+0x4>

08001548 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001548:	b480      	push	{r7}
 800154a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800154c:	e7fe      	b.n	800154c <UsageFault_Handler+0x4>

0800154e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800154e:	b480      	push	{r7}
 8001550:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001552:	bf00      	nop
 8001554:	46bd      	mov	sp, r7
 8001556:	bc80      	pop	{r7}
 8001558:	4770      	bx	lr

0800155a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800155a:	b480      	push	{r7}
 800155c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800155e:	bf00      	nop
 8001560:	46bd      	mov	sp, r7
 8001562:	bc80      	pop	{r7}
 8001564:	4770      	bx	lr

08001566 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001566:	b480      	push	{r7}
 8001568:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800156a:	bf00      	nop
 800156c:	46bd      	mov	sp, r7
 800156e:	bc80      	pop	{r7}
 8001570:	4770      	bx	lr

08001572 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001572:	b480      	push	{r7}
 8001574:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001576:	bf00      	nop
 8001578:	46bd      	mov	sp, r7
 800157a:	bc80      	pop	{r7}
 800157c:	4770      	bx	lr
	...

08001580 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001584:	4802      	ldr	r0, [pc, #8]	; (8001590 <TIM1_UP_IRQHandler+0x10>)
 8001586:	f000 ffc3 	bl	8002510 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800158a:	bf00      	nop
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop
 8001590:	2000014c 	.word	0x2000014c

08001594 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001598:	4802      	ldr	r0, [pc, #8]	; (80015a4 <TIM2_IRQHandler+0x10>)
 800159a:	f000 ffb9 	bl	8002510 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800159e:	bf00      	nop
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	bf00      	nop
 80015a4:	20000104 	.word	0x20000104

080015a8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80015a8:	b480      	push	{r7}
 80015aa:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015ac:	bf00      	nop
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bc80      	pop	{r7}
 80015b2:	4770      	bx	lr

080015b4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80015b4:	f7ff fff8 	bl	80015a8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80015b8:	480b      	ldr	r0, [pc, #44]	; (80015e8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80015ba:	490c      	ldr	r1, [pc, #48]	; (80015ec <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80015bc:	4a0c      	ldr	r2, [pc, #48]	; (80015f0 <LoopFillZerobss+0x16>)
  movs r3, #0
 80015be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015c0:	e002      	b.n	80015c8 <LoopCopyDataInit>

080015c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015c6:	3304      	adds	r3, #4

080015c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015cc:	d3f9      	bcc.n	80015c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015ce:	4a09      	ldr	r2, [pc, #36]	; (80015f4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80015d0:	4c09      	ldr	r4, [pc, #36]	; (80015f8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80015d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015d4:	e001      	b.n	80015da <LoopFillZerobss>

080015d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015d8:	3204      	adds	r2, #4

080015da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015dc:	d3fb      	bcc.n	80015d6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80015de:	f001 fae3 	bl	8002ba8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80015e2:	f7ff fd83 	bl	80010ec <main>
  bx lr
 80015e6:	4770      	bx	lr
  ldr r0, =_sdata
 80015e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015ec:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80015f0:	08002c4c 	.word	0x08002c4c
  ldr r2, =_sbss
 80015f4:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80015f8:	20000198 	.word	0x20000198

080015fc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80015fc:	e7fe      	b.n	80015fc <ADC1_2_IRQHandler>
	...

08001600 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001604:	4b08      	ldr	r3, [pc, #32]	; (8001628 <HAL_Init+0x28>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	4a07      	ldr	r2, [pc, #28]	; (8001628 <HAL_Init+0x28>)
 800160a:	f043 0310 	orr.w	r3, r3, #16
 800160e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001610:	2003      	movs	r0, #3
 8001612:	f000 f8bf 	bl	8001794 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001616:	200f      	movs	r0, #15
 8001618:	f7ff ff34 	bl	8001484 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800161c:	f7ff fedc 	bl	80013d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001620:	2300      	movs	r3, #0
}
 8001622:	4618      	mov	r0, r3
 8001624:	bd80      	pop	{r7, pc}
 8001626:	bf00      	nop
 8001628:	40022000 	.word	0x40022000

0800162c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800162c:	b480      	push	{r7}
 800162e:	af00      	add	r7, sp, #0
  return uwTick;
 8001630:	4b02      	ldr	r3, [pc, #8]	; (800163c <HAL_GetTick+0x10>)
 8001632:	681b      	ldr	r3, [r3, #0]
}
 8001634:	4618      	mov	r0, r3
 8001636:	46bd      	mov	sp, r7
 8001638:	bc80      	pop	{r7}
 800163a:	4770      	bx	lr
 800163c:	20000194 	.word	0x20000194

08001640 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001640:	b480      	push	{r7}
 8001642:	b085      	sub	sp, #20
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	f003 0307 	and.w	r3, r3, #7
 800164e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001650:	4b0c      	ldr	r3, [pc, #48]	; (8001684 <__NVIC_SetPriorityGrouping+0x44>)
 8001652:	68db      	ldr	r3, [r3, #12]
 8001654:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001656:	68ba      	ldr	r2, [r7, #8]
 8001658:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800165c:	4013      	ands	r3, r2
 800165e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001664:	68bb      	ldr	r3, [r7, #8]
 8001666:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001668:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800166c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001670:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001672:	4a04      	ldr	r2, [pc, #16]	; (8001684 <__NVIC_SetPriorityGrouping+0x44>)
 8001674:	68bb      	ldr	r3, [r7, #8]
 8001676:	60d3      	str	r3, [r2, #12]
}
 8001678:	bf00      	nop
 800167a:	3714      	adds	r7, #20
 800167c:	46bd      	mov	sp, r7
 800167e:	bc80      	pop	{r7}
 8001680:	4770      	bx	lr
 8001682:	bf00      	nop
 8001684:	e000ed00 	.word	0xe000ed00

08001688 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001688:	b480      	push	{r7}
 800168a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800168c:	4b04      	ldr	r3, [pc, #16]	; (80016a0 <__NVIC_GetPriorityGrouping+0x18>)
 800168e:	68db      	ldr	r3, [r3, #12]
 8001690:	0a1b      	lsrs	r3, r3, #8
 8001692:	f003 0307 	and.w	r3, r3, #7
}
 8001696:	4618      	mov	r0, r3
 8001698:	46bd      	mov	sp, r7
 800169a:	bc80      	pop	{r7}
 800169c:	4770      	bx	lr
 800169e:	bf00      	nop
 80016a0:	e000ed00 	.word	0xe000ed00

080016a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016a4:	b480      	push	{r7}
 80016a6:	b083      	sub	sp, #12
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	4603      	mov	r3, r0
 80016ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	db0b      	blt.n	80016ce <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016b6:	79fb      	ldrb	r3, [r7, #7]
 80016b8:	f003 021f 	and.w	r2, r3, #31
 80016bc:	4906      	ldr	r1, [pc, #24]	; (80016d8 <__NVIC_EnableIRQ+0x34>)
 80016be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016c2:	095b      	lsrs	r3, r3, #5
 80016c4:	2001      	movs	r0, #1
 80016c6:	fa00 f202 	lsl.w	r2, r0, r2
 80016ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80016ce:	bf00      	nop
 80016d0:	370c      	adds	r7, #12
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bc80      	pop	{r7}
 80016d6:	4770      	bx	lr
 80016d8:	e000e100 	.word	0xe000e100

080016dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016dc:	b480      	push	{r7}
 80016de:	b083      	sub	sp, #12
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	4603      	mov	r3, r0
 80016e4:	6039      	str	r1, [r7, #0]
 80016e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	db0a      	blt.n	8001706 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	b2da      	uxtb	r2, r3
 80016f4:	490c      	ldr	r1, [pc, #48]	; (8001728 <__NVIC_SetPriority+0x4c>)
 80016f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016fa:	0112      	lsls	r2, r2, #4
 80016fc:	b2d2      	uxtb	r2, r2
 80016fe:	440b      	add	r3, r1
 8001700:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001704:	e00a      	b.n	800171c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	b2da      	uxtb	r2, r3
 800170a:	4908      	ldr	r1, [pc, #32]	; (800172c <__NVIC_SetPriority+0x50>)
 800170c:	79fb      	ldrb	r3, [r7, #7]
 800170e:	f003 030f 	and.w	r3, r3, #15
 8001712:	3b04      	subs	r3, #4
 8001714:	0112      	lsls	r2, r2, #4
 8001716:	b2d2      	uxtb	r2, r2
 8001718:	440b      	add	r3, r1
 800171a:	761a      	strb	r2, [r3, #24]
}
 800171c:	bf00      	nop
 800171e:	370c      	adds	r7, #12
 8001720:	46bd      	mov	sp, r7
 8001722:	bc80      	pop	{r7}
 8001724:	4770      	bx	lr
 8001726:	bf00      	nop
 8001728:	e000e100 	.word	0xe000e100
 800172c:	e000ed00 	.word	0xe000ed00

08001730 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001730:	b480      	push	{r7}
 8001732:	b089      	sub	sp, #36	; 0x24
 8001734:	af00      	add	r7, sp, #0
 8001736:	60f8      	str	r0, [r7, #12]
 8001738:	60b9      	str	r1, [r7, #8]
 800173a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	f003 0307 	and.w	r3, r3, #7
 8001742:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001744:	69fb      	ldr	r3, [r7, #28]
 8001746:	f1c3 0307 	rsb	r3, r3, #7
 800174a:	2b04      	cmp	r3, #4
 800174c:	bf28      	it	cs
 800174e:	2304      	movcs	r3, #4
 8001750:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001752:	69fb      	ldr	r3, [r7, #28]
 8001754:	3304      	adds	r3, #4
 8001756:	2b06      	cmp	r3, #6
 8001758:	d902      	bls.n	8001760 <NVIC_EncodePriority+0x30>
 800175a:	69fb      	ldr	r3, [r7, #28]
 800175c:	3b03      	subs	r3, #3
 800175e:	e000      	b.n	8001762 <NVIC_EncodePriority+0x32>
 8001760:	2300      	movs	r3, #0
 8001762:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001764:	f04f 32ff 	mov.w	r2, #4294967295
 8001768:	69bb      	ldr	r3, [r7, #24]
 800176a:	fa02 f303 	lsl.w	r3, r2, r3
 800176e:	43da      	mvns	r2, r3
 8001770:	68bb      	ldr	r3, [r7, #8]
 8001772:	401a      	ands	r2, r3
 8001774:	697b      	ldr	r3, [r7, #20]
 8001776:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001778:	f04f 31ff 	mov.w	r1, #4294967295
 800177c:	697b      	ldr	r3, [r7, #20]
 800177e:	fa01 f303 	lsl.w	r3, r1, r3
 8001782:	43d9      	mvns	r1, r3
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001788:	4313      	orrs	r3, r2
         );
}
 800178a:	4618      	mov	r0, r3
 800178c:	3724      	adds	r7, #36	; 0x24
 800178e:	46bd      	mov	sp, r7
 8001790:	bc80      	pop	{r7}
 8001792:	4770      	bx	lr

08001794 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b082      	sub	sp, #8
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800179c:	6878      	ldr	r0, [r7, #4]
 800179e:	f7ff ff4f 	bl	8001640 <__NVIC_SetPriorityGrouping>
}
 80017a2:	bf00      	nop
 80017a4:	3708      	adds	r7, #8
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}

080017aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80017aa:	b580      	push	{r7, lr}
 80017ac:	b086      	sub	sp, #24
 80017ae:	af00      	add	r7, sp, #0
 80017b0:	4603      	mov	r3, r0
 80017b2:	60b9      	str	r1, [r7, #8]
 80017b4:	607a      	str	r2, [r7, #4]
 80017b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80017b8:	2300      	movs	r3, #0
 80017ba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80017bc:	f7ff ff64 	bl	8001688 <__NVIC_GetPriorityGrouping>
 80017c0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017c2:	687a      	ldr	r2, [r7, #4]
 80017c4:	68b9      	ldr	r1, [r7, #8]
 80017c6:	6978      	ldr	r0, [r7, #20]
 80017c8:	f7ff ffb2 	bl	8001730 <NVIC_EncodePriority>
 80017cc:	4602      	mov	r2, r0
 80017ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017d2:	4611      	mov	r1, r2
 80017d4:	4618      	mov	r0, r3
 80017d6:	f7ff ff81 	bl	80016dc <__NVIC_SetPriority>
}
 80017da:	bf00      	nop
 80017dc:	3718      	adds	r7, #24
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}

080017e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017e2:	b580      	push	{r7, lr}
 80017e4:	b082      	sub	sp, #8
 80017e6:	af00      	add	r7, sp, #0
 80017e8:	4603      	mov	r3, r0
 80017ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017f0:	4618      	mov	r0, r3
 80017f2:	f7ff ff57 	bl	80016a4 <__NVIC_EnableIRQ>
}
 80017f6:	bf00      	nop
 80017f8:	3708      	adds	r7, #8
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd80      	pop	{r7, pc}
	...

08001800 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001800:	b480      	push	{r7}
 8001802:	b08b      	sub	sp, #44	; 0x2c
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
 8001808:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800180a:	2300      	movs	r3, #0
 800180c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800180e:	2300      	movs	r3, #0
 8001810:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001812:	e148      	b.n	8001aa6 <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001814:	2201      	movs	r2, #1
 8001816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001818:	fa02 f303 	lsl.w	r3, r2, r3
 800181c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	69fa      	ldr	r2, [r7, #28]
 8001824:	4013      	ands	r3, r2
 8001826:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001828:	69ba      	ldr	r2, [r7, #24]
 800182a:	69fb      	ldr	r3, [r7, #28]
 800182c:	429a      	cmp	r2, r3
 800182e:	f040 8137 	bne.w	8001aa0 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	685b      	ldr	r3, [r3, #4]
 8001836:	4aa3      	ldr	r2, [pc, #652]	; (8001ac4 <HAL_GPIO_Init+0x2c4>)
 8001838:	4293      	cmp	r3, r2
 800183a:	d05e      	beq.n	80018fa <HAL_GPIO_Init+0xfa>
 800183c:	4aa1      	ldr	r2, [pc, #644]	; (8001ac4 <HAL_GPIO_Init+0x2c4>)
 800183e:	4293      	cmp	r3, r2
 8001840:	d875      	bhi.n	800192e <HAL_GPIO_Init+0x12e>
 8001842:	4aa1      	ldr	r2, [pc, #644]	; (8001ac8 <HAL_GPIO_Init+0x2c8>)
 8001844:	4293      	cmp	r3, r2
 8001846:	d058      	beq.n	80018fa <HAL_GPIO_Init+0xfa>
 8001848:	4a9f      	ldr	r2, [pc, #636]	; (8001ac8 <HAL_GPIO_Init+0x2c8>)
 800184a:	4293      	cmp	r3, r2
 800184c:	d86f      	bhi.n	800192e <HAL_GPIO_Init+0x12e>
 800184e:	4a9f      	ldr	r2, [pc, #636]	; (8001acc <HAL_GPIO_Init+0x2cc>)
 8001850:	4293      	cmp	r3, r2
 8001852:	d052      	beq.n	80018fa <HAL_GPIO_Init+0xfa>
 8001854:	4a9d      	ldr	r2, [pc, #628]	; (8001acc <HAL_GPIO_Init+0x2cc>)
 8001856:	4293      	cmp	r3, r2
 8001858:	d869      	bhi.n	800192e <HAL_GPIO_Init+0x12e>
 800185a:	4a9d      	ldr	r2, [pc, #628]	; (8001ad0 <HAL_GPIO_Init+0x2d0>)
 800185c:	4293      	cmp	r3, r2
 800185e:	d04c      	beq.n	80018fa <HAL_GPIO_Init+0xfa>
 8001860:	4a9b      	ldr	r2, [pc, #620]	; (8001ad0 <HAL_GPIO_Init+0x2d0>)
 8001862:	4293      	cmp	r3, r2
 8001864:	d863      	bhi.n	800192e <HAL_GPIO_Init+0x12e>
 8001866:	4a9b      	ldr	r2, [pc, #620]	; (8001ad4 <HAL_GPIO_Init+0x2d4>)
 8001868:	4293      	cmp	r3, r2
 800186a:	d046      	beq.n	80018fa <HAL_GPIO_Init+0xfa>
 800186c:	4a99      	ldr	r2, [pc, #612]	; (8001ad4 <HAL_GPIO_Init+0x2d4>)
 800186e:	4293      	cmp	r3, r2
 8001870:	d85d      	bhi.n	800192e <HAL_GPIO_Init+0x12e>
 8001872:	2b12      	cmp	r3, #18
 8001874:	d82a      	bhi.n	80018cc <HAL_GPIO_Init+0xcc>
 8001876:	2b12      	cmp	r3, #18
 8001878:	d859      	bhi.n	800192e <HAL_GPIO_Init+0x12e>
 800187a:	a201      	add	r2, pc, #4	; (adr r2, 8001880 <HAL_GPIO_Init+0x80>)
 800187c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001880:	080018fb 	.word	0x080018fb
 8001884:	080018d5 	.word	0x080018d5
 8001888:	080018e7 	.word	0x080018e7
 800188c:	08001929 	.word	0x08001929
 8001890:	0800192f 	.word	0x0800192f
 8001894:	0800192f 	.word	0x0800192f
 8001898:	0800192f 	.word	0x0800192f
 800189c:	0800192f 	.word	0x0800192f
 80018a0:	0800192f 	.word	0x0800192f
 80018a4:	0800192f 	.word	0x0800192f
 80018a8:	0800192f 	.word	0x0800192f
 80018ac:	0800192f 	.word	0x0800192f
 80018b0:	0800192f 	.word	0x0800192f
 80018b4:	0800192f 	.word	0x0800192f
 80018b8:	0800192f 	.word	0x0800192f
 80018bc:	0800192f 	.word	0x0800192f
 80018c0:	0800192f 	.word	0x0800192f
 80018c4:	080018dd 	.word	0x080018dd
 80018c8:	080018f1 	.word	0x080018f1
 80018cc:	4a82      	ldr	r2, [pc, #520]	; (8001ad8 <HAL_GPIO_Init+0x2d8>)
 80018ce:	4293      	cmp	r3, r2
 80018d0:	d013      	beq.n	80018fa <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80018d2:	e02c      	b.n	800192e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	68db      	ldr	r3, [r3, #12]
 80018d8:	623b      	str	r3, [r7, #32]
          break;
 80018da:	e029      	b.n	8001930 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	68db      	ldr	r3, [r3, #12]
 80018e0:	3304      	adds	r3, #4
 80018e2:	623b      	str	r3, [r7, #32]
          break;
 80018e4:	e024      	b.n	8001930 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	68db      	ldr	r3, [r3, #12]
 80018ea:	3308      	adds	r3, #8
 80018ec:	623b      	str	r3, [r7, #32]
          break;
 80018ee:	e01f      	b.n	8001930 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	68db      	ldr	r3, [r3, #12]
 80018f4:	330c      	adds	r3, #12
 80018f6:	623b      	str	r3, [r7, #32]
          break;
 80018f8:	e01a      	b.n	8001930 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	689b      	ldr	r3, [r3, #8]
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d102      	bne.n	8001908 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001902:	2304      	movs	r3, #4
 8001904:	623b      	str	r3, [r7, #32]
          break;
 8001906:	e013      	b.n	8001930 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	689b      	ldr	r3, [r3, #8]
 800190c:	2b01      	cmp	r3, #1
 800190e:	d105      	bne.n	800191c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001910:	2308      	movs	r3, #8
 8001912:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	69fa      	ldr	r2, [r7, #28]
 8001918:	611a      	str	r2, [r3, #16]
          break;
 800191a:	e009      	b.n	8001930 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800191c:	2308      	movs	r3, #8
 800191e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	69fa      	ldr	r2, [r7, #28]
 8001924:	615a      	str	r2, [r3, #20]
          break;
 8001926:	e003      	b.n	8001930 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001928:	2300      	movs	r3, #0
 800192a:	623b      	str	r3, [r7, #32]
          break;
 800192c:	e000      	b.n	8001930 <HAL_GPIO_Init+0x130>
          break;
 800192e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001930:	69bb      	ldr	r3, [r7, #24]
 8001932:	2bff      	cmp	r3, #255	; 0xff
 8001934:	d801      	bhi.n	800193a <HAL_GPIO_Init+0x13a>
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	e001      	b.n	800193e <HAL_GPIO_Init+0x13e>
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	3304      	adds	r3, #4
 800193e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001940:	69bb      	ldr	r3, [r7, #24]
 8001942:	2bff      	cmp	r3, #255	; 0xff
 8001944:	d802      	bhi.n	800194c <HAL_GPIO_Init+0x14c>
 8001946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001948:	009b      	lsls	r3, r3, #2
 800194a:	e002      	b.n	8001952 <HAL_GPIO_Init+0x152>
 800194c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800194e:	3b08      	subs	r3, #8
 8001950:	009b      	lsls	r3, r3, #2
 8001952:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001954:	697b      	ldr	r3, [r7, #20]
 8001956:	681a      	ldr	r2, [r3, #0]
 8001958:	210f      	movs	r1, #15
 800195a:	693b      	ldr	r3, [r7, #16]
 800195c:	fa01 f303 	lsl.w	r3, r1, r3
 8001960:	43db      	mvns	r3, r3
 8001962:	401a      	ands	r2, r3
 8001964:	6a39      	ldr	r1, [r7, #32]
 8001966:	693b      	ldr	r3, [r7, #16]
 8001968:	fa01 f303 	lsl.w	r3, r1, r3
 800196c:	431a      	orrs	r2, r3
 800196e:	697b      	ldr	r3, [r7, #20]
 8001970:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	685b      	ldr	r3, [r3, #4]
 8001976:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800197a:	2b00      	cmp	r3, #0
 800197c:	f000 8090 	beq.w	8001aa0 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001980:	4b56      	ldr	r3, [pc, #344]	; (8001adc <HAL_GPIO_Init+0x2dc>)
 8001982:	699b      	ldr	r3, [r3, #24]
 8001984:	4a55      	ldr	r2, [pc, #340]	; (8001adc <HAL_GPIO_Init+0x2dc>)
 8001986:	f043 0301 	orr.w	r3, r3, #1
 800198a:	6193      	str	r3, [r2, #24]
 800198c:	4b53      	ldr	r3, [pc, #332]	; (8001adc <HAL_GPIO_Init+0x2dc>)
 800198e:	699b      	ldr	r3, [r3, #24]
 8001990:	f003 0301 	and.w	r3, r3, #1
 8001994:	60bb      	str	r3, [r7, #8]
 8001996:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001998:	4a51      	ldr	r2, [pc, #324]	; (8001ae0 <HAL_GPIO_Init+0x2e0>)
 800199a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800199c:	089b      	lsrs	r3, r3, #2
 800199e:	3302      	adds	r3, #2
 80019a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019a4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80019a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019a8:	f003 0303 	and.w	r3, r3, #3
 80019ac:	009b      	lsls	r3, r3, #2
 80019ae:	220f      	movs	r2, #15
 80019b0:	fa02 f303 	lsl.w	r3, r2, r3
 80019b4:	43db      	mvns	r3, r3
 80019b6:	68fa      	ldr	r2, [r7, #12]
 80019b8:	4013      	ands	r3, r2
 80019ba:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	4a49      	ldr	r2, [pc, #292]	; (8001ae4 <HAL_GPIO_Init+0x2e4>)
 80019c0:	4293      	cmp	r3, r2
 80019c2:	d00d      	beq.n	80019e0 <HAL_GPIO_Init+0x1e0>
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	4a48      	ldr	r2, [pc, #288]	; (8001ae8 <HAL_GPIO_Init+0x2e8>)
 80019c8:	4293      	cmp	r3, r2
 80019ca:	d007      	beq.n	80019dc <HAL_GPIO_Init+0x1dc>
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	4a47      	ldr	r2, [pc, #284]	; (8001aec <HAL_GPIO_Init+0x2ec>)
 80019d0:	4293      	cmp	r3, r2
 80019d2:	d101      	bne.n	80019d8 <HAL_GPIO_Init+0x1d8>
 80019d4:	2302      	movs	r3, #2
 80019d6:	e004      	b.n	80019e2 <HAL_GPIO_Init+0x1e2>
 80019d8:	2303      	movs	r3, #3
 80019da:	e002      	b.n	80019e2 <HAL_GPIO_Init+0x1e2>
 80019dc:	2301      	movs	r3, #1
 80019de:	e000      	b.n	80019e2 <HAL_GPIO_Init+0x1e2>
 80019e0:	2300      	movs	r3, #0
 80019e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019e4:	f002 0203 	and.w	r2, r2, #3
 80019e8:	0092      	lsls	r2, r2, #2
 80019ea:	4093      	lsls	r3, r2
 80019ec:	68fa      	ldr	r2, [r7, #12]
 80019ee:	4313      	orrs	r3, r2
 80019f0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80019f2:	493b      	ldr	r1, [pc, #236]	; (8001ae0 <HAL_GPIO_Init+0x2e0>)
 80019f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019f6:	089b      	lsrs	r3, r3, #2
 80019f8:	3302      	adds	r3, #2
 80019fa:	68fa      	ldr	r2, [r7, #12]
 80019fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d006      	beq.n	8001a1a <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001a0c:	4b38      	ldr	r3, [pc, #224]	; (8001af0 <HAL_GPIO_Init+0x2f0>)
 8001a0e:	689a      	ldr	r2, [r3, #8]
 8001a10:	4937      	ldr	r1, [pc, #220]	; (8001af0 <HAL_GPIO_Init+0x2f0>)
 8001a12:	69bb      	ldr	r3, [r7, #24]
 8001a14:	4313      	orrs	r3, r2
 8001a16:	608b      	str	r3, [r1, #8]
 8001a18:	e006      	b.n	8001a28 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001a1a:	4b35      	ldr	r3, [pc, #212]	; (8001af0 <HAL_GPIO_Init+0x2f0>)
 8001a1c:	689a      	ldr	r2, [r3, #8]
 8001a1e:	69bb      	ldr	r3, [r7, #24]
 8001a20:	43db      	mvns	r3, r3
 8001a22:	4933      	ldr	r1, [pc, #204]	; (8001af0 <HAL_GPIO_Init+0x2f0>)
 8001a24:	4013      	ands	r3, r2
 8001a26:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d006      	beq.n	8001a42 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001a34:	4b2e      	ldr	r3, [pc, #184]	; (8001af0 <HAL_GPIO_Init+0x2f0>)
 8001a36:	68da      	ldr	r2, [r3, #12]
 8001a38:	492d      	ldr	r1, [pc, #180]	; (8001af0 <HAL_GPIO_Init+0x2f0>)
 8001a3a:	69bb      	ldr	r3, [r7, #24]
 8001a3c:	4313      	orrs	r3, r2
 8001a3e:	60cb      	str	r3, [r1, #12]
 8001a40:	e006      	b.n	8001a50 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001a42:	4b2b      	ldr	r3, [pc, #172]	; (8001af0 <HAL_GPIO_Init+0x2f0>)
 8001a44:	68da      	ldr	r2, [r3, #12]
 8001a46:	69bb      	ldr	r3, [r7, #24]
 8001a48:	43db      	mvns	r3, r3
 8001a4a:	4929      	ldr	r1, [pc, #164]	; (8001af0 <HAL_GPIO_Init+0x2f0>)
 8001a4c:	4013      	ands	r3, r2
 8001a4e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d006      	beq.n	8001a6a <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001a5c:	4b24      	ldr	r3, [pc, #144]	; (8001af0 <HAL_GPIO_Init+0x2f0>)
 8001a5e:	685a      	ldr	r2, [r3, #4]
 8001a60:	4923      	ldr	r1, [pc, #140]	; (8001af0 <HAL_GPIO_Init+0x2f0>)
 8001a62:	69bb      	ldr	r3, [r7, #24]
 8001a64:	4313      	orrs	r3, r2
 8001a66:	604b      	str	r3, [r1, #4]
 8001a68:	e006      	b.n	8001a78 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001a6a:	4b21      	ldr	r3, [pc, #132]	; (8001af0 <HAL_GPIO_Init+0x2f0>)
 8001a6c:	685a      	ldr	r2, [r3, #4]
 8001a6e:	69bb      	ldr	r3, [r7, #24]
 8001a70:	43db      	mvns	r3, r3
 8001a72:	491f      	ldr	r1, [pc, #124]	; (8001af0 <HAL_GPIO_Init+0x2f0>)
 8001a74:	4013      	ands	r3, r2
 8001a76:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d006      	beq.n	8001a92 <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001a84:	4b1a      	ldr	r3, [pc, #104]	; (8001af0 <HAL_GPIO_Init+0x2f0>)
 8001a86:	681a      	ldr	r2, [r3, #0]
 8001a88:	4919      	ldr	r1, [pc, #100]	; (8001af0 <HAL_GPIO_Init+0x2f0>)
 8001a8a:	69bb      	ldr	r3, [r7, #24]
 8001a8c:	4313      	orrs	r3, r2
 8001a8e:	600b      	str	r3, [r1, #0]
 8001a90:	e006      	b.n	8001aa0 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001a92:	4b17      	ldr	r3, [pc, #92]	; (8001af0 <HAL_GPIO_Init+0x2f0>)
 8001a94:	681a      	ldr	r2, [r3, #0]
 8001a96:	69bb      	ldr	r3, [r7, #24]
 8001a98:	43db      	mvns	r3, r3
 8001a9a:	4915      	ldr	r1, [pc, #84]	; (8001af0 <HAL_GPIO_Init+0x2f0>)
 8001a9c:	4013      	ands	r3, r2
 8001a9e:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aa2:	3301      	adds	r3, #1
 8001aa4:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	681a      	ldr	r2, [r3, #0]
 8001aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aac:	fa22 f303 	lsr.w	r3, r2, r3
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	f47f aeaf 	bne.w	8001814 <HAL_GPIO_Init+0x14>
  }
}
 8001ab6:	bf00      	nop
 8001ab8:	bf00      	nop
 8001aba:	372c      	adds	r7, #44	; 0x2c
 8001abc:	46bd      	mov	sp, r7
 8001abe:	bc80      	pop	{r7}
 8001ac0:	4770      	bx	lr
 8001ac2:	bf00      	nop
 8001ac4:	10320000 	.word	0x10320000
 8001ac8:	10310000 	.word	0x10310000
 8001acc:	10220000 	.word	0x10220000
 8001ad0:	10210000 	.word	0x10210000
 8001ad4:	10120000 	.word	0x10120000
 8001ad8:	10110000 	.word	0x10110000
 8001adc:	40021000 	.word	0x40021000
 8001ae0:	40010000 	.word	0x40010000
 8001ae4:	40010800 	.word	0x40010800
 8001ae8:	40010c00 	.word	0x40010c00
 8001aec:	40011000 	.word	0x40011000
 8001af0:	40010400 	.word	0x40010400

08001af4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001af4:	b480      	push	{r7}
 8001af6:	b085      	sub	sp, #20
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
 8001afc:	460b      	mov	r3, r1
 8001afe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	689a      	ldr	r2, [r3, #8]
 8001b04:	887b      	ldrh	r3, [r7, #2]
 8001b06:	4013      	ands	r3, r2
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d002      	beq.n	8001b12 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001b0c:	2301      	movs	r3, #1
 8001b0e:	73fb      	strb	r3, [r7, #15]
 8001b10:	e001      	b.n	8001b16 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001b12:	2300      	movs	r3, #0
 8001b14:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001b16:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b18:	4618      	mov	r0, r3
 8001b1a:	3714      	adds	r7, #20
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	bc80      	pop	{r7}
 8001b20:	4770      	bx	lr

08001b22 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b22:	b480      	push	{r7}
 8001b24:	b083      	sub	sp, #12
 8001b26:	af00      	add	r7, sp, #0
 8001b28:	6078      	str	r0, [r7, #4]
 8001b2a:	460b      	mov	r3, r1
 8001b2c:	807b      	strh	r3, [r7, #2]
 8001b2e:	4613      	mov	r3, r2
 8001b30:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001b32:	787b      	ldrb	r3, [r7, #1]
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d003      	beq.n	8001b40 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b38:	887a      	ldrh	r2, [r7, #2]
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001b3e:	e003      	b.n	8001b48 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001b40:	887b      	ldrh	r3, [r7, #2]
 8001b42:	041a      	lsls	r2, r3, #16
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	611a      	str	r2, [r3, #16]
}
 8001b48:	bf00      	nop
 8001b4a:	370c      	adds	r7, #12
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bc80      	pop	{r7}
 8001b50:	4770      	bx	lr

08001b52 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001b52:	b480      	push	{r7}
 8001b54:	b085      	sub	sp, #20
 8001b56:	af00      	add	r7, sp, #0
 8001b58:	6078      	str	r0, [r7, #4]
 8001b5a:	460b      	mov	r3, r1
 8001b5c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	68db      	ldr	r3, [r3, #12]
 8001b62:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001b64:	887a      	ldrh	r2, [r7, #2]
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	4013      	ands	r3, r2
 8001b6a:	041a      	lsls	r2, r3, #16
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	43d9      	mvns	r1, r3
 8001b70:	887b      	ldrh	r3, [r7, #2]
 8001b72:	400b      	ands	r3, r1
 8001b74:	431a      	orrs	r2, r3
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	611a      	str	r2, [r3, #16]
}
 8001b7a:	bf00      	nop
 8001b7c:	3714      	adds	r7, #20
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bc80      	pop	{r7}
 8001b82:	4770      	bx	lr

08001b84 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b086      	sub	sp, #24
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d101      	bne.n	8001b96 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b92:	2301      	movs	r3, #1
 8001b94:	e26c      	b.n	8002070 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f003 0301 	and.w	r3, r3, #1
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	f000 8087 	beq.w	8001cb2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001ba4:	4b92      	ldr	r3, [pc, #584]	; (8001df0 <HAL_RCC_OscConfig+0x26c>)
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	f003 030c 	and.w	r3, r3, #12
 8001bac:	2b04      	cmp	r3, #4
 8001bae:	d00c      	beq.n	8001bca <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001bb0:	4b8f      	ldr	r3, [pc, #572]	; (8001df0 <HAL_RCC_OscConfig+0x26c>)
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	f003 030c 	and.w	r3, r3, #12
 8001bb8:	2b08      	cmp	r3, #8
 8001bba:	d112      	bne.n	8001be2 <HAL_RCC_OscConfig+0x5e>
 8001bbc:	4b8c      	ldr	r3, [pc, #560]	; (8001df0 <HAL_RCC_OscConfig+0x26c>)
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001bc8:	d10b      	bne.n	8001be2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bca:	4b89      	ldr	r3, [pc, #548]	; (8001df0 <HAL_RCC_OscConfig+0x26c>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d06c      	beq.n	8001cb0 <HAL_RCC_OscConfig+0x12c>
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	685b      	ldr	r3, [r3, #4]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d168      	bne.n	8001cb0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001bde:	2301      	movs	r3, #1
 8001be0:	e246      	b.n	8002070 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	685b      	ldr	r3, [r3, #4]
 8001be6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001bea:	d106      	bne.n	8001bfa <HAL_RCC_OscConfig+0x76>
 8001bec:	4b80      	ldr	r3, [pc, #512]	; (8001df0 <HAL_RCC_OscConfig+0x26c>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4a7f      	ldr	r2, [pc, #508]	; (8001df0 <HAL_RCC_OscConfig+0x26c>)
 8001bf2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bf6:	6013      	str	r3, [r2, #0]
 8001bf8:	e02e      	b.n	8001c58 <HAL_RCC_OscConfig+0xd4>
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d10c      	bne.n	8001c1c <HAL_RCC_OscConfig+0x98>
 8001c02:	4b7b      	ldr	r3, [pc, #492]	; (8001df0 <HAL_RCC_OscConfig+0x26c>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	4a7a      	ldr	r2, [pc, #488]	; (8001df0 <HAL_RCC_OscConfig+0x26c>)
 8001c08:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c0c:	6013      	str	r3, [r2, #0]
 8001c0e:	4b78      	ldr	r3, [pc, #480]	; (8001df0 <HAL_RCC_OscConfig+0x26c>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	4a77      	ldr	r2, [pc, #476]	; (8001df0 <HAL_RCC_OscConfig+0x26c>)
 8001c14:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c18:	6013      	str	r3, [r2, #0]
 8001c1a:	e01d      	b.n	8001c58 <HAL_RCC_OscConfig+0xd4>
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c24:	d10c      	bne.n	8001c40 <HAL_RCC_OscConfig+0xbc>
 8001c26:	4b72      	ldr	r3, [pc, #456]	; (8001df0 <HAL_RCC_OscConfig+0x26c>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4a71      	ldr	r2, [pc, #452]	; (8001df0 <HAL_RCC_OscConfig+0x26c>)
 8001c2c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c30:	6013      	str	r3, [r2, #0]
 8001c32:	4b6f      	ldr	r3, [pc, #444]	; (8001df0 <HAL_RCC_OscConfig+0x26c>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	4a6e      	ldr	r2, [pc, #440]	; (8001df0 <HAL_RCC_OscConfig+0x26c>)
 8001c38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c3c:	6013      	str	r3, [r2, #0]
 8001c3e:	e00b      	b.n	8001c58 <HAL_RCC_OscConfig+0xd4>
 8001c40:	4b6b      	ldr	r3, [pc, #428]	; (8001df0 <HAL_RCC_OscConfig+0x26c>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	4a6a      	ldr	r2, [pc, #424]	; (8001df0 <HAL_RCC_OscConfig+0x26c>)
 8001c46:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c4a:	6013      	str	r3, [r2, #0]
 8001c4c:	4b68      	ldr	r3, [pc, #416]	; (8001df0 <HAL_RCC_OscConfig+0x26c>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	4a67      	ldr	r2, [pc, #412]	; (8001df0 <HAL_RCC_OscConfig+0x26c>)
 8001c52:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c56:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	685b      	ldr	r3, [r3, #4]
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d013      	beq.n	8001c88 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c60:	f7ff fce4 	bl	800162c <HAL_GetTick>
 8001c64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c66:	e008      	b.n	8001c7a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c68:	f7ff fce0 	bl	800162c <HAL_GetTick>
 8001c6c:	4602      	mov	r2, r0
 8001c6e:	693b      	ldr	r3, [r7, #16]
 8001c70:	1ad3      	subs	r3, r2, r3
 8001c72:	2b64      	cmp	r3, #100	; 0x64
 8001c74:	d901      	bls.n	8001c7a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001c76:	2303      	movs	r3, #3
 8001c78:	e1fa      	b.n	8002070 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c7a:	4b5d      	ldr	r3, [pc, #372]	; (8001df0 <HAL_RCC_OscConfig+0x26c>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d0f0      	beq.n	8001c68 <HAL_RCC_OscConfig+0xe4>
 8001c86:	e014      	b.n	8001cb2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c88:	f7ff fcd0 	bl	800162c <HAL_GetTick>
 8001c8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c8e:	e008      	b.n	8001ca2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c90:	f7ff fccc 	bl	800162c <HAL_GetTick>
 8001c94:	4602      	mov	r2, r0
 8001c96:	693b      	ldr	r3, [r7, #16]
 8001c98:	1ad3      	subs	r3, r2, r3
 8001c9a:	2b64      	cmp	r3, #100	; 0x64
 8001c9c:	d901      	bls.n	8001ca2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001c9e:	2303      	movs	r3, #3
 8001ca0:	e1e6      	b.n	8002070 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ca2:	4b53      	ldr	r3, [pc, #332]	; (8001df0 <HAL_RCC_OscConfig+0x26c>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d1f0      	bne.n	8001c90 <HAL_RCC_OscConfig+0x10c>
 8001cae:	e000      	b.n	8001cb2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cb0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f003 0302 	and.w	r3, r3, #2
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d063      	beq.n	8001d86 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001cbe:	4b4c      	ldr	r3, [pc, #304]	; (8001df0 <HAL_RCC_OscConfig+0x26c>)
 8001cc0:	685b      	ldr	r3, [r3, #4]
 8001cc2:	f003 030c 	and.w	r3, r3, #12
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d00b      	beq.n	8001ce2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001cca:	4b49      	ldr	r3, [pc, #292]	; (8001df0 <HAL_RCC_OscConfig+0x26c>)
 8001ccc:	685b      	ldr	r3, [r3, #4]
 8001cce:	f003 030c 	and.w	r3, r3, #12
 8001cd2:	2b08      	cmp	r3, #8
 8001cd4:	d11c      	bne.n	8001d10 <HAL_RCC_OscConfig+0x18c>
 8001cd6:	4b46      	ldr	r3, [pc, #280]	; (8001df0 <HAL_RCC_OscConfig+0x26c>)
 8001cd8:	685b      	ldr	r3, [r3, #4]
 8001cda:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d116      	bne.n	8001d10 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ce2:	4b43      	ldr	r3, [pc, #268]	; (8001df0 <HAL_RCC_OscConfig+0x26c>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f003 0302 	and.w	r3, r3, #2
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d005      	beq.n	8001cfa <HAL_RCC_OscConfig+0x176>
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	691b      	ldr	r3, [r3, #16]
 8001cf2:	2b01      	cmp	r3, #1
 8001cf4:	d001      	beq.n	8001cfa <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	e1ba      	b.n	8002070 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cfa:	4b3d      	ldr	r3, [pc, #244]	; (8001df0 <HAL_RCC_OscConfig+0x26c>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	695b      	ldr	r3, [r3, #20]
 8001d06:	00db      	lsls	r3, r3, #3
 8001d08:	4939      	ldr	r1, [pc, #228]	; (8001df0 <HAL_RCC_OscConfig+0x26c>)
 8001d0a:	4313      	orrs	r3, r2
 8001d0c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d0e:	e03a      	b.n	8001d86 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	691b      	ldr	r3, [r3, #16]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d020      	beq.n	8001d5a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d18:	4b36      	ldr	r3, [pc, #216]	; (8001df4 <HAL_RCC_OscConfig+0x270>)
 8001d1a:	2201      	movs	r2, #1
 8001d1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d1e:	f7ff fc85 	bl	800162c <HAL_GetTick>
 8001d22:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d24:	e008      	b.n	8001d38 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d26:	f7ff fc81 	bl	800162c <HAL_GetTick>
 8001d2a:	4602      	mov	r2, r0
 8001d2c:	693b      	ldr	r3, [r7, #16]
 8001d2e:	1ad3      	subs	r3, r2, r3
 8001d30:	2b02      	cmp	r3, #2
 8001d32:	d901      	bls.n	8001d38 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001d34:	2303      	movs	r3, #3
 8001d36:	e19b      	b.n	8002070 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d38:	4b2d      	ldr	r3, [pc, #180]	; (8001df0 <HAL_RCC_OscConfig+0x26c>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f003 0302 	and.w	r3, r3, #2
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d0f0      	beq.n	8001d26 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d44:	4b2a      	ldr	r3, [pc, #168]	; (8001df0 <HAL_RCC_OscConfig+0x26c>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	695b      	ldr	r3, [r3, #20]
 8001d50:	00db      	lsls	r3, r3, #3
 8001d52:	4927      	ldr	r1, [pc, #156]	; (8001df0 <HAL_RCC_OscConfig+0x26c>)
 8001d54:	4313      	orrs	r3, r2
 8001d56:	600b      	str	r3, [r1, #0]
 8001d58:	e015      	b.n	8001d86 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d5a:	4b26      	ldr	r3, [pc, #152]	; (8001df4 <HAL_RCC_OscConfig+0x270>)
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d60:	f7ff fc64 	bl	800162c <HAL_GetTick>
 8001d64:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d66:	e008      	b.n	8001d7a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d68:	f7ff fc60 	bl	800162c <HAL_GetTick>
 8001d6c:	4602      	mov	r2, r0
 8001d6e:	693b      	ldr	r3, [r7, #16]
 8001d70:	1ad3      	subs	r3, r2, r3
 8001d72:	2b02      	cmp	r3, #2
 8001d74:	d901      	bls.n	8001d7a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001d76:	2303      	movs	r3, #3
 8001d78:	e17a      	b.n	8002070 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d7a:	4b1d      	ldr	r3, [pc, #116]	; (8001df0 <HAL_RCC_OscConfig+0x26c>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f003 0302 	and.w	r3, r3, #2
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d1f0      	bne.n	8001d68 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f003 0308 	and.w	r3, r3, #8
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d03a      	beq.n	8001e08 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	699b      	ldr	r3, [r3, #24]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d019      	beq.n	8001dce <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d9a:	4b17      	ldr	r3, [pc, #92]	; (8001df8 <HAL_RCC_OscConfig+0x274>)
 8001d9c:	2201      	movs	r2, #1
 8001d9e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001da0:	f7ff fc44 	bl	800162c <HAL_GetTick>
 8001da4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001da6:	e008      	b.n	8001dba <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001da8:	f7ff fc40 	bl	800162c <HAL_GetTick>
 8001dac:	4602      	mov	r2, r0
 8001dae:	693b      	ldr	r3, [r7, #16]
 8001db0:	1ad3      	subs	r3, r2, r3
 8001db2:	2b02      	cmp	r3, #2
 8001db4:	d901      	bls.n	8001dba <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001db6:	2303      	movs	r3, #3
 8001db8:	e15a      	b.n	8002070 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001dba:	4b0d      	ldr	r3, [pc, #52]	; (8001df0 <HAL_RCC_OscConfig+0x26c>)
 8001dbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dbe:	f003 0302 	and.w	r3, r3, #2
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d0f0      	beq.n	8001da8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001dc6:	2001      	movs	r0, #1
 8001dc8:	f000 fae8 	bl	800239c <RCC_Delay>
 8001dcc:	e01c      	b.n	8001e08 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001dce:	4b0a      	ldr	r3, [pc, #40]	; (8001df8 <HAL_RCC_OscConfig+0x274>)
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dd4:	f7ff fc2a 	bl	800162c <HAL_GetTick>
 8001dd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001dda:	e00f      	b.n	8001dfc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ddc:	f7ff fc26 	bl	800162c <HAL_GetTick>
 8001de0:	4602      	mov	r2, r0
 8001de2:	693b      	ldr	r3, [r7, #16]
 8001de4:	1ad3      	subs	r3, r2, r3
 8001de6:	2b02      	cmp	r3, #2
 8001de8:	d908      	bls.n	8001dfc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001dea:	2303      	movs	r3, #3
 8001dec:	e140      	b.n	8002070 <HAL_RCC_OscConfig+0x4ec>
 8001dee:	bf00      	nop
 8001df0:	40021000 	.word	0x40021000
 8001df4:	42420000 	.word	0x42420000
 8001df8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001dfc:	4b9e      	ldr	r3, [pc, #632]	; (8002078 <HAL_RCC_OscConfig+0x4f4>)
 8001dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e00:	f003 0302 	and.w	r3, r3, #2
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d1e9      	bne.n	8001ddc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f003 0304 	and.w	r3, r3, #4
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	f000 80a6 	beq.w	8001f62 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e16:	2300      	movs	r3, #0
 8001e18:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e1a:	4b97      	ldr	r3, [pc, #604]	; (8002078 <HAL_RCC_OscConfig+0x4f4>)
 8001e1c:	69db      	ldr	r3, [r3, #28]
 8001e1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d10d      	bne.n	8001e42 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e26:	4b94      	ldr	r3, [pc, #592]	; (8002078 <HAL_RCC_OscConfig+0x4f4>)
 8001e28:	69db      	ldr	r3, [r3, #28]
 8001e2a:	4a93      	ldr	r2, [pc, #588]	; (8002078 <HAL_RCC_OscConfig+0x4f4>)
 8001e2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e30:	61d3      	str	r3, [r2, #28]
 8001e32:	4b91      	ldr	r3, [pc, #580]	; (8002078 <HAL_RCC_OscConfig+0x4f4>)
 8001e34:	69db      	ldr	r3, [r3, #28]
 8001e36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e3a:	60bb      	str	r3, [r7, #8]
 8001e3c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e3e:	2301      	movs	r3, #1
 8001e40:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e42:	4b8e      	ldr	r3, [pc, #568]	; (800207c <HAL_RCC_OscConfig+0x4f8>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d118      	bne.n	8001e80 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e4e:	4b8b      	ldr	r3, [pc, #556]	; (800207c <HAL_RCC_OscConfig+0x4f8>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	4a8a      	ldr	r2, [pc, #552]	; (800207c <HAL_RCC_OscConfig+0x4f8>)
 8001e54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e58:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e5a:	f7ff fbe7 	bl	800162c <HAL_GetTick>
 8001e5e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e60:	e008      	b.n	8001e74 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e62:	f7ff fbe3 	bl	800162c <HAL_GetTick>
 8001e66:	4602      	mov	r2, r0
 8001e68:	693b      	ldr	r3, [r7, #16]
 8001e6a:	1ad3      	subs	r3, r2, r3
 8001e6c:	2b64      	cmp	r3, #100	; 0x64
 8001e6e:	d901      	bls.n	8001e74 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001e70:	2303      	movs	r3, #3
 8001e72:	e0fd      	b.n	8002070 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e74:	4b81      	ldr	r3, [pc, #516]	; (800207c <HAL_RCC_OscConfig+0x4f8>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d0f0      	beq.n	8001e62 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	68db      	ldr	r3, [r3, #12]
 8001e84:	2b01      	cmp	r3, #1
 8001e86:	d106      	bne.n	8001e96 <HAL_RCC_OscConfig+0x312>
 8001e88:	4b7b      	ldr	r3, [pc, #492]	; (8002078 <HAL_RCC_OscConfig+0x4f4>)
 8001e8a:	6a1b      	ldr	r3, [r3, #32]
 8001e8c:	4a7a      	ldr	r2, [pc, #488]	; (8002078 <HAL_RCC_OscConfig+0x4f4>)
 8001e8e:	f043 0301 	orr.w	r3, r3, #1
 8001e92:	6213      	str	r3, [r2, #32]
 8001e94:	e02d      	b.n	8001ef2 <HAL_RCC_OscConfig+0x36e>
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	68db      	ldr	r3, [r3, #12]
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d10c      	bne.n	8001eb8 <HAL_RCC_OscConfig+0x334>
 8001e9e:	4b76      	ldr	r3, [pc, #472]	; (8002078 <HAL_RCC_OscConfig+0x4f4>)
 8001ea0:	6a1b      	ldr	r3, [r3, #32]
 8001ea2:	4a75      	ldr	r2, [pc, #468]	; (8002078 <HAL_RCC_OscConfig+0x4f4>)
 8001ea4:	f023 0301 	bic.w	r3, r3, #1
 8001ea8:	6213      	str	r3, [r2, #32]
 8001eaa:	4b73      	ldr	r3, [pc, #460]	; (8002078 <HAL_RCC_OscConfig+0x4f4>)
 8001eac:	6a1b      	ldr	r3, [r3, #32]
 8001eae:	4a72      	ldr	r2, [pc, #456]	; (8002078 <HAL_RCC_OscConfig+0x4f4>)
 8001eb0:	f023 0304 	bic.w	r3, r3, #4
 8001eb4:	6213      	str	r3, [r2, #32]
 8001eb6:	e01c      	b.n	8001ef2 <HAL_RCC_OscConfig+0x36e>
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	68db      	ldr	r3, [r3, #12]
 8001ebc:	2b05      	cmp	r3, #5
 8001ebe:	d10c      	bne.n	8001eda <HAL_RCC_OscConfig+0x356>
 8001ec0:	4b6d      	ldr	r3, [pc, #436]	; (8002078 <HAL_RCC_OscConfig+0x4f4>)
 8001ec2:	6a1b      	ldr	r3, [r3, #32]
 8001ec4:	4a6c      	ldr	r2, [pc, #432]	; (8002078 <HAL_RCC_OscConfig+0x4f4>)
 8001ec6:	f043 0304 	orr.w	r3, r3, #4
 8001eca:	6213      	str	r3, [r2, #32]
 8001ecc:	4b6a      	ldr	r3, [pc, #424]	; (8002078 <HAL_RCC_OscConfig+0x4f4>)
 8001ece:	6a1b      	ldr	r3, [r3, #32]
 8001ed0:	4a69      	ldr	r2, [pc, #420]	; (8002078 <HAL_RCC_OscConfig+0x4f4>)
 8001ed2:	f043 0301 	orr.w	r3, r3, #1
 8001ed6:	6213      	str	r3, [r2, #32]
 8001ed8:	e00b      	b.n	8001ef2 <HAL_RCC_OscConfig+0x36e>
 8001eda:	4b67      	ldr	r3, [pc, #412]	; (8002078 <HAL_RCC_OscConfig+0x4f4>)
 8001edc:	6a1b      	ldr	r3, [r3, #32]
 8001ede:	4a66      	ldr	r2, [pc, #408]	; (8002078 <HAL_RCC_OscConfig+0x4f4>)
 8001ee0:	f023 0301 	bic.w	r3, r3, #1
 8001ee4:	6213      	str	r3, [r2, #32]
 8001ee6:	4b64      	ldr	r3, [pc, #400]	; (8002078 <HAL_RCC_OscConfig+0x4f4>)
 8001ee8:	6a1b      	ldr	r3, [r3, #32]
 8001eea:	4a63      	ldr	r2, [pc, #396]	; (8002078 <HAL_RCC_OscConfig+0x4f4>)
 8001eec:	f023 0304 	bic.w	r3, r3, #4
 8001ef0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	68db      	ldr	r3, [r3, #12]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d015      	beq.n	8001f26 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001efa:	f7ff fb97 	bl	800162c <HAL_GetTick>
 8001efe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f00:	e00a      	b.n	8001f18 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f02:	f7ff fb93 	bl	800162c <HAL_GetTick>
 8001f06:	4602      	mov	r2, r0
 8001f08:	693b      	ldr	r3, [r7, #16]
 8001f0a:	1ad3      	subs	r3, r2, r3
 8001f0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f10:	4293      	cmp	r3, r2
 8001f12:	d901      	bls.n	8001f18 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001f14:	2303      	movs	r3, #3
 8001f16:	e0ab      	b.n	8002070 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f18:	4b57      	ldr	r3, [pc, #348]	; (8002078 <HAL_RCC_OscConfig+0x4f4>)
 8001f1a:	6a1b      	ldr	r3, [r3, #32]
 8001f1c:	f003 0302 	and.w	r3, r3, #2
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d0ee      	beq.n	8001f02 <HAL_RCC_OscConfig+0x37e>
 8001f24:	e014      	b.n	8001f50 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f26:	f7ff fb81 	bl	800162c <HAL_GetTick>
 8001f2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f2c:	e00a      	b.n	8001f44 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f2e:	f7ff fb7d 	bl	800162c <HAL_GetTick>
 8001f32:	4602      	mov	r2, r0
 8001f34:	693b      	ldr	r3, [r7, #16]
 8001f36:	1ad3      	subs	r3, r2, r3
 8001f38:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f3c:	4293      	cmp	r3, r2
 8001f3e:	d901      	bls.n	8001f44 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001f40:	2303      	movs	r3, #3
 8001f42:	e095      	b.n	8002070 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f44:	4b4c      	ldr	r3, [pc, #304]	; (8002078 <HAL_RCC_OscConfig+0x4f4>)
 8001f46:	6a1b      	ldr	r3, [r3, #32]
 8001f48:	f003 0302 	and.w	r3, r3, #2
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d1ee      	bne.n	8001f2e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001f50:	7dfb      	ldrb	r3, [r7, #23]
 8001f52:	2b01      	cmp	r3, #1
 8001f54:	d105      	bne.n	8001f62 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f56:	4b48      	ldr	r3, [pc, #288]	; (8002078 <HAL_RCC_OscConfig+0x4f4>)
 8001f58:	69db      	ldr	r3, [r3, #28]
 8001f5a:	4a47      	ldr	r2, [pc, #284]	; (8002078 <HAL_RCC_OscConfig+0x4f4>)
 8001f5c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f60:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	69db      	ldr	r3, [r3, #28]
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	f000 8081 	beq.w	800206e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f6c:	4b42      	ldr	r3, [pc, #264]	; (8002078 <HAL_RCC_OscConfig+0x4f4>)
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	f003 030c 	and.w	r3, r3, #12
 8001f74:	2b08      	cmp	r3, #8
 8001f76:	d061      	beq.n	800203c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	69db      	ldr	r3, [r3, #28]
 8001f7c:	2b02      	cmp	r3, #2
 8001f7e:	d146      	bne.n	800200e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f80:	4b3f      	ldr	r3, [pc, #252]	; (8002080 <HAL_RCC_OscConfig+0x4fc>)
 8001f82:	2200      	movs	r2, #0
 8001f84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f86:	f7ff fb51 	bl	800162c <HAL_GetTick>
 8001f8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f8c:	e008      	b.n	8001fa0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f8e:	f7ff fb4d 	bl	800162c <HAL_GetTick>
 8001f92:	4602      	mov	r2, r0
 8001f94:	693b      	ldr	r3, [r7, #16]
 8001f96:	1ad3      	subs	r3, r2, r3
 8001f98:	2b02      	cmp	r3, #2
 8001f9a:	d901      	bls.n	8001fa0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001f9c:	2303      	movs	r3, #3
 8001f9e:	e067      	b.n	8002070 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fa0:	4b35      	ldr	r3, [pc, #212]	; (8002078 <HAL_RCC_OscConfig+0x4f4>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d1f0      	bne.n	8001f8e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	6a1b      	ldr	r3, [r3, #32]
 8001fb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fb4:	d108      	bne.n	8001fc8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001fb6:	4b30      	ldr	r3, [pc, #192]	; (8002078 <HAL_RCC_OscConfig+0x4f4>)
 8001fb8:	685b      	ldr	r3, [r3, #4]
 8001fba:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	689b      	ldr	r3, [r3, #8]
 8001fc2:	492d      	ldr	r1, [pc, #180]	; (8002078 <HAL_RCC_OscConfig+0x4f4>)
 8001fc4:	4313      	orrs	r3, r2
 8001fc6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001fc8:	4b2b      	ldr	r3, [pc, #172]	; (8002078 <HAL_RCC_OscConfig+0x4f4>)
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	6a19      	ldr	r1, [r3, #32]
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fd8:	430b      	orrs	r3, r1
 8001fda:	4927      	ldr	r1, [pc, #156]	; (8002078 <HAL_RCC_OscConfig+0x4f4>)
 8001fdc:	4313      	orrs	r3, r2
 8001fde:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001fe0:	4b27      	ldr	r3, [pc, #156]	; (8002080 <HAL_RCC_OscConfig+0x4fc>)
 8001fe2:	2201      	movs	r2, #1
 8001fe4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fe6:	f7ff fb21 	bl	800162c <HAL_GetTick>
 8001fea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001fec:	e008      	b.n	8002000 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fee:	f7ff fb1d 	bl	800162c <HAL_GetTick>
 8001ff2:	4602      	mov	r2, r0
 8001ff4:	693b      	ldr	r3, [r7, #16]
 8001ff6:	1ad3      	subs	r3, r2, r3
 8001ff8:	2b02      	cmp	r3, #2
 8001ffa:	d901      	bls.n	8002000 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001ffc:	2303      	movs	r3, #3
 8001ffe:	e037      	b.n	8002070 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002000:	4b1d      	ldr	r3, [pc, #116]	; (8002078 <HAL_RCC_OscConfig+0x4f4>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002008:	2b00      	cmp	r3, #0
 800200a:	d0f0      	beq.n	8001fee <HAL_RCC_OscConfig+0x46a>
 800200c:	e02f      	b.n	800206e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800200e:	4b1c      	ldr	r3, [pc, #112]	; (8002080 <HAL_RCC_OscConfig+0x4fc>)
 8002010:	2200      	movs	r2, #0
 8002012:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002014:	f7ff fb0a 	bl	800162c <HAL_GetTick>
 8002018:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800201a:	e008      	b.n	800202e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800201c:	f7ff fb06 	bl	800162c <HAL_GetTick>
 8002020:	4602      	mov	r2, r0
 8002022:	693b      	ldr	r3, [r7, #16]
 8002024:	1ad3      	subs	r3, r2, r3
 8002026:	2b02      	cmp	r3, #2
 8002028:	d901      	bls.n	800202e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800202a:	2303      	movs	r3, #3
 800202c:	e020      	b.n	8002070 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800202e:	4b12      	ldr	r3, [pc, #72]	; (8002078 <HAL_RCC_OscConfig+0x4f4>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002036:	2b00      	cmp	r3, #0
 8002038:	d1f0      	bne.n	800201c <HAL_RCC_OscConfig+0x498>
 800203a:	e018      	b.n	800206e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	69db      	ldr	r3, [r3, #28]
 8002040:	2b01      	cmp	r3, #1
 8002042:	d101      	bne.n	8002048 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002044:	2301      	movs	r3, #1
 8002046:	e013      	b.n	8002070 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002048:	4b0b      	ldr	r3, [pc, #44]	; (8002078 <HAL_RCC_OscConfig+0x4f4>)
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6a1b      	ldr	r3, [r3, #32]
 8002058:	429a      	cmp	r2, r3
 800205a:	d106      	bne.n	800206a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002066:	429a      	cmp	r2, r3
 8002068:	d001      	beq.n	800206e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800206a:	2301      	movs	r3, #1
 800206c:	e000      	b.n	8002070 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800206e:	2300      	movs	r3, #0
}
 8002070:	4618      	mov	r0, r3
 8002072:	3718      	adds	r7, #24
 8002074:	46bd      	mov	sp, r7
 8002076:	bd80      	pop	{r7, pc}
 8002078:	40021000 	.word	0x40021000
 800207c:	40007000 	.word	0x40007000
 8002080:	42420060 	.word	0x42420060

08002084 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b084      	sub	sp, #16
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
 800208c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	2b00      	cmp	r3, #0
 8002092:	d101      	bne.n	8002098 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002094:	2301      	movs	r3, #1
 8002096:	e0d0      	b.n	800223a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002098:	4b6a      	ldr	r3, [pc, #424]	; (8002244 <HAL_RCC_ClockConfig+0x1c0>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f003 0307 	and.w	r3, r3, #7
 80020a0:	683a      	ldr	r2, [r7, #0]
 80020a2:	429a      	cmp	r2, r3
 80020a4:	d910      	bls.n	80020c8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020a6:	4b67      	ldr	r3, [pc, #412]	; (8002244 <HAL_RCC_ClockConfig+0x1c0>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f023 0207 	bic.w	r2, r3, #7
 80020ae:	4965      	ldr	r1, [pc, #404]	; (8002244 <HAL_RCC_ClockConfig+0x1c0>)
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	4313      	orrs	r3, r2
 80020b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020b6:	4b63      	ldr	r3, [pc, #396]	; (8002244 <HAL_RCC_ClockConfig+0x1c0>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f003 0307 	and.w	r3, r3, #7
 80020be:	683a      	ldr	r2, [r7, #0]
 80020c0:	429a      	cmp	r2, r3
 80020c2:	d001      	beq.n	80020c8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80020c4:	2301      	movs	r3, #1
 80020c6:	e0b8      	b.n	800223a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f003 0302 	and.w	r3, r3, #2
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d020      	beq.n	8002116 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f003 0304 	and.w	r3, r3, #4
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d005      	beq.n	80020ec <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80020e0:	4b59      	ldr	r3, [pc, #356]	; (8002248 <HAL_RCC_ClockConfig+0x1c4>)
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	4a58      	ldr	r2, [pc, #352]	; (8002248 <HAL_RCC_ClockConfig+0x1c4>)
 80020e6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80020ea:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f003 0308 	and.w	r3, r3, #8
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d005      	beq.n	8002104 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80020f8:	4b53      	ldr	r3, [pc, #332]	; (8002248 <HAL_RCC_ClockConfig+0x1c4>)
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	4a52      	ldr	r2, [pc, #328]	; (8002248 <HAL_RCC_ClockConfig+0x1c4>)
 80020fe:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002102:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002104:	4b50      	ldr	r3, [pc, #320]	; (8002248 <HAL_RCC_ClockConfig+0x1c4>)
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	689b      	ldr	r3, [r3, #8]
 8002110:	494d      	ldr	r1, [pc, #308]	; (8002248 <HAL_RCC_ClockConfig+0x1c4>)
 8002112:	4313      	orrs	r3, r2
 8002114:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f003 0301 	and.w	r3, r3, #1
 800211e:	2b00      	cmp	r3, #0
 8002120:	d040      	beq.n	80021a4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	2b01      	cmp	r3, #1
 8002128:	d107      	bne.n	800213a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800212a:	4b47      	ldr	r3, [pc, #284]	; (8002248 <HAL_RCC_ClockConfig+0x1c4>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002132:	2b00      	cmp	r3, #0
 8002134:	d115      	bne.n	8002162 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002136:	2301      	movs	r3, #1
 8002138:	e07f      	b.n	800223a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	685b      	ldr	r3, [r3, #4]
 800213e:	2b02      	cmp	r3, #2
 8002140:	d107      	bne.n	8002152 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002142:	4b41      	ldr	r3, [pc, #260]	; (8002248 <HAL_RCC_ClockConfig+0x1c4>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800214a:	2b00      	cmp	r3, #0
 800214c:	d109      	bne.n	8002162 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800214e:	2301      	movs	r3, #1
 8002150:	e073      	b.n	800223a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002152:	4b3d      	ldr	r3, [pc, #244]	; (8002248 <HAL_RCC_ClockConfig+0x1c4>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f003 0302 	and.w	r3, r3, #2
 800215a:	2b00      	cmp	r3, #0
 800215c:	d101      	bne.n	8002162 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800215e:	2301      	movs	r3, #1
 8002160:	e06b      	b.n	800223a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002162:	4b39      	ldr	r3, [pc, #228]	; (8002248 <HAL_RCC_ClockConfig+0x1c4>)
 8002164:	685b      	ldr	r3, [r3, #4]
 8002166:	f023 0203 	bic.w	r2, r3, #3
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	685b      	ldr	r3, [r3, #4]
 800216e:	4936      	ldr	r1, [pc, #216]	; (8002248 <HAL_RCC_ClockConfig+0x1c4>)
 8002170:	4313      	orrs	r3, r2
 8002172:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002174:	f7ff fa5a 	bl	800162c <HAL_GetTick>
 8002178:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800217a:	e00a      	b.n	8002192 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800217c:	f7ff fa56 	bl	800162c <HAL_GetTick>
 8002180:	4602      	mov	r2, r0
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	1ad3      	subs	r3, r2, r3
 8002186:	f241 3288 	movw	r2, #5000	; 0x1388
 800218a:	4293      	cmp	r3, r2
 800218c:	d901      	bls.n	8002192 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800218e:	2303      	movs	r3, #3
 8002190:	e053      	b.n	800223a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002192:	4b2d      	ldr	r3, [pc, #180]	; (8002248 <HAL_RCC_ClockConfig+0x1c4>)
 8002194:	685b      	ldr	r3, [r3, #4]
 8002196:	f003 020c 	and.w	r2, r3, #12
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	685b      	ldr	r3, [r3, #4]
 800219e:	009b      	lsls	r3, r3, #2
 80021a0:	429a      	cmp	r2, r3
 80021a2:	d1eb      	bne.n	800217c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80021a4:	4b27      	ldr	r3, [pc, #156]	; (8002244 <HAL_RCC_ClockConfig+0x1c0>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f003 0307 	and.w	r3, r3, #7
 80021ac:	683a      	ldr	r2, [r7, #0]
 80021ae:	429a      	cmp	r2, r3
 80021b0:	d210      	bcs.n	80021d4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021b2:	4b24      	ldr	r3, [pc, #144]	; (8002244 <HAL_RCC_ClockConfig+0x1c0>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f023 0207 	bic.w	r2, r3, #7
 80021ba:	4922      	ldr	r1, [pc, #136]	; (8002244 <HAL_RCC_ClockConfig+0x1c0>)
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	4313      	orrs	r3, r2
 80021c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021c2:	4b20      	ldr	r3, [pc, #128]	; (8002244 <HAL_RCC_ClockConfig+0x1c0>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f003 0307 	and.w	r3, r3, #7
 80021ca:	683a      	ldr	r2, [r7, #0]
 80021cc:	429a      	cmp	r2, r3
 80021ce:	d001      	beq.n	80021d4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80021d0:	2301      	movs	r3, #1
 80021d2:	e032      	b.n	800223a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f003 0304 	and.w	r3, r3, #4
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d008      	beq.n	80021f2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80021e0:	4b19      	ldr	r3, [pc, #100]	; (8002248 <HAL_RCC_ClockConfig+0x1c4>)
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	68db      	ldr	r3, [r3, #12]
 80021ec:	4916      	ldr	r1, [pc, #88]	; (8002248 <HAL_RCC_ClockConfig+0x1c4>)
 80021ee:	4313      	orrs	r3, r2
 80021f0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f003 0308 	and.w	r3, r3, #8
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d009      	beq.n	8002212 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80021fe:	4b12      	ldr	r3, [pc, #72]	; (8002248 <HAL_RCC_ClockConfig+0x1c4>)
 8002200:	685b      	ldr	r3, [r3, #4]
 8002202:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	691b      	ldr	r3, [r3, #16]
 800220a:	00db      	lsls	r3, r3, #3
 800220c:	490e      	ldr	r1, [pc, #56]	; (8002248 <HAL_RCC_ClockConfig+0x1c4>)
 800220e:	4313      	orrs	r3, r2
 8002210:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002212:	f000 f821 	bl	8002258 <HAL_RCC_GetSysClockFreq>
 8002216:	4602      	mov	r2, r0
 8002218:	4b0b      	ldr	r3, [pc, #44]	; (8002248 <HAL_RCC_ClockConfig+0x1c4>)
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	091b      	lsrs	r3, r3, #4
 800221e:	f003 030f 	and.w	r3, r3, #15
 8002222:	490a      	ldr	r1, [pc, #40]	; (800224c <HAL_RCC_ClockConfig+0x1c8>)
 8002224:	5ccb      	ldrb	r3, [r1, r3]
 8002226:	fa22 f303 	lsr.w	r3, r2, r3
 800222a:	4a09      	ldr	r2, [pc, #36]	; (8002250 <HAL_RCC_ClockConfig+0x1cc>)
 800222c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800222e:	4b09      	ldr	r3, [pc, #36]	; (8002254 <HAL_RCC_ClockConfig+0x1d0>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	4618      	mov	r0, r3
 8002234:	f7ff f926 	bl	8001484 <HAL_InitTick>

  return HAL_OK;
 8002238:	2300      	movs	r3, #0
}
 800223a:	4618      	mov	r0, r3
 800223c:	3710      	adds	r7, #16
 800223e:	46bd      	mov	sp, r7
 8002240:	bd80      	pop	{r7, pc}
 8002242:	bf00      	nop
 8002244:	40022000 	.word	0x40022000
 8002248:	40021000 	.word	0x40021000
 800224c:	08002c18 	.word	0x08002c18
 8002250:	20000054 	.word	0x20000054
 8002254:	20000058 	.word	0x20000058

08002258 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002258:	b480      	push	{r7}
 800225a:	b087      	sub	sp, #28
 800225c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800225e:	2300      	movs	r3, #0
 8002260:	60fb      	str	r3, [r7, #12]
 8002262:	2300      	movs	r3, #0
 8002264:	60bb      	str	r3, [r7, #8]
 8002266:	2300      	movs	r3, #0
 8002268:	617b      	str	r3, [r7, #20]
 800226a:	2300      	movs	r3, #0
 800226c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800226e:	2300      	movs	r3, #0
 8002270:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002272:	4b1e      	ldr	r3, [pc, #120]	; (80022ec <HAL_RCC_GetSysClockFreq+0x94>)
 8002274:	685b      	ldr	r3, [r3, #4]
 8002276:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	f003 030c 	and.w	r3, r3, #12
 800227e:	2b04      	cmp	r3, #4
 8002280:	d002      	beq.n	8002288 <HAL_RCC_GetSysClockFreq+0x30>
 8002282:	2b08      	cmp	r3, #8
 8002284:	d003      	beq.n	800228e <HAL_RCC_GetSysClockFreq+0x36>
 8002286:	e027      	b.n	80022d8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002288:	4b19      	ldr	r3, [pc, #100]	; (80022f0 <HAL_RCC_GetSysClockFreq+0x98>)
 800228a:	613b      	str	r3, [r7, #16]
      break;
 800228c:	e027      	b.n	80022de <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	0c9b      	lsrs	r3, r3, #18
 8002292:	f003 030f 	and.w	r3, r3, #15
 8002296:	4a17      	ldr	r2, [pc, #92]	; (80022f4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002298:	5cd3      	ldrb	r3, [r2, r3]
 800229a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d010      	beq.n	80022c8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80022a6:	4b11      	ldr	r3, [pc, #68]	; (80022ec <HAL_RCC_GetSysClockFreq+0x94>)
 80022a8:	685b      	ldr	r3, [r3, #4]
 80022aa:	0c5b      	lsrs	r3, r3, #17
 80022ac:	f003 0301 	and.w	r3, r3, #1
 80022b0:	4a11      	ldr	r2, [pc, #68]	; (80022f8 <HAL_RCC_GetSysClockFreq+0xa0>)
 80022b2:	5cd3      	ldrb	r3, [r2, r3]
 80022b4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	4a0d      	ldr	r2, [pc, #52]	; (80022f0 <HAL_RCC_GetSysClockFreq+0x98>)
 80022ba:	fb02 f203 	mul.w	r2, r2, r3
 80022be:	68bb      	ldr	r3, [r7, #8]
 80022c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80022c4:	617b      	str	r3, [r7, #20]
 80022c6:	e004      	b.n	80022d2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	4a0c      	ldr	r2, [pc, #48]	; (80022fc <HAL_RCC_GetSysClockFreq+0xa4>)
 80022cc:	fb02 f303 	mul.w	r3, r2, r3
 80022d0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80022d2:	697b      	ldr	r3, [r7, #20]
 80022d4:	613b      	str	r3, [r7, #16]
      break;
 80022d6:	e002      	b.n	80022de <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80022d8:	4b05      	ldr	r3, [pc, #20]	; (80022f0 <HAL_RCC_GetSysClockFreq+0x98>)
 80022da:	613b      	str	r3, [r7, #16]
      break;
 80022dc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80022de:	693b      	ldr	r3, [r7, #16]
}
 80022e0:	4618      	mov	r0, r3
 80022e2:	371c      	adds	r7, #28
 80022e4:	46bd      	mov	sp, r7
 80022e6:	bc80      	pop	{r7}
 80022e8:	4770      	bx	lr
 80022ea:	bf00      	nop
 80022ec:	40021000 	.word	0x40021000
 80022f0:	007a1200 	.word	0x007a1200
 80022f4:	08002c30 	.word	0x08002c30
 80022f8:	08002c40 	.word	0x08002c40
 80022fc:	003d0900 	.word	0x003d0900

08002300 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002300:	b480      	push	{r7}
 8002302:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002304:	4b02      	ldr	r3, [pc, #8]	; (8002310 <HAL_RCC_GetHCLKFreq+0x10>)
 8002306:	681b      	ldr	r3, [r3, #0]
}
 8002308:	4618      	mov	r0, r3
 800230a:	46bd      	mov	sp, r7
 800230c:	bc80      	pop	{r7}
 800230e:	4770      	bx	lr
 8002310:	20000054 	.word	0x20000054

08002314 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002318:	f7ff fff2 	bl	8002300 <HAL_RCC_GetHCLKFreq>
 800231c:	4602      	mov	r2, r0
 800231e:	4b05      	ldr	r3, [pc, #20]	; (8002334 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	0adb      	lsrs	r3, r3, #11
 8002324:	f003 0307 	and.w	r3, r3, #7
 8002328:	4903      	ldr	r1, [pc, #12]	; (8002338 <HAL_RCC_GetPCLK2Freq+0x24>)
 800232a:	5ccb      	ldrb	r3, [r1, r3]
 800232c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002330:	4618      	mov	r0, r3
 8002332:	bd80      	pop	{r7, pc}
 8002334:	40021000 	.word	0x40021000
 8002338:	08002c28 	.word	0x08002c28

0800233c <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800233c:	b480      	push	{r7}
 800233e:	b083      	sub	sp, #12
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
 8002344:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	220f      	movs	r2, #15
 800234a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800234c:	4b11      	ldr	r3, [pc, #68]	; (8002394 <HAL_RCC_GetClockConfig+0x58>)
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	f003 0203 	and.w	r2, r3, #3
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002358:	4b0e      	ldr	r3, [pc, #56]	; (8002394 <HAL_RCC_GetClockConfig+0x58>)
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002364:	4b0b      	ldr	r3, [pc, #44]	; (8002394 <HAL_RCC_GetClockConfig+0x58>)
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8002370:	4b08      	ldr	r3, [pc, #32]	; (8002394 <HAL_RCC_GetClockConfig+0x58>)
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	08db      	lsrs	r3, r3, #3
 8002376:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800237e:	4b06      	ldr	r3, [pc, #24]	; (8002398 <HAL_RCC_GetClockConfig+0x5c>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f003 0207 	and.w	r2, r3, #7
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 800238a:	bf00      	nop
 800238c:	370c      	adds	r7, #12
 800238e:	46bd      	mov	sp, r7
 8002390:	bc80      	pop	{r7}
 8002392:	4770      	bx	lr
 8002394:	40021000 	.word	0x40021000
 8002398:	40022000 	.word	0x40022000

0800239c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800239c:	b480      	push	{r7}
 800239e:	b085      	sub	sp, #20
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80023a4:	4b0a      	ldr	r3, [pc, #40]	; (80023d0 <RCC_Delay+0x34>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4a0a      	ldr	r2, [pc, #40]	; (80023d4 <RCC_Delay+0x38>)
 80023aa:	fba2 2303 	umull	r2, r3, r2, r3
 80023ae:	0a5b      	lsrs	r3, r3, #9
 80023b0:	687a      	ldr	r2, [r7, #4]
 80023b2:	fb02 f303 	mul.w	r3, r2, r3
 80023b6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80023b8:	bf00      	nop
  }
  while (Delay --);
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	1e5a      	subs	r2, r3, #1
 80023be:	60fa      	str	r2, [r7, #12]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d1f9      	bne.n	80023b8 <RCC_Delay+0x1c>
}
 80023c4:	bf00      	nop
 80023c6:	bf00      	nop
 80023c8:	3714      	adds	r7, #20
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bc80      	pop	{r7}
 80023ce:	4770      	bx	lr
 80023d0:	20000054 	.word	0x20000054
 80023d4:	10624dd3 	.word	0x10624dd3

080023d8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b082      	sub	sp, #8
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d101      	bne.n	80023ea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80023e6:	2301      	movs	r3, #1
 80023e8:	e041      	b.n	800246e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023f0:	b2db      	uxtb	r3, r3
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d106      	bne.n	8002404 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	2200      	movs	r2, #0
 80023fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80023fe:	6878      	ldr	r0, [r7, #4]
 8002400:	f7ff f81c 	bl	800143c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2202      	movs	r2, #2
 8002408:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681a      	ldr	r2, [r3, #0]
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	3304      	adds	r3, #4
 8002414:	4619      	mov	r1, r3
 8002416:	4610      	mov	r0, r2
 8002418:	f000 fa6e 	bl	80028f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2201      	movs	r2, #1
 8002420:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2201      	movs	r2, #1
 8002428:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2201      	movs	r2, #1
 8002430:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2201      	movs	r2, #1
 8002438:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2201      	movs	r2, #1
 8002440:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2201      	movs	r2, #1
 8002448:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2201      	movs	r2, #1
 8002450:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2201      	movs	r2, #1
 8002458:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2201      	movs	r2, #1
 8002460:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2201      	movs	r2, #1
 8002468:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800246c:	2300      	movs	r3, #0
}
 800246e:	4618      	mov	r0, r3
 8002470:	3708      	adds	r7, #8
 8002472:	46bd      	mov	sp, r7
 8002474:	bd80      	pop	{r7, pc}
	...

08002478 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002478:	b480      	push	{r7}
 800247a:	b085      	sub	sp, #20
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002486:	b2db      	uxtb	r3, r3
 8002488:	2b01      	cmp	r3, #1
 800248a:	d001      	beq.n	8002490 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800248c:	2301      	movs	r3, #1
 800248e:	e035      	b.n	80024fc <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2202      	movs	r2, #2
 8002494:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	68da      	ldr	r2, [r3, #12]
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f042 0201 	orr.w	r2, r2, #1
 80024a6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4a16      	ldr	r2, [pc, #88]	; (8002508 <HAL_TIM_Base_Start_IT+0x90>)
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d009      	beq.n	80024c6 <HAL_TIM_Base_Start_IT+0x4e>
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024ba:	d004      	beq.n	80024c6 <HAL_TIM_Base_Start_IT+0x4e>
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4a12      	ldr	r2, [pc, #72]	; (800250c <HAL_TIM_Base_Start_IT+0x94>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d111      	bne.n	80024ea <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	689b      	ldr	r3, [r3, #8]
 80024cc:	f003 0307 	and.w	r3, r3, #7
 80024d0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	2b06      	cmp	r3, #6
 80024d6:	d010      	beq.n	80024fa <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	681a      	ldr	r2, [r3, #0]
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f042 0201 	orr.w	r2, r2, #1
 80024e6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80024e8:	e007      	b.n	80024fa <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	681a      	ldr	r2, [r3, #0]
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f042 0201 	orr.w	r2, r2, #1
 80024f8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80024fa:	2300      	movs	r3, #0
}
 80024fc:	4618      	mov	r0, r3
 80024fe:	3714      	adds	r7, #20
 8002500:	46bd      	mov	sp, r7
 8002502:	bc80      	pop	{r7}
 8002504:	4770      	bx	lr
 8002506:	bf00      	nop
 8002508:	40012c00 	.word	0x40012c00
 800250c:	40000400 	.word	0x40000400

08002510 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b082      	sub	sp, #8
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	691b      	ldr	r3, [r3, #16]
 800251e:	f003 0302 	and.w	r3, r3, #2
 8002522:	2b02      	cmp	r3, #2
 8002524:	d122      	bne.n	800256c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	68db      	ldr	r3, [r3, #12]
 800252c:	f003 0302 	and.w	r3, r3, #2
 8002530:	2b02      	cmp	r3, #2
 8002532:	d11b      	bne.n	800256c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f06f 0202 	mvn.w	r2, #2
 800253c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	2201      	movs	r2, #1
 8002542:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	699b      	ldr	r3, [r3, #24]
 800254a:	f003 0303 	and.w	r3, r3, #3
 800254e:	2b00      	cmp	r3, #0
 8002550:	d003      	beq.n	800255a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002552:	6878      	ldr	r0, [r7, #4]
 8002554:	f000 f9b4 	bl	80028c0 <HAL_TIM_IC_CaptureCallback>
 8002558:	e005      	b.n	8002566 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800255a:	6878      	ldr	r0, [r7, #4]
 800255c:	f000 f9a7 	bl	80028ae <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002560:	6878      	ldr	r0, [r7, #4]
 8002562:	f000 f9b6 	bl	80028d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	2200      	movs	r2, #0
 800256a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	691b      	ldr	r3, [r3, #16]
 8002572:	f003 0304 	and.w	r3, r3, #4
 8002576:	2b04      	cmp	r3, #4
 8002578:	d122      	bne.n	80025c0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	68db      	ldr	r3, [r3, #12]
 8002580:	f003 0304 	and.w	r3, r3, #4
 8002584:	2b04      	cmp	r3, #4
 8002586:	d11b      	bne.n	80025c0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f06f 0204 	mvn.w	r2, #4
 8002590:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	2202      	movs	r2, #2
 8002596:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	699b      	ldr	r3, [r3, #24]
 800259e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d003      	beq.n	80025ae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80025a6:	6878      	ldr	r0, [r7, #4]
 80025a8:	f000 f98a 	bl	80028c0 <HAL_TIM_IC_CaptureCallback>
 80025ac:	e005      	b.n	80025ba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80025ae:	6878      	ldr	r0, [r7, #4]
 80025b0:	f000 f97d 	bl	80028ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025b4:	6878      	ldr	r0, [r7, #4]
 80025b6:	f000 f98c 	bl	80028d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2200      	movs	r2, #0
 80025be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	691b      	ldr	r3, [r3, #16]
 80025c6:	f003 0308 	and.w	r3, r3, #8
 80025ca:	2b08      	cmp	r3, #8
 80025cc:	d122      	bne.n	8002614 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	68db      	ldr	r3, [r3, #12]
 80025d4:	f003 0308 	and.w	r3, r3, #8
 80025d8:	2b08      	cmp	r3, #8
 80025da:	d11b      	bne.n	8002614 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f06f 0208 	mvn.w	r2, #8
 80025e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	2204      	movs	r2, #4
 80025ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	69db      	ldr	r3, [r3, #28]
 80025f2:	f003 0303 	and.w	r3, r3, #3
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d003      	beq.n	8002602 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80025fa:	6878      	ldr	r0, [r7, #4]
 80025fc:	f000 f960 	bl	80028c0 <HAL_TIM_IC_CaptureCallback>
 8002600:	e005      	b.n	800260e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002602:	6878      	ldr	r0, [r7, #4]
 8002604:	f000 f953 	bl	80028ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002608:	6878      	ldr	r0, [r7, #4]
 800260a:	f000 f962 	bl	80028d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	2200      	movs	r2, #0
 8002612:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	691b      	ldr	r3, [r3, #16]
 800261a:	f003 0310 	and.w	r3, r3, #16
 800261e:	2b10      	cmp	r3, #16
 8002620:	d122      	bne.n	8002668 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	68db      	ldr	r3, [r3, #12]
 8002628:	f003 0310 	and.w	r3, r3, #16
 800262c:	2b10      	cmp	r3, #16
 800262e:	d11b      	bne.n	8002668 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f06f 0210 	mvn.w	r2, #16
 8002638:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2208      	movs	r2, #8
 800263e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	69db      	ldr	r3, [r3, #28]
 8002646:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800264a:	2b00      	cmp	r3, #0
 800264c:	d003      	beq.n	8002656 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800264e:	6878      	ldr	r0, [r7, #4]
 8002650:	f000 f936 	bl	80028c0 <HAL_TIM_IC_CaptureCallback>
 8002654:	e005      	b.n	8002662 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002656:	6878      	ldr	r0, [r7, #4]
 8002658:	f000 f929 	bl	80028ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800265c:	6878      	ldr	r0, [r7, #4]
 800265e:	f000 f938 	bl	80028d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	2200      	movs	r2, #0
 8002666:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	691b      	ldr	r3, [r3, #16]
 800266e:	f003 0301 	and.w	r3, r3, #1
 8002672:	2b01      	cmp	r3, #1
 8002674:	d10e      	bne.n	8002694 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	68db      	ldr	r3, [r3, #12]
 800267c:	f003 0301 	and.w	r3, r3, #1
 8002680:	2b01      	cmp	r3, #1
 8002682:	d107      	bne.n	8002694 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f06f 0201 	mvn.w	r2, #1
 800268c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800268e:	6878      	ldr	r0, [r7, #4]
 8002690:	f7fe fe28 	bl	80012e4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	691b      	ldr	r3, [r3, #16]
 800269a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800269e:	2b80      	cmp	r3, #128	; 0x80
 80026a0:	d10e      	bne.n	80026c0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	68db      	ldr	r3, [r3, #12]
 80026a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026ac:	2b80      	cmp	r3, #128	; 0x80
 80026ae:	d107      	bne.n	80026c0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80026b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80026ba:	6878      	ldr	r0, [r7, #4]
 80026bc:	f000 fa6b 	bl	8002b96 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	691b      	ldr	r3, [r3, #16]
 80026c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026ca:	2b40      	cmp	r3, #64	; 0x40
 80026cc:	d10e      	bne.n	80026ec <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	68db      	ldr	r3, [r3, #12]
 80026d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026d8:	2b40      	cmp	r3, #64	; 0x40
 80026da:	d107      	bne.n	80026ec <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80026e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80026e6:	6878      	ldr	r0, [r7, #4]
 80026e8:	f000 f8fc 	bl	80028e4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	691b      	ldr	r3, [r3, #16]
 80026f2:	f003 0320 	and.w	r3, r3, #32
 80026f6:	2b20      	cmp	r3, #32
 80026f8:	d10e      	bne.n	8002718 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	68db      	ldr	r3, [r3, #12]
 8002700:	f003 0320 	and.w	r3, r3, #32
 8002704:	2b20      	cmp	r3, #32
 8002706:	d107      	bne.n	8002718 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f06f 0220 	mvn.w	r2, #32
 8002710:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002712:	6878      	ldr	r0, [r7, #4]
 8002714:	f000 fa36 	bl	8002b84 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002718:	bf00      	nop
 800271a:	3708      	adds	r7, #8
 800271c:	46bd      	mov	sp, r7
 800271e:	bd80      	pop	{r7, pc}

08002720 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b084      	sub	sp, #16
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
 8002728:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800272a:	2300      	movs	r3, #0
 800272c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002734:	2b01      	cmp	r3, #1
 8002736:	d101      	bne.n	800273c <HAL_TIM_ConfigClockSource+0x1c>
 8002738:	2302      	movs	r3, #2
 800273a:	e0b4      	b.n	80028a6 <HAL_TIM_ConfigClockSource+0x186>
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2201      	movs	r2, #1
 8002740:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2202      	movs	r2, #2
 8002748:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	689b      	ldr	r3, [r3, #8]
 8002752:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002754:	68bb      	ldr	r3, [r7, #8]
 8002756:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800275a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800275c:	68bb      	ldr	r3, [r7, #8]
 800275e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002762:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	68ba      	ldr	r2, [r7, #8]
 800276a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002774:	d03e      	beq.n	80027f4 <HAL_TIM_ConfigClockSource+0xd4>
 8002776:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800277a:	f200 8087 	bhi.w	800288c <HAL_TIM_ConfigClockSource+0x16c>
 800277e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002782:	f000 8086 	beq.w	8002892 <HAL_TIM_ConfigClockSource+0x172>
 8002786:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800278a:	d87f      	bhi.n	800288c <HAL_TIM_ConfigClockSource+0x16c>
 800278c:	2b70      	cmp	r3, #112	; 0x70
 800278e:	d01a      	beq.n	80027c6 <HAL_TIM_ConfigClockSource+0xa6>
 8002790:	2b70      	cmp	r3, #112	; 0x70
 8002792:	d87b      	bhi.n	800288c <HAL_TIM_ConfigClockSource+0x16c>
 8002794:	2b60      	cmp	r3, #96	; 0x60
 8002796:	d050      	beq.n	800283a <HAL_TIM_ConfigClockSource+0x11a>
 8002798:	2b60      	cmp	r3, #96	; 0x60
 800279a:	d877      	bhi.n	800288c <HAL_TIM_ConfigClockSource+0x16c>
 800279c:	2b50      	cmp	r3, #80	; 0x50
 800279e:	d03c      	beq.n	800281a <HAL_TIM_ConfigClockSource+0xfa>
 80027a0:	2b50      	cmp	r3, #80	; 0x50
 80027a2:	d873      	bhi.n	800288c <HAL_TIM_ConfigClockSource+0x16c>
 80027a4:	2b40      	cmp	r3, #64	; 0x40
 80027a6:	d058      	beq.n	800285a <HAL_TIM_ConfigClockSource+0x13a>
 80027a8:	2b40      	cmp	r3, #64	; 0x40
 80027aa:	d86f      	bhi.n	800288c <HAL_TIM_ConfigClockSource+0x16c>
 80027ac:	2b30      	cmp	r3, #48	; 0x30
 80027ae:	d064      	beq.n	800287a <HAL_TIM_ConfigClockSource+0x15a>
 80027b0:	2b30      	cmp	r3, #48	; 0x30
 80027b2:	d86b      	bhi.n	800288c <HAL_TIM_ConfigClockSource+0x16c>
 80027b4:	2b20      	cmp	r3, #32
 80027b6:	d060      	beq.n	800287a <HAL_TIM_ConfigClockSource+0x15a>
 80027b8:	2b20      	cmp	r3, #32
 80027ba:	d867      	bhi.n	800288c <HAL_TIM_ConfigClockSource+0x16c>
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d05c      	beq.n	800287a <HAL_TIM_ConfigClockSource+0x15a>
 80027c0:	2b10      	cmp	r3, #16
 80027c2:	d05a      	beq.n	800287a <HAL_TIM_ConfigClockSource+0x15a>
 80027c4:	e062      	b.n	800288c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6818      	ldr	r0, [r3, #0]
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	6899      	ldr	r1, [r3, #8]
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	685a      	ldr	r2, [r3, #4]
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	68db      	ldr	r3, [r3, #12]
 80027d6:	f000 f95e 	bl	8002a96 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	689b      	ldr	r3, [r3, #8]
 80027e0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80027e2:	68bb      	ldr	r3, [r7, #8]
 80027e4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80027e8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	68ba      	ldr	r2, [r7, #8]
 80027f0:	609a      	str	r2, [r3, #8]
      break;
 80027f2:	e04f      	b.n	8002894 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6818      	ldr	r0, [r3, #0]
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	6899      	ldr	r1, [r3, #8]
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	685a      	ldr	r2, [r3, #4]
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	68db      	ldr	r3, [r3, #12]
 8002804:	f000 f947 	bl	8002a96 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	689a      	ldr	r2, [r3, #8]
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002816:	609a      	str	r2, [r3, #8]
      break;
 8002818:	e03c      	b.n	8002894 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6818      	ldr	r0, [r3, #0]
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	6859      	ldr	r1, [r3, #4]
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	68db      	ldr	r3, [r3, #12]
 8002826:	461a      	mov	r2, r3
 8002828:	f000 f8be 	bl	80029a8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	2150      	movs	r1, #80	; 0x50
 8002832:	4618      	mov	r0, r3
 8002834:	f000 f915 	bl	8002a62 <TIM_ITRx_SetConfig>
      break;
 8002838:	e02c      	b.n	8002894 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6818      	ldr	r0, [r3, #0]
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	6859      	ldr	r1, [r3, #4]
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	68db      	ldr	r3, [r3, #12]
 8002846:	461a      	mov	r2, r3
 8002848:	f000 f8dc 	bl	8002a04 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	2160      	movs	r1, #96	; 0x60
 8002852:	4618      	mov	r0, r3
 8002854:	f000 f905 	bl	8002a62 <TIM_ITRx_SetConfig>
      break;
 8002858:	e01c      	b.n	8002894 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6818      	ldr	r0, [r3, #0]
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	6859      	ldr	r1, [r3, #4]
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	68db      	ldr	r3, [r3, #12]
 8002866:	461a      	mov	r2, r3
 8002868:	f000 f89e 	bl	80029a8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	2140      	movs	r1, #64	; 0x40
 8002872:	4618      	mov	r0, r3
 8002874:	f000 f8f5 	bl	8002a62 <TIM_ITRx_SetConfig>
      break;
 8002878:	e00c      	b.n	8002894 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681a      	ldr	r2, [r3, #0]
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	4619      	mov	r1, r3
 8002884:	4610      	mov	r0, r2
 8002886:	f000 f8ec 	bl	8002a62 <TIM_ITRx_SetConfig>
      break;
 800288a:	e003      	b.n	8002894 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800288c:	2301      	movs	r3, #1
 800288e:	73fb      	strb	r3, [r7, #15]
      break;
 8002890:	e000      	b.n	8002894 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002892:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2201      	movs	r2, #1
 8002898:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2200      	movs	r2, #0
 80028a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80028a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80028a6:	4618      	mov	r0, r3
 80028a8:	3710      	adds	r7, #16
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bd80      	pop	{r7, pc}

080028ae <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80028ae:	b480      	push	{r7}
 80028b0:	b083      	sub	sp, #12
 80028b2:	af00      	add	r7, sp, #0
 80028b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80028b6:	bf00      	nop
 80028b8:	370c      	adds	r7, #12
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bc80      	pop	{r7}
 80028be:	4770      	bx	lr

080028c0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80028c0:	b480      	push	{r7}
 80028c2:	b083      	sub	sp, #12
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80028c8:	bf00      	nop
 80028ca:	370c      	adds	r7, #12
 80028cc:	46bd      	mov	sp, r7
 80028ce:	bc80      	pop	{r7}
 80028d0:	4770      	bx	lr

080028d2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80028d2:	b480      	push	{r7}
 80028d4:	b083      	sub	sp, #12
 80028d6:	af00      	add	r7, sp, #0
 80028d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80028da:	bf00      	nop
 80028dc:	370c      	adds	r7, #12
 80028de:	46bd      	mov	sp, r7
 80028e0:	bc80      	pop	{r7}
 80028e2:	4770      	bx	lr

080028e4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80028e4:	b480      	push	{r7}
 80028e6:	b083      	sub	sp, #12
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80028ec:	bf00      	nop
 80028ee:	370c      	adds	r7, #12
 80028f0:	46bd      	mov	sp, r7
 80028f2:	bc80      	pop	{r7}
 80028f4:	4770      	bx	lr
	...

080028f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80028f8:	b480      	push	{r7}
 80028fa:	b085      	sub	sp, #20
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
 8002900:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	4a25      	ldr	r2, [pc, #148]	; (80029a0 <TIM_Base_SetConfig+0xa8>)
 800290c:	4293      	cmp	r3, r2
 800290e:	d007      	beq.n	8002920 <TIM_Base_SetConfig+0x28>
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002916:	d003      	beq.n	8002920 <TIM_Base_SetConfig+0x28>
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	4a22      	ldr	r2, [pc, #136]	; (80029a4 <TIM_Base_SetConfig+0xac>)
 800291c:	4293      	cmp	r3, r2
 800291e:	d108      	bne.n	8002932 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002926:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	685b      	ldr	r3, [r3, #4]
 800292c:	68fa      	ldr	r2, [r7, #12]
 800292e:	4313      	orrs	r3, r2
 8002930:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	4a1a      	ldr	r2, [pc, #104]	; (80029a0 <TIM_Base_SetConfig+0xa8>)
 8002936:	4293      	cmp	r3, r2
 8002938:	d007      	beq.n	800294a <TIM_Base_SetConfig+0x52>
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002940:	d003      	beq.n	800294a <TIM_Base_SetConfig+0x52>
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	4a17      	ldr	r2, [pc, #92]	; (80029a4 <TIM_Base_SetConfig+0xac>)
 8002946:	4293      	cmp	r3, r2
 8002948:	d108      	bne.n	800295c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002950:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	68db      	ldr	r3, [r3, #12]
 8002956:	68fa      	ldr	r2, [r7, #12]
 8002958:	4313      	orrs	r3, r2
 800295a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	695b      	ldr	r3, [r3, #20]
 8002966:	4313      	orrs	r3, r2
 8002968:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	68fa      	ldr	r2, [r7, #12]
 800296e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	689a      	ldr	r2, [r3, #8]
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	681a      	ldr	r2, [r3, #0]
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	4a07      	ldr	r2, [pc, #28]	; (80029a0 <TIM_Base_SetConfig+0xa8>)
 8002984:	4293      	cmp	r3, r2
 8002986:	d103      	bne.n	8002990 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	691a      	ldr	r2, [r3, #16]
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2201      	movs	r2, #1
 8002994:	615a      	str	r2, [r3, #20]
}
 8002996:	bf00      	nop
 8002998:	3714      	adds	r7, #20
 800299a:	46bd      	mov	sp, r7
 800299c:	bc80      	pop	{r7}
 800299e:	4770      	bx	lr
 80029a0:	40012c00 	.word	0x40012c00
 80029a4:	40000400 	.word	0x40000400

080029a8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80029a8:	b480      	push	{r7}
 80029aa:	b087      	sub	sp, #28
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	60f8      	str	r0, [r7, #12]
 80029b0:	60b9      	str	r1, [r7, #8]
 80029b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	6a1b      	ldr	r3, [r3, #32]
 80029b8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	6a1b      	ldr	r3, [r3, #32]
 80029be:	f023 0201 	bic.w	r2, r3, #1
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	699b      	ldr	r3, [r3, #24]
 80029ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80029cc:	693b      	ldr	r3, [r7, #16]
 80029ce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80029d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	011b      	lsls	r3, r3, #4
 80029d8:	693a      	ldr	r2, [r7, #16]
 80029da:	4313      	orrs	r3, r2
 80029dc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80029de:	697b      	ldr	r3, [r7, #20]
 80029e0:	f023 030a 	bic.w	r3, r3, #10
 80029e4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80029e6:	697a      	ldr	r2, [r7, #20]
 80029e8:	68bb      	ldr	r3, [r7, #8]
 80029ea:	4313      	orrs	r3, r2
 80029ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	693a      	ldr	r2, [r7, #16]
 80029f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	697a      	ldr	r2, [r7, #20]
 80029f8:	621a      	str	r2, [r3, #32]
}
 80029fa:	bf00      	nop
 80029fc:	371c      	adds	r7, #28
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bc80      	pop	{r7}
 8002a02:	4770      	bx	lr

08002a04 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002a04:	b480      	push	{r7}
 8002a06:	b087      	sub	sp, #28
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	60f8      	str	r0, [r7, #12]
 8002a0c:	60b9      	str	r1, [r7, #8]
 8002a0e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	6a1b      	ldr	r3, [r3, #32]
 8002a14:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	6a1b      	ldr	r3, [r3, #32]
 8002a1a:	f023 0210 	bic.w	r2, r3, #16
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	699b      	ldr	r3, [r3, #24]
 8002a26:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002a28:	693b      	ldr	r3, [r7, #16]
 8002a2a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002a2e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	031b      	lsls	r3, r3, #12
 8002a34:	693a      	ldr	r2, [r7, #16]
 8002a36:	4313      	orrs	r3, r2
 8002a38:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002a3a:	697b      	ldr	r3, [r7, #20]
 8002a3c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002a40:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002a42:	68bb      	ldr	r3, [r7, #8]
 8002a44:	011b      	lsls	r3, r3, #4
 8002a46:	697a      	ldr	r2, [r7, #20]
 8002a48:	4313      	orrs	r3, r2
 8002a4a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	693a      	ldr	r2, [r7, #16]
 8002a50:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	697a      	ldr	r2, [r7, #20]
 8002a56:	621a      	str	r2, [r3, #32]
}
 8002a58:	bf00      	nop
 8002a5a:	371c      	adds	r7, #28
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	bc80      	pop	{r7}
 8002a60:	4770      	bx	lr

08002a62 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002a62:	b480      	push	{r7}
 8002a64:	b085      	sub	sp, #20
 8002a66:	af00      	add	r7, sp, #0
 8002a68:	6078      	str	r0, [r7, #4]
 8002a6a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	689b      	ldr	r3, [r3, #8]
 8002a70:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a78:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002a7a:	683a      	ldr	r2, [r7, #0]
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	4313      	orrs	r3, r2
 8002a80:	f043 0307 	orr.w	r3, r3, #7
 8002a84:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	68fa      	ldr	r2, [r7, #12]
 8002a8a:	609a      	str	r2, [r3, #8]
}
 8002a8c:	bf00      	nop
 8002a8e:	3714      	adds	r7, #20
 8002a90:	46bd      	mov	sp, r7
 8002a92:	bc80      	pop	{r7}
 8002a94:	4770      	bx	lr

08002a96 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002a96:	b480      	push	{r7}
 8002a98:	b087      	sub	sp, #28
 8002a9a:	af00      	add	r7, sp, #0
 8002a9c:	60f8      	str	r0, [r7, #12]
 8002a9e:	60b9      	str	r1, [r7, #8]
 8002aa0:	607a      	str	r2, [r7, #4]
 8002aa2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	689b      	ldr	r3, [r3, #8]
 8002aa8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002aaa:	697b      	ldr	r3, [r7, #20]
 8002aac:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002ab0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	021a      	lsls	r2, r3, #8
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	431a      	orrs	r2, r3
 8002aba:	68bb      	ldr	r3, [r7, #8]
 8002abc:	4313      	orrs	r3, r2
 8002abe:	697a      	ldr	r2, [r7, #20]
 8002ac0:	4313      	orrs	r3, r2
 8002ac2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	697a      	ldr	r2, [r7, #20]
 8002ac8:	609a      	str	r2, [r3, #8]
}
 8002aca:	bf00      	nop
 8002acc:	371c      	adds	r7, #28
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bc80      	pop	{r7}
 8002ad2:	4770      	bx	lr

08002ad4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	b085      	sub	sp, #20
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
 8002adc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ae4:	2b01      	cmp	r3, #1
 8002ae6:	d101      	bne.n	8002aec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002ae8:	2302      	movs	r3, #2
 8002aea:	e041      	b.n	8002b70 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2201      	movs	r2, #1
 8002af0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2202      	movs	r2, #2
 8002af8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	689b      	ldr	r3, [r3, #8]
 8002b0a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b12:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	68fa      	ldr	r2, [r7, #12]
 8002b1a:	4313      	orrs	r3, r2
 8002b1c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	68fa      	ldr	r2, [r7, #12]
 8002b24:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4a14      	ldr	r2, [pc, #80]	; (8002b7c <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002b2c:	4293      	cmp	r3, r2
 8002b2e:	d009      	beq.n	8002b44 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b38:	d004      	beq.n	8002b44 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4a10      	ldr	r2, [pc, #64]	; (8002b80 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002b40:	4293      	cmp	r3, r2
 8002b42:	d10c      	bne.n	8002b5e <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002b44:	68bb      	ldr	r3, [r7, #8]
 8002b46:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002b4a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	68ba      	ldr	r2, [r7, #8]
 8002b52:	4313      	orrs	r3, r2
 8002b54:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	68ba      	ldr	r2, [r7, #8]
 8002b5c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	2201      	movs	r2, #1
 8002b62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2200      	movs	r2, #0
 8002b6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002b6e:	2300      	movs	r3, #0
}
 8002b70:	4618      	mov	r0, r3
 8002b72:	3714      	adds	r7, #20
 8002b74:	46bd      	mov	sp, r7
 8002b76:	bc80      	pop	{r7}
 8002b78:	4770      	bx	lr
 8002b7a:	bf00      	nop
 8002b7c:	40012c00 	.word	0x40012c00
 8002b80:	40000400 	.word	0x40000400

08002b84 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002b84:	b480      	push	{r7}
 8002b86:	b083      	sub	sp, #12
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002b8c:	bf00      	nop
 8002b8e:	370c      	adds	r7, #12
 8002b90:	46bd      	mov	sp, r7
 8002b92:	bc80      	pop	{r7}
 8002b94:	4770      	bx	lr

08002b96 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002b96:	b480      	push	{r7}
 8002b98:	b083      	sub	sp, #12
 8002b9a:	af00      	add	r7, sp, #0
 8002b9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002b9e:	bf00      	nop
 8002ba0:	370c      	adds	r7, #12
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	bc80      	pop	{r7}
 8002ba6:	4770      	bx	lr

08002ba8 <__libc_init_array>:
 8002ba8:	b570      	push	{r4, r5, r6, lr}
 8002baa:	2600      	movs	r6, #0
 8002bac:	4d0c      	ldr	r5, [pc, #48]	; (8002be0 <__libc_init_array+0x38>)
 8002bae:	4c0d      	ldr	r4, [pc, #52]	; (8002be4 <__libc_init_array+0x3c>)
 8002bb0:	1b64      	subs	r4, r4, r5
 8002bb2:	10a4      	asrs	r4, r4, #2
 8002bb4:	42a6      	cmp	r6, r4
 8002bb6:	d109      	bne.n	8002bcc <__libc_init_array+0x24>
 8002bb8:	f000 f822 	bl	8002c00 <_init>
 8002bbc:	2600      	movs	r6, #0
 8002bbe:	4d0a      	ldr	r5, [pc, #40]	; (8002be8 <__libc_init_array+0x40>)
 8002bc0:	4c0a      	ldr	r4, [pc, #40]	; (8002bec <__libc_init_array+0x44>)
 8002bc2:	1b64      	subs	r4, r4, r5
 8002bc4:	10a4      	asrs	r4, r4, #2
 8002bc6:	42a6      	cmp	r6, r4
 8002bc8:	d105      	bne.n	8002bd6 <__libc_init_array+0x2e>
 8002bca:	bd70      	pop	{r4, r5, r6, pc}
 8002bcc:	f855 3b04 	ldr.w	r3, [r5], #4
 8002bd0:	4798      	blx	r3
 8002bd2:	3601      	adds	r6, #1
 8002bd4:	e7ee      	b.n	8002bb4 <__libc_init_array+0xc>
 8002bd6:	f855 3b04 	ldr.w	r3, [r5], #4
 8002bda:	4798      	blx	r3
 8002bdc:	3601      	adds	r6, #1
 8002bde:	e7f2      	b.n	8002bc6 <__libc_init_array+0x1e>
 8002be0:	08002c44 	.word	0x08002c44
 8002be4:	08002c44 	.word	0x08002c44
 8002be8:	08002c44 	.word	0x08002c44
 8002bec:	08002c48 	.word	0x08002c48

08002bf0 <memset>:
 8002bf0:	4603      	mov	r3, r0
 8002bf2:	4402      	add	r2, r0
 8002bf4:	4293      	cmp	r3, r2
 8002bf6:	d100      	bne.n	8002bfa <memset+0xa>
 8002bf8:	4770      	bx	lr
 8002bfa:	f803 1b01 	strb.w	r1, [r3], #1
 8002bfe:	e7f9      	b.n	8002bf4 <memset+0x4>

08002c00 <_init>:
 8002c00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c02:	bf00      	nop
 8002c04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c06:	bc08      	pop	{r3}
 8002c08:	469e      	mov	lr, r3
 8002c0a:	4770      	bx	lr

08002c0c <_fini>:
 8002c0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c0e:	bf00      	nop
 8002c10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c12:	bc08      	pop	{r3}
 8002c14:	469e      	mov	lr, r3
 8002c16:	4770      	bx	lr
