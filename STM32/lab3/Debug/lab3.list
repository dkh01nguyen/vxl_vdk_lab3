
lab3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000252c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08002638  08002638  00012638  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002664  08002664  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08002664  08002664  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002664  08002664  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002664  08002664  00012664  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002668  08002668  00012668  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800266c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000012c  20000074  080026e0  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001a0  080026e0  000201a0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009ad7  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c33  00000000  00000000  00029b74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a58  00000000  00000000  0002b7a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000948  00000000  00000000  0002c200  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016b22  00000000  00000000  0002cb48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b322  00000000  00000000  0004366a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008247f  00000000  00000000  0004e98c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d0e0b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000028b8  00000000  00000000  000d0e60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000074 	.word	0x20000074
 8000128:	00000000 	.word	0x00000000
 800012c:	08002620 	.word	0x08002620

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000078 	.word	0x20000078
 8000148:	08002620 	.word	0x08002620

0800014c <isButtonPressed>:
int normal_flag[NUM_OF_BUTTONS] = {0};
int long_flag[NUM_OF_BUTTONS] = {0};

int TimeOutForKeyPress[NUM_OF_BUTTONS] = {0};

int isButtonPressed(int index){
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	if (normal_flag[index] == 1){
 8000154:	4a09      	ldr	r2, [pc, #36]	; (800017c <isButtonPressed+0x30>)
 8000156:	687b      	ldr	r3, [r7, #4]
 8000158:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800015c:	2b01      	cmp	r3, #1
 800015e:	d106      	bne.n	800016e <isButtonPressed+0x22>
		normal_flag[index] = 0;
 8000160:	4a06      	ldr	r2, [pc, #24]	; (800017c <isButtonPressed+0x30>)
 8000162:	687b      	ldr	r3, [r7, #4]
 8000164:	2100      	movs	r1, #0
 8000166:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 800016a:	2301      	movs	r3, #1
 800016c:	e000      	b.n	8000170 <isButtonPressed+0x24>
	}
	return 0;
 800016e:	2300      	movs	r3, #0
}
 8000170:	4618      	mov	r0, r3
 8000172:	370c      	adds	r7, #12
 8000174:	46bd      	mov	sp, r7
 8000176:	bc80      	pop	{r7}
 8000178:	4770      	bx	lr
 800017a:	bf00      	nop
 800017c:	20000090 	.word	0x20000090

08000180 <subKeyProcess>:

void subKeyProcess(int index){
 8000180:	b480      	push	{r7}
 8000182:	b083      	sub	sp, #12
 8000184:	af00      	add	r7, sp, #0
 8000186:	6078      	str	r0, [r7, #4]
	normal_flag[index] = 1;
 8000188:	4a04      	ldr	r2, [pc, #16]	; (800019c <subKeyProcess+0x1c>)
 800018a:	687b      	ldr	r3, [r7, #4]
 800018c:	2101      	movs	r1, #1
 800018e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8000192:	bf00      	nop
 8000194:	370c      	adds	r7, #12
 8000196:	46bd      	mov	sp, r7
 8000198:	bc80      	pop	{r7}
 800019a:	4770      	bx	lr
 800019c:	20000090 	.word	0x20000090

080001a0 <getKeyInput>:

void getKeyInput() {
 80001a0:	b580      	push	{r7, lr}
 80001a2:	b082      	sub	sp, #8
 80001a4:	af00      	add	r7, sp, #0
	for (int i = 0; i < NUM_OF_BUTTONS; i++) {
 80001a6:	2300      	movs	r3, #0
 80001a8:	607b      	str	r3, [r7, #4]
 80001aa:	e0a6      	b.n	80002fa <getKeyInput+0x15a>
		KeyReg0[i] = KeyReg1[i];
 80001ac:	4a57      	ldr	r2, [pc, #348]	; (800030c <getKeyInput+0x16c>)
 80001ae:	687b      	ldr	r3, [r7, #4]
 80001b0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001b4:	4956      	ldr	r1, [pc, #344]	; (8000310 <getKeyInput+0x170>)
 80001b6:	687b      	ldr	r3, [r7, #4]
 80001b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		KeyReg1[i] = KeyReg2[i];
 80001bc:	4a55      	ldr	r2, [pc, #340]	; (8000314 <getKeyInput+0x174>)
 80001be:	687b      	ldr	r3, [r7, #4]
 80001c0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001c4:	4951      	ldr	r1, [pc, #324]	; (800030c <getKeyInput+0x16c>)
 80001c6:	687b      	ldr	r3, [r7, #4]
 80001c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		// Read signals from buttons
		if (i == 0) {
 80001cc:	687b      	ldr	r3, [r7, #4]
 80001ce:	2b00      	cmp	r3, #0
 80001d0:	d10a      	bne.n	80001e8 <getKeyInput+0x48>
			KeyReg2[i] = HAL_GPIO_ReadPin(BTN1_GPIO_Port, BTN1_Pin);
 80001d2:	2108      	movs	r1, #8
 80001d4:	4850      	ldr	r0, [pc, #320]	; (8000318 <getKeyInput+0x178>)
 80001d6:	f001 f9b5 	bl	8001544 <HAL_GPIO_ReadPin>
 80001da:	4603      	mov	r3, r0
 80001dc:	4619      	mov	r1, r3
 80001de:	4a4d      	ldr	r2, [pc, #308]	; (8000314 <getKeyInput+0x174>)
 80001e0:	687b      	ldr	r3, [r7, #4]
 80001e2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 80001e6:	e01a      	b.n	800021e <getKeyInput+0x7e>
		}
		else if (i == 1) {
 80001e8:	687b      	ldr	r3, [r7, #4]
 80001ea:	2b01      	cmp	r3, #1
 80001ec:	d10a      	bne.n	8000204 <getKeyInput+0x64>
			KeyReg2[i] = HAL_GPIO_ReadPin(BTN2_GPIO_Port, BTN2_Pin);
 80001ee:	2110      	movs	r1, #16
 80001f0:	4849      	ldr	r0, [pc, #292]	; (8000318 <getKeyInput+0x178>)
 80001f2:	f001 f9a7 	bl	8001544 <HAL_GPIO_ReadPin>
 80001f6:	4603      	mov	r3, r0
 80001f8:	4619      	mov	r1, r3
 80001fa:	4a46      	ldr	r2, [pc, #280]	; (8000314 <getKeyInput+0x174>)
 80001fc:	687b      	ldr	r3, [r7, #4]
 80001fe:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000202:	e00c      	b.n	800021e <getKeyInput+0x7e>
		}
		else if (i == 2) {
 8000204:	687b      	ldr	r3, [r7, #4]
 8000206:	2b02      	cmp	r3, #2
 8000208:	d109      	bne.n	800021e <getKeyInput+0x7e>
			KeyReg2[i] = HAL_GPIO_ReadPin(BTN3_GPIO_Port, BTN3_Pin);
 800020a:	2120      	movs	r1, #32
 800020c:	4842      	ldr	r0, [pc, #264]	; (8000318 <getKeyInput+0x178>)
 800020e:	f001 f999 	bl	8001544 <HAL_GPIO_ReadPin>
 8000212:	4603      	mov	r3, r0
 8000214:	4619      	mov	r1, r3
 8000216:	4a3f      	ldr	r2, [pc, #252]	; (8000314 <getKeyInput+0x174>)
 8000218:	687b      	ldr	r3, [r7, #4]
 800021a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		}

		if ((KeyReg1[i] == KeyReg0[i]) && (KeyReg1[i] == KeyReg2[i])){
 800021e:	4a3b      	ldr	r2, [pc, #236]	; (800030c <getKeyInput+0x16c>)
 8000220:	687b      	ldr	r3, [r7, #4]
 8000222:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000226:	493a      	ldr	r1, [pc, #232]	; (8000310 <getKeyInput+0x170>)
 8000228:	687b      	ldr	r3, [r7, #4]
 800022a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800022e:	429a      	cmp	r2, r3
 8000230:	d159      	bne.n	80002e6 <getKeyInput+0x146>
 8000232:	4a36      	ldr	r2, [pc, #216]	; (800030c <getKeyInput+0x16c>)
 8000234:	687b      	ldr	r3, [r7, #4]
 8000236:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800023a:	4936      	ldr	r1, [pc, #216]	; (8000314 <getKeyInput+0x174>)
 800023c:	687b      	ldr	r3, [r7, #4]
 800023e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000242:	429a      	cmp	r2, r3
 8000244:	d14f      	bne.n	80002e6 <getKeyInput+0x146>
			if (KeyReg3[i] != KeyReg2[i]){
 8000246:	4a35      	ldr	r2, [pc, #212]	; (800031c <getKeyInput+0x17c>)
 8000248:	687b      	ldr	r3, [r7, #4]
 800024a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800024e:	4931      	ldr	r1, [pc, #196]	; (8000314 <getKeyInput+0x174>)
 8000250:	687b      	ldr	r3, [r7, #4]
 8000252:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000256:	429a      	cmp	r2, r3
 8000258:	d02b      	beq.n	80002b2 <getKeyInput+0x112>
				KeyReg3[i] = KeyReg2[i];
 800025a:	4a2e      	ldr	r2, [pc, #184]	; (8000314 <getKeyInput+0x174>)
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000262:	492e      	ldr	r1, [pc, #184]	; (800031c <getKeyInput+0x17c>)
 8000264:	687b      	ldr	r3, [r7, #4]
 8000266:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if (KeyReg2[i] == PRESSED_STATE){
 800026a:	4a2a      	ldr	r2, [pc, #168]	; (8000314 <getKeyInput+0x174>)
 800026c:	687b      	ldr	r3, [r7, #4]
 800026e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000272:	2b00      	cmp	r3, #0
 8000274:	d13d      	bne.n	80002f2 <getKeyInput+0x152>
					subKeyProcess(i);	// Set timer_flag[i] = 1;
 8000276:	6878      	ldr	r0, [r7, #4]
 8000278:	f7ff ff82 	bl	8000180 <subKeyProcess>
					if (long_flag[i] == 0) {
 800027c:	4a28      	ldr	r2, [pc, #160]	; (8000320 <getKeyInput+0x180>)
 800027e:	687b      	ldr	r3, [r7, #4]
 8000280:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000284:	2b00      	cmp	r3, #0
 8000286:	d10a      	bne.n	800029e <getKeyInput+0xfe>
						TimeOutForKeyPress[i] = 2000 / TIME_CYCLE;
 8000288:	4b26      	ldr	r3, [pc, #152]	; (8000324 <getKeyInput+0x184>)
 800028a:	681b      	ldr	r3, [r3, #0]
 800028c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000290:	fb92 f2f3 	sdiv	r2, r2, r3
 8000294:	4924      	ldr	r1, [pc, #144]	; (8000328 <getKeyInput+0x188>)
 8000296:	687b      	ldr	r3, [r7, #4]
 8000298:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if (KeyReg3[i] != KeyReg2[i]){
 800029c:	e029      	b.n	80002f2 <getKeyInput+0x152>
					}
					else {
						TimeOutForKeyPress[i] = 250 / TIME_CYCLE;
 800029e:	4b21      	ldr	r3, [pc, #132]	; (8000324 <getKeyInput+0x184>)
 80002a0:	681b      	ldr	r3, [r3, #0]
 80002a2:	22fa      	movs	r2, #250	; 0xfa
 80002a4:	fb92 f2f3 	sdiv	r2, r2, r3
 80002a8:	491f      	ldr	r1, [pc, #124]	; (8000328 <getKeyInput+0x188>)
 80002aa:	687b      	ldr	r3, [r7, #4]
 80002ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if (KeyReg3[i] != KeyReg2[i]){
 80002b0:	e01f      	b.n	80002f2 <getKeyInput+0x152>
					}
				}
			} else {
				TimeOutForKeyPress[i]--;
 80002b2:	4a1d      	ldr	r2, [pc, #116]	; (8000328 <getKeyInput+0x188>)
 80002b4:	687b      	ldr	r3, [r7, #4]
 80002b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002ba:	1e5a      	subs	r2, r3, #1
 80002bc:	491a      	ldr	r1, [pc, #104]	; (8000328 <getKeyInput+0x188>)
 80002be:	687b      	ldr	r3, [r7, #4]
 80002c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if (TimeOutForKeyPress[i] == 0){
 80002c4:	4a18      	ldr	r2, [pc, #96]	; (8000328 <getKeyInput+0x188>)
 80002c6:	687b      	ldr	r3, [r7, #4]
 80002c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d110      	bne.n	80002f2 <getKeyInput+0x152>
					KeyReg3[i] = NORMAL_STATE;
 80002d0:	4a12      	ldr	r2, [pc, #72]	; (800031c <getKeyInput+0x17c>)
 80002d2:	687b      	ldr	r3, [r7, #4]
 80002d4:	2101      	movs	r1, #1
 80002d6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					long_flag[i] = 1;
 80002da:	4a11      	ldr	r2, [pc, #68]	; (8000320 <getKeyInput+0x180>)
 80002dc:	687b      	ldr	r3, [r7, #4]
 80002de:	2101      	movs	r1, #1
 80002e0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			if (KeyReg3[i] != KeyReg2[i]){
 80002e4:	e005      	b.n	80002f2 <getKeyInput+0x152>
				}
			}
		}
		else {
			long_flag[i] = 0;
 80002e6:	4a0e      	ldr	r2, [pc, #56]	; (8000320 <getKeyInput+0x180>)
 80002e8:	687b      	ldr	r3, [r7, #4]
 80002ea:	2100      	movs	r1, #0
 80002ec:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 80002f0:	e000      	b.n	80002f4 <getKeyInput+0x154>
			if (KeyReg3[i] != KeyReg2[i]){
 80002f2:	bf00      	nop
	for (int i = 0; i < NUM_OF_BUTTONS; i++) {
 80002f4:	687b      	ldr	r3, [r7, #4]
 80002f6:	3301      	adds	r3, #1
 80002f8:	607b      	str	r3, [r7, #4]
 80002fa:	687b      	ldr	r3, [r7, #4]
 80002fc:	2b02      	cmp	r3, #2
 80002fe:	f77f af55 	ble.w	80001ac <getKeyInput+0xc>
		}
	}
}
 8000302:	bf00      	nop
 8000304:	bf00      	nop
 8000306:	3708      	adds	r7, #8
 8000308:	46bd      	mov	sp, r7
 800030a:	bd80      	pop	{r7, pc}
 800030c:	20000010 	.word	0x20000010
 8000310:	20000004 	.word	0x20000004
 8000314:	2000001c 	.word	0x2000001c
 8000318:	40010800 	.word	0x40010800
 800031c:	20000028 	.word	0x20000028
 8000320:	2000009c 	.word	0x2000009c
 8000324:	20000000 	.word	0x20000000
 8000328:	200000a8 	.word	0x200000a8

0800032c <display7seg_landscape>:
    0b0010000 // 9
};


//SEG for landscape LED
void display7seg_landscape(int num){
 800032c:	b580      	push	{r7, lr}
 800032e:	b084      	sub	sp, #16
 8000330:	af00      	add	r7, sp, #0
 8000332:	6078      	str	r0, [r7, #4]
	for (int i=0; i < 7; i++){
 8000334:	2300      	movs	r3, #0
 8000336:	60fb      	str	r3, [r7, #12]
 8000338:	e017      	b.n	800036a <display7seg_landscape+0x3e>
		HAL_GPIO_WritePin(GPIOB, SEG0_Pin<<i, (table[num]>>i) & 1);
 800033a:	2201      	movs	r2, #1
 800033c:	68fb      	ldr	r3, [r7, #12]
 800033e:	fa02 f303 	lsl.w	r3, r2, r3
 8000342:	b299      	uxth	r1, r3
 8000344:	4a0d      	ldr	r2, [pc, #52]	; (800037c <display7seg_landscape+0x50>)
 8000346:	687b      	ldr	r3, [r7, #4]
 8000348:	4413      	add	r3, r2
 800034a:	781b      	ldrb	r3, [r3, #0]
 800034c:	461a      	mov	r2, r3
 800034e:	68fb      	ldr	r3, [r7, #12]
 8000350:	fa42 f303 	asr.w	r3, r2, r3
 8000354:	b2db      	uxtb	r3, r3
 8000356:	f003 0301 	and.w	r3, r3, #1
 800035a:	b2db      	uxtb	r3, r3
 800035c:	461a      	mov	r2, r3
 800035e:	4808      	ldr	r0, [pc, #32]	; (8000380 <display7seg_landscape+0x54>)
 8000360:	f001 f907 	bl	8001572 <HAL_GPIO_WritePin>
	for (int i=0; i < 7; i++){
 8000364:	68fb      	ldr	r3, [r7, #12]
 8000366:	3301      	adds	r3, #1
 8000368:	60fb      	str	r3, [r7, #12]
 800036a:	68fb      	ldr	r3, [r7, #12]
 800036c:	2b06      	cmp	r3, #6
 800036e:	dde4      	ble.n	800033a <display7seg_landscape+0xe>
	}
}
 8000370:	bf00      	nop
 8000372:	bf00      	nop
 8000374:	3710      	adds	r7, #16
 8000376:	46bd      	mov	sp, r7
 8000378:	bd80      	pop	{r7, pc}
 800037a:	bf00      	nop
 800037c:	20000034 	.word	0x20000034
 8000380:	40010c00 	.word	0x40010c00

08000384 <display7seg_portrait>:

//A0 -> F0 for portrait LED
void display7seg_portrait(int num){
 8000384:	b580      	push	{r7, lr}
 8000386:	b084      	sub	sp, #16
 8000388:	af00      	add	r7, sp, #0
 800038a:	6078      	str	r0, [r7, #4]
	for (int i=0; i < 7; i++){
 800038c:	2300      	movs	r3, #0
 800038e:	60fb      	str	r3, [r7, #12]
 8000390:	e017      	b.n	80003c2 <display7seg_portrait+0x3e>
		HAL_GPIO_WritePin(GPIOB, A0_Pin<<i, (table[num]>>i) & 1);
 8000392:	2280      	movs	r2, #128	; 0x80
 8000394:	68fb      	ldr	r3, [r7, #12]
 8000396:	fa02 f303 	lsl.w	r3, r2, r3
 800039a:	b299      	uxth	r1, r3
 800039c:	4a0d      	ldr	r2, [pc, #52]	; (80003d4 <display7seg_portrait+0x50>)
 800039e:	687b      	ldr	r3, [r7, #4]
 80003a0:	4413      	add	r3, r2
 80003a2:	781b      	ldrb	r3, [r3, #0]
 80003a4:	461a      	mov	r2, r3
 80003a6:	68fb      	ldr	r3, [r7, #12]
 80003a8:	fa42 f303 	asr.w	r3, r2, r3
 80003ac:	b2db      	uxtb	r3, r3
 80003ae:	f003 0301 	and.w	r3, r3, #1
 80003b2:	b2db      	uxtb	r3, r3
 80003b4:	461a      	mov	r2, r3
 80003b6:	4808      	ldr	r0, [pc, #32]	; (80003d8 <display7seg_portrait+0x54>)
 80003b8:	f001 f8db 	bl	8001572 <HAL_GPIO_WritePin>
	for (int i=0; i < 7; i++){
 80003bc:	68fb      	ldr	r3, [r7, #12]
 80003be:	3301      	adds	r3, #1
 80003c0:	60fb      	str	r3, [r7, #12]
 80003c2:	68fb      	ldr	r3, [r7, #12]
 80003c4:	2b06      	cmp	r3, #6
 80003c6:	dde4      	ble.n	8000392 <display7seg_portrait+0xe>
	}
}
 80003c8:	bf00      	nop
 80003ca:	bf00      	nop
 80003cc:	3710      	adds	r7, #16
 80003ce:	46bd      	mov	sp, r7
 80003d0:	bd80      	pop	{r7, pc}
 80003d2:	bf00      	nop
 80003d4:	20000034 	.word	0x20000034
 80003d8:	40010c00 	.word	0x40010c00

080003dc <update7SEGLandscape>:
int index_ledlc = 0;
int index_ledpt = 2;
int led_buffer[4] = {1, 2, 3, 4};

//led_buffer is used 0 - 1 for landscape, 2 - 3 for portrait LED
void update7SEGLandscape(int index){
 80003dc:	b580      	push	{r7, lr}
 80003de:	b082      	sub	sp, #8
 80003e0:	af00      	add	r7, sp, #0
 80003e2:	6078      	str	r0, [r7, #4]
	display7seg_landscape(led_buffer[index]);
 80003e4:	4a16      	ldr	r2, [pc, #88]	; (8000440 <update7SEGLandscape+0x64>)
 80003e6:	687b      	ldr	r3, [r7, #4]
 80003e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80003ec:	4618      	mov	r0, r3
 80003ee:	f7ff ff9d 	bl	800032c <display7seg_landscape>
	switch(index){
 80003f2:	687b      	ldr	r3, [r7, #4]
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	d003      	beq.n	8000400 <update7SEGLandscape+0x24>
 80003f8:	687b      	ldr	r3, [r7, #4]
 80003fa:	2b01      	cmp	r3, #1
 80003fc:	d00e      	beq.n	800041c <update7SEGLandscape+0x40>
			index_ledlc = 0;
			HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, SET);
			HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, RESET);
			break;
		default:
			break;
 80003fe:	e01b      	b.n	8000438 <update7SEGLandscape+0x5c>
			index_ledlc = 1;
 8000400:	4b10      	ldr	r3, [pc, #64]	; (8000444 <update7SEGLandscape+0x68>)
 8000402:	2201      	movs	r2, #1
 8000404:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, RESET);
 8000406:	2200      	movs	r2, #0
 8000408:	2140      	movs	r1, #64	; 0x40
 800040a:	480f      	ldr	r0, [pc, #60]	; (8000448 <update7SEGLandscape+0x6c>)
 800040c:	f001 f8b1 	bl	8001572 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, SET);
 8000410:	2201      	movs	r2, #1
 8000412:	2180      	movs	r1, #128	; 0x80
 8000414:	480c      	ldr	r0, [pc, #48]	; (8000448 <update7SEGLandscape+0x6c>)
 8000416:	f001 f8ac 	bl	8001572 <HAL_GPIO_WritePin>
			break;
 800041a:	e00d      	b.n	8000438 <update7SEGLandscape+0x5c>
			index_ledlc = 0;
 800041c:	4b09      	ldr	r3, [pc, #36]	; (8000444 <update7SEGLandscape+0x68>)
 800041e:	2200      	movs	r2, #0
 8000420:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, SET);
 8000422:	2201      	movs	r2, #1
 8000424:	2140      	movs	r1, #64	; 0x40
 8000426:	4808      	ldr	r0, [pc, #32]	; (8000448 <update7SEGLandscape+0x6c>)
 8000428:	f001 f8a3 	bl	8001572 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, RESET);
 800042c:	2200      	movs	r2, #0
 800042e:	2180      	movs	r1, #128	; 0x80
 8000430:	4805      	ldr	r0, [pc, #20]	; (8000448 <update7SEGLandscape+0x6c>)
 8000432:	f001 f89e 	bl	8001572 <HAL_GPIO_WritePin>
			break;
 8000436:	bf00      	nop
	}
}
 8000438:	bf00      	nop
 800043a:	3708      	adds	r7, #8
 800043c:	46bd      	mov	sp, r7
 800043e:	bd80      	pop	{r7, pc}
 8000440:	20000044 	.word	0x20000044
 8000444:	200000b4 	.word	0x200000b4
 8000448:	40010800 	.word	0x40010800

0800044c <update7SEGPortrait>:

void update7SEGPortrait(int index){
 800044c:	b580      	push	{r7, lr}
 800044e:	b082      	sub	sp, #8
 8000450:	af00      	add	r7, sp, #0
 8000452:	6078      	str	r0, [r7, #4]
	display7seg_portrait(led_buffer[index]);
 8000454:	4a18      	ldr	r2, [pc, #96]	; (80004b8 <update7SEGPortrait+0x6c>)
 8000456:	687b      	ldr	r3, [r7, #4]
 8000458:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800045c:	4618      	mov	r0, r3
 800045e:	f7ff ff91 	bl	8000384 <display7seg_portrait>
	switch(index){
 8000462:	687b      	ldr	r3, [r7, #4]
 8000464:	2b02      	cmp	r3, #2
 8000466:	d003      	beq.n	8000470 <update7SEGPortrait+0x24>
 8000468:	687b      	ldr	r3, [r7, #4]
 800046a:	2b03      	cmp	r3, #3
 800046c:	d010      	beq.n	8000490 <update7SEGPortrait+0x44>
			index_ledpt = 2;
			HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, SET);
			HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, RESET);
			break;
		default:
			break;
 800046e:	e01f      	b.n	80004b0 <update7SEGPortrait+0x64>
			index_ledpt = 3;
 8000470:	4b12      	ldr	r3, [pc, #72]	; (80004bc <update7SEGPortrait+0x70>)
 8000472:	2203      	movs	r2, #3
 8000474:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, RESET);
 8000476:	2200      	movs	r2, #0
 8000478:	f44f 7180 	mov.w	r1, #256	; 0x100
 800047c:	4810      	ldr	r0, [pc, #64]	; (80004c0 <update7SEGPortrait+0x74>)
 800047e:	f001 f878 	bl	8001572 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, SET);
 8000482:	2201      	movs	r2, #1
 8000484:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000488:	480d      	ldr	r0, [pc, #52]	; (80004c0 <update7SEGPortrait+0x74>)
 800048a:	f001 f872 	bl	8001572 <HAL_GPIO_WritePin>
			break;
 800048e:	e00f      	b.n	80004b0 <update7SEGPortrait+0x64>
			index_ledpt = 2;
 8000490:	4b0a      	ldr	r3, [pc, #40]	; (80004bc <update7SEGPortrait+0x70>)
 8000492:	2202      	movs	r2, #2
 8000494:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, SET);
 8000496:	2201      	movs	r2, #1
 8000498:	f44f 7180 	mov.w	r1, #256	; 0x100
 800049c:	4808      	ldr	r0, [pc, #32]	; (80004c0 <update7SEGPortrait+0x74>)
 800049e:	f001 f868 	bl	8001572 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, RESET);
 80004a2:	2200      	movs	r2, #0
 80004a4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80004a8:	4805      	ldr	r0, [pc, #20]	; (80004c0 <update7SEGPortrait+0x74>)
 80004aa:	f001 f862 	bl	8001572 <HAL_GPIO_WritePin>
			break;
 80004ae:	bf00      	nop
	}
}
 80004b0:	bf00      	nop
 80004b2:	3708      	adds	r7, #8
 80004b4:	46bd      	mov	sp, r7
 80004b6:	bd80      	pop	{r7, pc}
 80004b8:	20000044 	.word	0x20000044
 80004bc:	20000040 	.word	0x20000040
 80004c0:	40010800 	.word	0x40010800

080004c4 <updateLedBufferMode1>:

int counter1 = 1, counter2 = 1;
void updateLedBufferMode1(){
 80004c4:	b480      	push	{r7}
 80004c6:	af00      	add	r7, sp, #0
	// 2 7-SEG LED Landscape
	/* Turn on RED-Landscape (count down from RED -> 0) */
	if (counter1 <= RED){
 80004c8:	4b9b      	ldr	r3, [pc, #620]	; (8000738 <updateLedBufferMode1+0x274>)
 80004ca:	681a      	ldr	r2, [r3, #0]
 80004cc:	4b9b      	ldr	r3, [pc, #620]	; (800073c <updateLedBufferMode1+0x278>)
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	429a      	cmp	r2, r3
 80004d2:	dc21      	bgt.n	8000518 <updateLedBufferMode1+0x54>
		led_buffer[0] = (RED - counter1 + 1) / 10;
 80004d4:	4b99      	ldr	r3, [pc, #612]	; (800073c <updateLedBufferMode1+0x278>)
 80004d6:	681a      	ldr	r2, [r3, #0]
 80004d8:	4b97      	ldr	r3, [pc, #604]	; (8000738 <updateLedBufferMode1+0x274>)
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	1ad3      	subs	r3, r2, r3
 80004de:	3301      	adds	r3, #1
 80004e0:	4a97      	ldr	r2, [pc, #604]	; (8000740 <updateLedBufferMode1+0x27c>)
 80004e2:	fb82 1203 	smull	r1, r2, r2, r3
 80004e6:	1092      	asrs	r2, r2, #2
 80004e8:	17db      	asrs	r3, r3, #31
 80004ea:	1ad3      	subs	r3, r2, r3
 80004ec:	4a95      	ldr	r2, [pc, #596]	; (8000744 <updateLedBufferMode1+0x280>)
 80004ee:	6013      	str	r3, [r2, #0]
		led_buffer[1] = (RED - counter1 + 1) % 10;
 80004f0:	4b92      	ldr	r3, [pc, #584]	; (800073c <updateLedBufferMode1+0x278>)
 80004f2:	681a      	ldr	r2, [r3, #0]
 80004f4:	4b90      	ldr	r3, [pc, #576]	; (8000738 <updateLedBufferMode1+0x274>)
 80004f6:	681b      	ldr	r3, [r3, #0]
 80004f8:	1ad3      	subs	r3, r2, r3
 80004fa:	1c59      	adds	r1, r3, #1
 80004fc:	4b90      	ldr	r3, [pc, #576]	; (8000740 <updateLedBufferMode1+0x27c>)
 80004fe:	fb83 2301 	smull	r2, r3, r3, r1
 8000502:	109a      	asrs	r2, r3, #2
 8000504:	17cb      	asrs	r3, r1, #31
 8000506:	1ad2      	subs	r2, r2, r3
 8000508:	4613      	mov	r3, r2
 800050a:	009b      	lsls	r3, r3, #2
 800050c:	4413      	add	r3, r2
 800050e:	005b      	lsls	r3, r3, #1
 8000510:	1aca      	subs	r2, r1, r3
 8000512:	4b8c      	ldr	r3, [pc, #560]	; (8000744 <updateLedBufferMode1+0x280>)
 8000514:	605a      	str	r2, [r3, #4]
 8000516:	e05d      	b.n	80005d4 <updateLedBufferMode1+0x110>
	}
	/* Turn on GREEN-Landscape (count down from GREEN -> 0) */
	else if (counter1 <= (RED + GREEN)){
 8000518:	4b88      	ldr	r3, [pc, #544]	; (800073c <updateLedBufferMode1+0x278>)
 800051a:	681a      	ldr	r2, [r3, #0]
 800051c:	4b8a      	ldr	r3, [pc, #552]	; (8000748 <updateLedBufferMode1+0x284>)
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	441a      	add	r2, r3
 8000522:	4b85      	ldr	r3, [pc, #532]	; (8000738 <updateLedBufferMode1+0x274>)
 8000524:	681b      	ldr	r3, [r3, #0]
 8000526:	429a      	cmp	r2, r3
 8000528:	db27      	blt.n	800057a <updateLedBufferMode1+0xb6>
		led_buffer[0] = (RED + GREEN - counter1 + 1) / 10;
 800052a:	4b84      	ldr	r3, [pc, #528]	; (800073c <updateLedBufferMode1+0x278>)
 800052c:	681a      	ldr	r2, [r3, #0]
 800052e:	4b86      	ldr	r3, [pc, #536]	; (8000748 <updateLedBufferMode1+0x284>)
 8000530:	681b      	ldr	r3, [r3, #0]
 8000532:	441a      	add	r2, r3
 8000534:	4b80      	ldr	r3, [pc, #512]	; (8000738 <updateLedBufferMode1+0x274>)
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	1ad3      	subs	r3, r2, r3
 800053a:	3301      	adds	r3, #1
 800053c:	4a80      	ldr	r2, [pc, #512]	; (8000740 <updateLedBufferMode1+0x27c>)
 800053e:	fb82 1203 	smull	r1, r2, r2, r3
 8000542:	1092      	asrs	r2, r2, #2
 8000544:	17db      	asrs	r3, r3, #31
 8000546:	1ad3      	subs	r3, r2, r3
 8000548:	4a7e      	ldr	r2, [pc, #504]	; (8000744 <updateLedBufferMode1+0x280>)
 800054a:	6013      	str	r3, [r2, #0]
		led_buffer[1] = (RED + GREEN - counter1 + 1) % 10;
 800054c:	4b7b      	ldr	r3, [pc, #492]	; (800073c <updateLedBufferMode1+0x278>)
 800054e:	681a      	ldr	r2, [r3, #0]
 8000550:	4b7d      	ldr	r3, [pc, #500]	; (8000748 <updateLedBufferMode1+0x284>)
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	441a      	add	r2, r3
 8000556:	4b78      	ldr	r3, [pc, #480]	; (8000738 <updateLedBufferMode1+0x274>)
 8000558:	681b      	ldr	r3, [r3, #0]
 800055a:	1ad3      	subs	r3, r2, r3
 800055c:	1c59      	adds	r1, r3, #1
 800055e:	4b78      	ldr	r3, [pc, #480]	; (8000740 <updateLedBufferMode1+0x27c>)
 8000560:	fb83 2301 	smull	r2, r3, r3, r1
 8000564:	109a      	asrs	r2, r3, #2
 8000566:	17cb      	asrs	r3, r1, #31
 8000568:	1ad2      	subs	r2, r2, r3
 800056a:	4613      	mov	r3, r2
 800056c:	009b      	lsls	r3, r3, #2
 800056e:	4413      	add	r3, r2
 8000570:	005b      	lsls	r3, r3, #1
 8000572:	1aca      	subs	r2, r1, r3
 8000574:	4b73      	ldr	r3, [pc, #460]	; (8000744 <updateLedBufferMode1+0x280>)
 8000576:	605a      	str	r2, [r3, #4]
 8000578:	e02c      	b.n	80005d4 <updateLedBufferMode1+0x110>
	}
	/* Turn on AMPER-Landscape (count down from AMPER -> 0) */
	else{
		led_buffer[0] = (RED + GREEN + AMBER - counter1 + 1) / 10;
 800057a:	4b70      	ldr	r3, [pc, #448]	; (800073c <updateLedBufferMode1+0x278>)
 800057c:	681a      	ldr	r2, [r3, #0]
 800057e:	4b72      	ldr	r3, [pc, #456]	; (8000748 <updateLedBufferMode1+0x284>)
 8000580:	681b      	ldr	r3, [r3, #0]
 8000582:	441a      	add	r2, r3
 8000584:	4b71      	ldr	r3, [pc, #452]	; (800074c <updateLedBufferMode1+0x288>)
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	441a      	add	r2, r3
 800058a:	4b6b      	ldr	r3, [pc, #428]	; (8000738 <updateLedBufferMode1+0x274>)
 800058c:	681b      	ldr	r3, [r3, #0]
 800058e:	1ad3      	subs	r3, r2, r3
 8000590:	3301      	adds	r3, #1
 8000592:	4a6b      	ldr	r2, [pc, #428]	; (8000740 <updateLedBufferMode1+0x27c>)
 8000594:	fb82 1203 	smull	r1, r2, r2, r3
 8000598:	1092      	asrs	r2, r2, #2
 800059a:	17db      	asrs	r3, r3, #31
 800059c:	1ad3      	subs	r3, r2, r3
 800059e:	4a69      	ldr	r2, [pc, #420]	; (8000744 <updateLedBufferMode1+0x280>)
 80005a0:	6013      	str	r3, [r2, #0]
		led_buffer[1] = (RED + GREEN + AMBER - counter1 + 1) % 10;
 80005a2:	4b66      	ldr	r3, [pc, #408]	; (800073c <updateLedBufferMode1+0x278>)
 80005a4:	681a      	ldr	r2, [r3, #0]
 80005a6:	4b68      	ldr	r3, [pc, #416]	; (8000748 <updateLedBufferMode1+0x284>)
 80005a8:	681b      	ldr	r3, [r3, #0]
 80005aa:	441a      	add	r2, r3
 80005ac:	4b67      	ldr	r3, [pc, #412]	; (800074c <updateLedBufferMode1+0x288>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	441a      	add	r2, r3
 80005b2:	4b61      	ldr	r3, [pc, #388]	; (8000738 <updateLedBufferMode1+0x274>)
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	1ad3      	subs	r3, r2, r3
 80005b8:	1c59      	adds	r1, r3, #1
 80005ba:	4b61      	ldr	r3, [pc, #388]	; (8000740 <updateLedBufferMode1+0x27c>)
 80005bc:	fb83 2301 	smull	r2, r3, r3, r1
 80005c0:	109a      	asrs	r2, r3, #2
 80005c2:	17cb      	asrs	r3, r1, #31
 80005c4:	1ad2      	subs	r2, r2, r3
 80005c6:	4613      	mov	r3, r2
 80005c8:	009b      	lsls	r3, r3, #2
 80005ca:	4413      	add	r3, r2
 80005cc:	005b      	lsls	r3, r3, #1
 80005ce:	1aca      	subs	r2, r1, r3
 80005d0:	4b5c      	ldr	r3, [pc, #368]	; (8000744 <updateLedBufferMode1+0x280>)
 80005d2:	605a      	str	r2, [r3, #4]
	}
	counter1++;
 80005d4:	4b58      	ldr	r3, [pc, #352]	; (8000738 <updateLedBufferMode1+0x274>)
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	3301      	adds	r3, #1
 80005da:	4a57      	ldr	r2, [pc, #348]	; (8000738 <updateLedBufferMode1+0x274>)
 80005dc:	6013      	str	r3, [r2, #0]
	/* Return to turn on RED-Landscape */
	if (counter1 > RED + AMBER + GREEN) counter1 = 1;
 80005de:	4b57      	ldr	r3, [pc, #348]	; (800073c <updateLedBufferMode1+0x278>)
 80005e0:	681a      	ldr	r2, [r3, #0]
 80005e2:	4b5a      	ldr	r3, [pc, #360]	; (800074c <updateLedBufferMode1+0x288>)
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	441a      	add	r2, r3
 80005e8:	4b57      	ldr	r3, [pc, #348]	; (8000748 <updateLedBufferMode1+0x284>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	441a      	add	r2, r3
 80005ee:	4b52      	ldr	r3, [pc, #328]	; (8000738 <updateLedBufferMode1+0x274>)
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	429a      	cmp	r2, r3
 80005f4:	da02      	bge.n	80005fc <updateLedBufferMode1+0x138>
 80005f6:	4b50      	ldr	r3, [pc, #320]	; (8000738 <updateLedBufferMode1+0x274>)
 80005f8:	2201      	movs	r2, #1
 80005fa:	601a      	str	r2, [r3, #0]


	// 2 7-SEG LED Portrait
	/* Turn on GREEN-Portrait (count down from GREEN -> 0) */
	if (counter2 <= GREEN){
 80005fc:	4b54      	ldr	r3, [pc, #336]	; (8000750 <updateLedBufferMode1+0x28c>)
 80005fe:	681a      	ldr	r2, [r3, #0]
 8000600:	4b51      	ldr	r3, [pc, #324]	; (8000748 <updateLedBufferMode1+0x284>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	429a      	cmp	r2, r3
 8000606:	dc21      	bgt.n	800064c <updateLedBufferMode1+0x188>
		led_buffer[2] = (GREEN - counter2 + 1) / 10;
 8000608:	4b4f      	ldr	r3, [pc, #316]	; (8000748 <updateLedBufferMode1+0x284>)
 800060a:	681a      	ldr	r2, [r3, #0]
 800060c:	4b50      	ldr	r3, [pc, #320]	; (8000750 <updateLedBufferMode1+0x28c>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	1ad3      	subs	r3, r2, r3
 8000612:	3301      	adds	r3, #1
 8000614:	4a4a      	ldr	r2, [pc, #296]	; (8000740 <updateLedBufferMode1+0x27c>)
 8000616:	fb82 1203 	smull	r1, r2, r2, r3
 800061a:	1092      	asrs	r2, r2, #2
 800061c:	17db      	asrs	r3, r3, #31
 800061e:	1ad3      	subs	r3, r2, r3
 8000620:	4a48      	ldr	r2, [pc, #288]	; (8000744 <updateLedBufferMode1+0x280>)
 8000622:	6093      	str	r3, [r2, #8]
		led_buffer[3] = (GREEN - counter2 + 1) % 10;
 8000624:	4b48      	ldr	r3, [pc, #288]	; (8000748 <updateLedBufferMode1+0x284>)
 8000626:	681a      	ldr	r2, [r3, #0]
 8000628:	4b49      	ldr	r3, [pc, #292]	; (8000750 <updateLedBufferMode1+0x28c>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	1ad3      	subs	r3, r2, r3
 800062e:	1c59      	adds	r1, r3, #1
 8000630:	4b43      	ldr	r3, [pc, #268]	; (8000740 <updateLedBufferMode1+0x27c>)
 8000632:	fb83 2301 	smull	r2, r3, r3, r1
 8000636:	109a      	asrs	r2, r3, #2
 8000638:	17cb      	asrs	r3, r1, #31
 800063a:	1ad2      	subs	r2, r2, r3
 800063c:	4613      	mov	r3, r2
 800063e:	009b      	lsls	r3, r3, #2
 8000640:	4413      	add	r3, r2
 8000642:	005b      	lsls	r3, r3, #1
 8000644:	1aca      	subs	r2, r1, r3
 8000646:	4b3f      	ldr	r3, [pc, #252]	; (8000744 <updateLedBufferMode1+0x280>)
 8000648:	60da      	str	r2, [r3, #12]
 800064a:	e05d      	b.n	8000708 <updateLedBufferMode1+0x244>
	}
	/* Turn on AMPER-Portrait (count down from AMPER -> 0) */
	else if (counter2 <= (AMBER + GREEN)){
 800064c:	4b3f      	ldr	r3, [pc, #252]	; (800074c <updateLedBufferMode1+0x288>)
 800064e:	681a      	ldr	r2, [r3, #0]
 8000650:	4b3d      	ldr	r3, [pc, #244]	; (8000748 <updateLedBufferMode1+0x284>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	441a      	add	r2, r3
 8000656:	4b3e      	ldr	r3, [pc, #248]	; (8000750 <updateLedBufferMode1+0x28c>)
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	429a      	cmp	r2, r3
 800065c:	db27      	blt.n	80006ae <updateLedBufferMode1+0x1ea>
		led_buffer[2] = (AMBER + GREEN - counter2 + 1) / 10;
 800065e:	4b3b      	ldr	r3, [pc, #236]	; (800074c <updateLedBufferMode1+0x288>)
 8000660:	681a      	ldr	r2, [r3, #0]
 8000662:	4b39      	ldr	r3, [pc, #228]	; (8000748 <updateLedBufferMode1+0x284>)
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	441a      	add	r2, r3
 8000668:	4b39      	ldr	r3, [pc, #228]	; (8000750 <updateLedBufferMode1+0x28c>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	1ad3      	subs	r3, r2, r3
 800066e:	3301      	adds	r3, #1
 8000670:	4a33      	ldr	r2, [pc, #204]	; (8000740 <updateLedBufferMode1+0x27c>)
 8000672:	fb82 1203 	smull	r1, r2, r2, r3
 8000676:	1092      	asrs	r2, r2, #2
 8000678:	17db      	asrs	r3, r3, #31
 800067a:	1ad3      	subs	r3, r2, r3
 800067c:	4a31      	ldr	r2, [pc, #196]	; (8000744 <updateLedBufferMode1+0x280>)
 800067e:	6093      	str	r3, [r2, #8]
		led_buffer[3] = (AMBER + GREEN - counter2 + 1) % 10;
 8000680:	4b32      	ldr	r3, [pc, #200]	; (800074c <updateLedBufferMode1+0x288>)
 8000682:	681a      	ldr	r2, [r3, #0]
 8000684:	4b30      	ldr	r3, [pc, #192]	; (8000748 <updateLedBufferMode1+0x284>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	441a      	add	r2, r3
 800068a:	4b31      	ldr	r3, [pc, #196]	; (8000750 <updateLedBufferMode1+0x28c>)
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	1ad3      	subs	r3, r2, r3
 8000690:	1c59      	adds	r1, r3, #1
 8000692:	4b2b      	ldr	r3, [pc, #172]	; (8000740 <updateLedBufferMode1+0x27c>)
 8000694:	fb83 2301 	smull	r2, r3, r3, r1
 8000698:	109a      	asrs	r2, r3, #2
 800069a:	17cb      	asrs	r3, r1, #31
 800069c:	1ad2      	subs	r2, r2, r3
 800069e:	4613      	mov	r3, r2
 80006a0:	009b      	lsls	r3, r3, #2
 80006a2:	4413      	add	r3, r2
 80006a4:	005b      	lsls	r3, r3, #1
 80006a6:	1aca      	subs	r2, r1, r3
 80006a8:	4b26      	ldr	r3, [pc, #152]	; (8000744 <updateLedBufferMode1+0x280>)
 80006aa:	60da      	str	r2, [r3, #12]
 80006ac:	e02c      	b.n	8000708 <updateLedBufferMode1+0x244>
	}
	/* Turn on RED-Portrait (count down from RED -> 0) */
	else {
		led_buffer[2] = (RED + GREEN + AMBER - counter2 + 1) / 10;
 80006ae:	4b23      	ldr	r3, [pc, #140]	; (800073c <updateLedBufferMode1+0x278>)
 80006b0:	681a      	ldr	r2, [r3, #0]
 80006b2:	4b25      	ldr	r3, [pc, #148]	; (8000748 <updateLedBufferMode1+0x284>)
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	441a      	add	r2, r3
 80006b8:	4b24      	ldr	r3, [pc, #144]	; (800074c <updateLedBufferMode1+0x288>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	441a      	add	r2, r3
 80006be:	4b24      	ldr	r3, [pc, #144]	; (8000750 <updateLedBufferMode1+0x28c>)
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	1ad3      	subs	r3, r2, r3
 80006c4:	3301      	adds	r3, #1
 80006c6:	4a1e      	ldr	r2, [pc, #120]	; (8000740 <updateLedBufferMode1+0x27c>)
 80006c8:	fb82 1203 	smull	r1, r2, r2, r3
 80006cc:	1092      	asrs	r2, r2, #2
 80006ce:	17db      	asrs	r3, r3, #31
 80006d0:	1ad3      	subs	r3, r2, r3
 80006d2:	4a1c      	ldr	r2, [pc, #112]	; (8000744 <updateLedBufferMode1+0x280>)
 80006d4:	6093      	str	r3, [r2, #8]
		led_buffer[3] = (RED + GREEN + AMBER - counter2 + 1) % 10;
 80006d6:	4b19      	ldr	r3, [pc, #100]	; (800073c <updateLedBufferMode1+0x278>)
 80006d8:	681a      	ldr	r2, [r3, #0]
 80006da:	4b1b      	ldr	r3, [pc, #108]	; (8000748 <updateLedBufferMode1+0x284>)
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	441a      	add	r2, r3
 80006e0:	4b1a      	ldr	r3, [pc, #104]	; (800074c <updateLedBufferMode1+0x288>)
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	441a      	add	r2, r3
 80006e6:	4b1a      	ldr	r3, [pc, #104]	; (8000750 <updateLedBufferMode1+0x28c>)
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	1ad3      	subs	r3, r2, r3
 80006ec:	1c59      	adds	r1, r3, #1
 80006ee:	4b14      	ldr	r3, [pc, #80]	; (8000740 <updateLedBufferMode1+0x27c>)
 80006f0:	fb83 2301 	smull	r2, r3, r3, r1
 80006f4:	109a      	asrs	r2, r3, #2
 80006f6:	17cb      	asrs	r3, r1, #31
 80006f8:	1ad2      	subs	r2, r2, r3
 80006fa:	4613      	mov	r3, r2
 80006fc:	009b      	lsls	r3, r3, #2
 80006fe:	4413      	add	r3, r2
 8000700:	005b      	lsls	r3, r3, #1
 8000702:	1aca      	subs	r2, r1, r3
 8000704:	4b0f      	ldr	r3, [pc, #60]	; (8000744 <updateLedBufferMode1+0x280>)
 8000706:	60da      	str	r2, [r3, #12]
	}
	counter2++;
 8000708:	4b11      	ldr	r3, [pc, #68]	; (8000750 <updateLedBufferMode1+0x28c>)
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	3301      	adds	r3, #1
 800070e:	4a10      	ldr	r2, [pc, #64]	; (8000750 <updateLedBufferMode1+0x28c>)
 8000710:	6013      	str	r3, [r2, #0]
	/* Return to turn on GREEN-Portrait */
	if (counter2 > RED + AMBER + GREEN) counter2 = 1;
 8000712:	4b0a      	ldr	r3, [pc, #40]	; (800073c <updateLedBufferMode1+0x278>)
 8000714:	681a      	ldr	r2, [r3, #0]
 8000716:	4b0d      	ldr	r3, [pc, #52]	; (800074c <updateLedBufferMode1+0x288>)
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	441a      	add	r2, r3
 800071c:	4b0a      	ldr	r3, [pc, #40]	; (8000748 <updateLedBufferMode1+0x284>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	441a      	add	r2, r3
 8000722:	4b0b      	ldr	r3, [pc, #44]	; (8000750 <updateLedBufferMode1+0x28c>)
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	429a      	cmp	r2, r3
 8000728:	da02      	bge.n	8000730 <updateLedBufferMode1+0x26c>
 800072a:	4b09      	ldr	r3, [pc, #36]	; (8000750 <updateLedBufferMode1+0x28c>)
 800072c:	2201      	movs	r2, #1
 800072e:	601a      	str	r2, [r3, #0]
}
 8000730:	bf00      	nop
 8000732:	46bd      	mov	sp, r7
 8000734:	bc80      	pop	{r7}
 8000736:	4770      	bx	lr
 8000738:	20000054 	.word	0x20000054
 800073c:	2000005c 	.word	0x2000005c
 8000740:	66666667 	.word	0x66666667
 8000744:	20000044 	.word	0x20000044
 8000748:	20000064 	.word	0x20000064
 800074c:	20000060 	.word	0x20000060
 8000750:	20000058 	.word	0x20000058

08000754 <fsm_traffic_light>:

#include "fsm_traffic_light.h"

int status = INIT;

void fsm_traffic_light(){
 8000754:	b580      	push	{r7, lr}
 8000756:	af00      	add	r7, sp, #0
	switch(status){
 8000758:	4bb3      	ldr	r3, [pc, #716]	; (8000a28 <fsm_traffic_light+0x2d4>)
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	2b0e      	cmp	r3, #14
 800075e:	f200 81b9 	bhi.w	8000ad4 <fsm_traffic_light+0x380>
 8000762:	a201      	add	r2, pc, #4	; (adr r2, 8000768 <fsm_traffic_light+0x14>)
 8000764:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000768:	080007a5 	.word	0x080007a5
 800076c:	080007ad 	.word	0x080007ad
 8000770:	08000ad5 	.word	0x08000ad5
 8000774:	08000ad5 	.word	0x08000ad5
 8000778:	08000ad5 	.word	0x08000ad5
 800077c:	08000ad5 	.word	0x08000ad5
 8000780:	08000ad5 	.word	0x08000ad5
 8000784:	08000ad5 	.word	0x08000ad5
 8000788:	08000ad5 	.word	0x08000ad5
 800078c:	08000ad5 	.word	0x08000ad5
 8000790:	08000ad5 	.word	0x08000ad5
 8000794:	0800085b 	.word	0x0800085b
 8000798:	080008fd 	.word	0x080008fd
 800079c:	08000987 	.word	0x08000987
 80007a0:	08000a4d 	.word	0x08000a4d

		case INIT:
			status = MODE1;
 80007a4:	4ba0      	ldr	r3, [pc, #640]	; (8000a28 <fsm_traffic_light+0x2d4>)
 80007a6:	2201      	movs	r2, #1
 80007a8:	601a      	str	r2, [r3, #0]
			break;
 80007aa:	e19c      	b.n	8000ae6 <fsm_traffic_light+0x392>

		case MODE1:
			//Set up LED
			HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin, RESET);
 80007ac:	2200      	movs	r2, #0
 80007ae:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80007b2:	489e      	ldr	r0, [pc, #632]	; (8000a2c <fsm_traffic_light+0x2d8>)
 80007b4:	f000 fedd 	bl	8001572 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(A1_GPIO_Port, A1_Pin, SET);
 80007b8:	2201      	movs	r2, #1
 80007ba:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80007be:	489b      	ldr	r0, [pc, #620]	; (8000a2c <fsm_traffic_light+0x2d8>)
 80007c0:	f000 fed7 	bl	8001572 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(G1_GPIO_Port, G1_Pin, SET);
 80007c4:	2201      	movs	r2, #1
 80007c6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007ca:	4898      	ldr	r0, [pc, #608]	; (8000a2c <fsm_traffic_light+0x2d8>)
 80007cc:	f000 fed1 	bl	8001572 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(R1_GPIO_Port, R2_Pin, SET);
 80007d0:	2201      	movs	r2, #1
 80007d2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007d6:	4895      	ldr	r0, [pc, #596]	; (8000a2c <fsm_traffic_light+0x2d8>)
 80007d8:	f000 fecb 	bl	8001572 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(A2_GPIO_Port, A2_Pin, SET);
 80007dc:	2201      	movs	r2, #1
 80007de:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80007e2:	4892      	ldr	r0, [pc, #584]	; (8000a2c <fsm_traffic_light+0x2d8>)
 80007e4:	f000 fec5 	bl	8001572 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(G2_GPIO_Port, G2_Pin, RESET);
 80007e8:	2200      	movs	r2, #0
 80007ea:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80007ee:	488f      	ldr	r0, [pc, #572]	; (8000a2c <fsm_traffic_light+0x2d8>)
 80007f0:	f000 febf 	bl	8001572 <HAL_GPIO_WritePin>

			//Set up default value
			counter1 = counter2 = 1;
 80007f4:	4b8e      	ldr	r3, [pc, #568]	; (8000a30 <fsm_traffic_light+0x2dc>)
 80007f6:	2201      	movs	r2, #1
 80007f8:	601a      	str	r2, [r3, #0]
 80007fa:	4b8d      	ldr	r3, [pc, #564]	; (8000a30 <fsm_traffic_light+0x2dc>)
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	4a8d      	ldr	r2, [pc, #564]	; (8000a34 <fsm_traffic_light+0x2e0>)
 8000800:	6013      	str	r3, [r2, #0]
			index_ledlc = 0;
 8000802:	4b8d      	ldr	r3, [pc, #564]	; (8000a38 <fsm_traffic_light+0x2e4>)
 8000804:	2200      	movs	r2, #0
 8000806:	601a      	str	r2, [r3, #0]
			index_ledpt = 2;
 8000808:	4b8c      	ldr	r3, [pc, #560]	; (8000a3c <fsm_traffic_light+0x2e8>)
 800080a:	2202      	movs	r2, #2
 800080c:	601a      	str	r2, [r3, #0]
			updateLedBufferMode1();
 800080e:	f7ff fe59 	bl	80004c4 <updateLedBufferMode1>
			update7SEGLandscape(index_ledlc);
 8000812:	4b89      	ldr	r3, [pc, #548]	; (8000a38 <fsm_traffic_light+0x2e4>)
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	4618      	mov	r0, r3
 8000818:	f7ff fde0 	bl	80003dc <update7SEGLandscape>
			update7SEGPortrait(index_ledpt);
 800081c:	4b87      	ldr	r3, [pc, #540]	; (8000a3c <fsm_traffic_light+0x2e8>)
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	4618      	mov	r0, r3
 8000822:	f7ff fe13 	bl	800044c <update7SEGPortrait>

			//Set timer
			setTimer(0, GREEN * 1000);	// Set timer for RED_GREEN
 8000826:	4b86      	ldr	r3, [pc, #536]	; (8000a40 <fsm_traffic_light+0x2ec>)
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800082e:	fb02 f303 	mul.w	r3, r2, r3
 8000832:	4619      	mov	r1, r3
 8000834:	2000      	movs	r0, #0
 8000836:	f000 fa7d 	bl	8000d34 <setTimer>
			setTimer(1, 1000);			// Set timer for updateLedBufferMode1
 800083a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800083e:	2001      	movs	r0, #1
 8000840:	f000 fa78 	bl	8000d34 <setTimer>
			setTimer(2, 250);			// Set timer for 7SEG LED
 8000844:	21fa      	movs	r1, #250	; 0xfa
 8000846:	2002      	movs	r0, #2
 8000848:	f000 fa74 	bl	8000d34 <setTimer>
			clearTimer(3);
 800084c:	2003      	movs	r0, #3
 800084e:	f000 fa91 	bl	8000d74 <clearTimer>
			status = RED_GREEN;
 8000852:	4b75      	ldr	r3, [pc, #468]	; (8000a28 <fsm_traffic_light+0x2d4>)
 8000854:	220b      	movs	r2, #11
 8000856:	601a      	str	r2, [r3, #0]
			break;
 8000858:	e145      	b.n	8000ae6 <fsm_traffic_light+0x392>

		case RED_GREEN:
			//Set up LED
			HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin, RESET);
 800085a:	2200      	movs	r2, #0
 800085c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000860:	4872      	ldr	r0, [pc, #456]	; (8000a2c <fsm_traffic_light+0x2d8>)
 8000862:	f000 fe86 	bl	8001572 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(A1_GPIO_Port, A1_Pin, SET);
 8000866:	2201      	movs	r2, #1
 8000868:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800086c:	486f      	ldr	r0, [pc, #444]	; (8000a2c <fsm_traffic_light+0x2d8>)
 800086e:	f000 fe80 	bl	8001572 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(R2_GPIO_Port, R2_Pin, SET);
 8000872:	2201      	movs	r2, #1
 8000874:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000878:	486c      	ldr	r0, [pc, #432]	; (8000a2c <fsm_traffic_light+0x2d8>)
 800087a:	f000 fe7a 	bl	8001572 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(G2_GPIO_Port, G2_Pin, RESET);
 800087e:	2200      	movs	r2, #0
 8000880:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000884:	4869      	ldr	r0, [pc, #420]	; (8000a2c <fsm_traffic_light+0x2d8>)
 8000886:	f000 fe74 	bl	8001572 <HAL_GPIO_WritePin>

			if (timer_flag[0] == 1){
 800088a:	4b6e      	ldr	r3, [pc, #440]	; (8000a44 <fsm_traffic_light+0x2f0>)
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	2b01      	cmp	r3, #1
 8000890:	d10c      	bne.n	80008ac <fsm_traffic_light+0x158>
				status = RED_AMBER;
 8000892:	4b65      	ldr	r3, [pc, #404]	; (8000a28 <fsm_traffic_light+0x2d4>)
 8000894:	220c      	movs	r2, #12
 8000896:	601a      	str	r2, [r3, #0]
				setTimer(0, AMBER * 1000);
 8000898:	4b6b      	ldr	r3, [pc, #428]	; (8000a48 <fsm_traffic_light+0x2f4>)
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80008a0:	fb02 f303 	mul.w	r3, r2, r3
 80008a4:	4619      	mov	r1, r3
 80008a6:	2000      	movs	r0, #0
 80008a8:	f000 fa44 	bl	8000d34 <setTimer>
			}

			if (timer_flag[1] == 1){
 80008ac:	4b65      	ldr	r3, [pc, #404]	; (8000a44 <fsm_traffic_light+0x2f0>)
 80008ae:	685b      	ldr	r3, [r3, #4]
 80008b0:	2b01      	cmp	r3, #1
 80008b2:	d106      	bne.n	80008c2 <fsm_traffic_light+0x16e>
				updateLedBufferMode1();
 80008b4:	f7ff fe06 	bl	80004c4 <updateLedBufferMode1>
				setTimer(1, 1000);
 80008b8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80008bc:	2001      	movs	r0, #1
 80008be:	f000 fa39 	bl	8000d34 <setTimer>
			}

			if (timer_flag[2] == 1){
 80008c2:	4b60      	ldr	r3, [pc, #384]	; (8000a44 <fsm_traffic_light+0x2f0>)
 80008c4:	689b      	ldr	r3, [r3, #8]
 80008c6:	2b01      	cmp	r3, #1
 80008c8:	d10d      	bne.n	80008e6 <fsm_traffic_light+0x192>
				update7SEGLandscape(index_ledlc);
 80008ca:	4b5b      	ldr	r3, [pc, #364]	; (8000a38 <fsm_traffic_light+0x2e4>)
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	4618      	mov	r0, r3
 80008d0:	f7ff fd84 	bl	80003dc <update7SEGLandscape>
				update7SEGPortrait(index_ledpt);
 80008d4:	4b59      	ldr	r3, [pc, #356]	; (8000a3c <fsm_traffic_light+0x2e8>)
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	4618      	mov	r0, r3
 80008da:	f7ff fdb7 	bl	800044c <update7SEGPortrait>
				setTimer(2, 250);
 80008de:	21fa      	movs	r1, #250	; 0xfa
 80008e0:	2002      	movs	r0, #2
 80008e2:	f000 fa27 	bl	8000d34 <setTimer>
			}

			// If button 1 is pressed, come to MODE2
			if (isButtonPressed(0) == 1){
 80008e6:	2000      	movs	r0, #0
 80008e8:	f7ff fc30 	bl	800014c <isButtonPressed>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2b01      	cmp	r3, #1
 80008f0:	f040 80f2 	bne.w	8000ad8 <fsm_traffic_light+0x384>
				status = MODE2;
 80008f4:	4b4c      	ldr	r3, [pc, #304]	; (8000a28 <fsm_traffic_light+0x2d4>)
 80008f6:	2202      	movs	r2, #2
 80008f8:	601a      	str	r2, [r3, #0]
			}
			break;
 80008fa:	e0ed      	b.n	8000ad8 <fsm_traffic_light+0x384>

		case RED_AMBER:
			//Set up LED
			HAL_GPIO_WritePin(G2_GPIO_Port, G2_Pin, SET);
 80008fc:	2201      	movs	r2, #1
 80008fe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000902:	484a      	ldr	r0, [pc, #296]	; (8000a2c <fsm_traffic_light+0x2d8>)
 8000904:	f000 fe35 	bl	8001572 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(A2_GPIO_Port, A2_Pin, RESET);
 8000908:	2200      	movs	r2, #0
 800090a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800090e:	4847      	ldr	r0, [pc, #284]	; (8000a2c <fsm_traffic_light+0x2d8>)
 8000910:	f000 fe2f 	bl	8001572 <HAL_GPIO_WritePin>

			if (timer_flag[0] == 1){
 8000914:	4b4b      	ldr	r3, [pc, #300]	; (8000a44 <fsm_traffic_light+0x2f0>)
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	2b01      	cmp	r3, #1
 800091a:	d10c      	bne.n	8000936 <fsm_traffic_light+0x1e2>
				status = GREEN_RED;
 800091c:	4b42      	ldr	r3, [pc, #264]	; (8000a28 <fsm_traffic_light+0x2d4>)
 800091e:	220d      	movs	r2, #13
 8000920:	601a      	str	r2, [r3, #0]
				setTimer(0, GREEN * 1000);
 8000922:	4b47      	ldr	r3, [pc, #284]	; (8000a40 <fsm_traffic_light+0x2ec>)
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800092a:	fb02 f303 	mul.w	r3, r2, r3
 800092e:	4619      	mov	r1, r3
 8000930:	2000      	movs	r0, #0
 8000932:	f000 f9ff 	bl	8000d34 <setTimer>
			}

			if (timer_flag[1] == 1){
 8000936:	4b43      	ldr	r3, [pc, #268]	; (8000a44 <fsm_traffic_light+0x2f0>)
 8000938:	685b      	ldr	r3, [r3, #4]
 800093a:	2b01      	cmp	r3, #1
 800093c:	d106      	bne.n	800094c <fsm_traffic_light+0x1f8>
				updateLedBufferMode1();
 800093e:	f7ff fdc1 	bl	80004c4 <updateLedBufferMode1>
				setTimer(1, 1000);
 8000942:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000946:	2001      	movs	r0, #1
 8000948:	f000 f9f4 	bl	8000d34 <setTimer>
			}

			if (timer_flag[2] == 1){
 800094c:	4b3d      	ldr	r3, [pc, #244]	; (8000a44 <fsm_traffic_light+0x2f0>)
 800094e:	689b      	ldr	r3, [r3, #8]
 8000950:	2b01      	cmp	r3, #1
 8000952:	d10d      	bne.n	8000970 <fsm_traffic_light+0x21c>
				update7SEGLandscape(index_ledlc);
 8000954:	4b38      	ldr	r3, [pc, #224]	; (8000a38 <fsm_traffic_light+0x2e4>)
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	4618      	mov	r0, r3
 800095a:	f7ff fd3f 	bl	80003dc <update7SEGLandscape>
				update7SEGPortrait(index_ledpt);
 800095e:	4b37      	ldr	r3, [pc, #220]	; (8000a3c <fsm_traffic_light+0x2e8>)
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	4618      	mov	r0, r3
 8000964:	f7ff fd72 	bl	800044c <update7SEGPortrait>
				setTimer(2, 250);
 8000968:	21fa      	movs	r1, #250	; 0xfa
 800096a:	2002      	movs	r0, #2
 800096c:	f000 f9e2 	bl	8000d34 <setTimer>
			}
			// If button 1 is pressed, come to MODE2
			if (isButtonPressed(0) == 1){
 8000970:	2000      	movs	r0, #0
 8000972:	f7ff fbeb 	bl	800014c <isButtonPressed>
 8000976:	4603      	mov	r3, r0
 8000978:	2b01      	cmp	r3, #1
 800097a:	f040 80af 	bne.w	8000adc <fsm_traffic_light+0x388>
				status = MODE2;
 800097e:	4b2a      	ldr	r3, [pc, #168]	; (8000a28 <fsm_traffic_light+0x2d4>)
 8000980:	2202      	movs	r2, #2
 8000982:	601a      	str	r2, [r3, #0]
			}
			break;
 8000984:	e0aa      	b.n	8000adc <fsm_traffic_light+0x388>

		case GREEN_RED:
			//Set up LED
			HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin, SET);
 8000986:	2201      	movs	r2, #1
 8000988:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800098c:	4827      	ldr	r0, [pc, #156]	; (8000a2c <fsm_traffic_light+0x2d8>)
 800098e:	f000 fdf0 	bl	8001572 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(G1_GPIO_Port, G1_Pin, RESET);
 8000992:	2200      	movs	r2, #0
 8000994:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000998:	4824      	ldr	r0, [pc, #144]	; (8000a2c <fsm_traffic_light+0x2d8>)
 800099a:	f000 fdea 	bl	8001572 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(A2_GPIO_Port, A2_Pin, SET);
 800099e:	2201      	movs	r2, #1
 80009a0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80009a4:	4821      	ldr	r0, [pc, #132]	; (8000a2c <fsm_traffic_light+0x2d8>)
 80009a6:	f000 fde4 	bl	8001572 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(R2_GPIO_Port, R2_Pin, RESET);
 80009aa:	2200      	movs	r2, #0
 80009ac:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009b0:	481e      	ldr	r0, [pc, #120]	; (8000a2c <fsm_traffic_light+0x2d8>)
 80009b2:	f000 fdde 	bl	8001572 <HAL_GPIO_WritePin>

			if (timer_flag[0] == 1){
 80009b6:	4b23      	ldr	r3, [pc, #140]	; (8000a44 <fsm_traffic_light+0x2f0>)
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	2b01      	cmp	r3, #1
 80009bc:	d10c      	bne.n	80009d8 <fsm_traffic_light+0x284>
				status = AMBER_RED;
 80009be:	4b1a      	ldr	r3, [pc, #104]	; (8000a28 <fsm_traffic_light+0x2d4>)
 80009c0:	220e      	movs	r2, #14
 80009c2:	601a      	str	r2, [r3, #0]
				setTimer(0, AMBER * 1000);
 80009c4:	4b20      	ldr	r3, [pc, #128]	; (8000a48 <fsm_traffic_light+0x2f4>)
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80009cc:	fb02 f303 	mul.w	r3, r2, r3
 80009d0:	4619      	mov	r1, r3
 80009d2:	2000      	movs	r0, #0
 80009d4:	f000 f9ae 	bl	8000d34 <setTimer>
			}

			if (timer_flag[1] == 1){
 80009d8:	4b1a      	ldr	r3, [pc, #104]	; (8000a44 <fsm_traffic_light+0x2f0>)
 80009da:	685b      	ldr	r3, [r3, #4]
 80009dc:	2b01      	cmp	r3, #1
 80009de:	d106      	bne.n	80009ee <fsm_traffic_light+0x29a>
				updateLedBufferMode1();
 80009e0:	f7ff fd70 	bl	80004c4 <updateLedBufferMode1>
				setTimer(1, 1000);
 80009e4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80009e8:	2001      	movs	r0, #1
 80009ea:	f000 f9a3 	bl	8000d34 <setTimer>
			}

			if (timer_flag[2] == 1){
 80009ee:	4b15      	ldr	r3, [pc, #84]	; (8000a44 <fsm_traffic_light+0x2f0>)
 80009f0:	689b      	ldr	r3, [r3, #8]
 80009f2:	2b01      	cmp	r3, #1
 80009f4:	d10d      	bne.n	8000a12 <fsm_traffic_light+0x2be>
				update7SEGLandscape(index_ledlc);
 80009f6:	4b10      	ldr	r3, [pc, #64]	; (8000a38 <fsm_traffic_light+0x2e4>)
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	4618      	mov	r0, r3
 80009fc:	f7ff fcee 	bl	80003dc <update7SEGLandscape>
				update7SEGPortrait(index_ledpt);
 8000a00:	4b0e      	ldr	r3, [pc, #56]	; (8000a3c <fsm_traffic_light+0x2e8>)
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	4618      	mov	r0, r3
 8000a06:	f7ff fd21 	bl	800044c <update7SEGPortrait>
				setTimer(2, 250);
 8000a0a:	21fa      	movs	r1, #250	; 0xfa
 8000a0c:	2002      	movs	r0, #2
 8000a0e:	f000 f991 	bl	8000d34 <setTimer>
			}
			// If button 1 is pressed, come to MODE2
			if (isButtonPressed(0) == 1){
 8000a12:	2000      	movs	r0, #0
 8000a14:	f7ff fb9a 	bl	800014c <isButtonPressed>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	2b01      	cmp	r3, #1
 8000a1c:	d160      	bne.n	8000ae0 <fsm_traffic_light+0x38c>
				status = MODE2;
 8000a1e:	4b02      	ldr	r3, [pc, #8]	; (8000a28 <fsm_traffic_light+0x2d4>)
 8000a20:	2202      	movs	r2, #2
 8000a22:	601a      	str	r2, [r3, #0]
			}
			break;
 8000a24:	e05c      	b.n	8000ae0 <fsm_traffic_light+0x38c>
 8000a26:	bf00      	nop
 8000a28:	200000b8 	.word	0x200000b8
 8000a2c:	40010800 	.word	0x40010800
 8000a30:	20000058 	.word	0x20000058
 8000a34:	20000054 	.word	0x20000054
 8000a38:	200000b4 	.word	0x200000b4
 8000a3c:	20000040 	.word	0x20000040
 8000a40:	20000064 	.word	0x20000064
 8000a44:	200000e4 	.word	0x200000e4
 8000a48:	20000060 	.word	0x20000060

		case AMBER_RED:
			//Set up LED
			HAL_GPIO_WritePin(A1_GPIO_Port, A1_Pin, RESET);
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a52:	4826      	ldr	r0, [pc, #152]	; (8000aec <fsm_traffic_light+0x398>)
 8000a54:	f000 fd8d 	bl	8001572 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(G1_GPIO_Port, G1_Pin, SET);
 8000a58:	2201      	movs	r2, #1
 8000a5a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a5e:	4823      	ldr	r0, [pc, #140]	; (8000aec <fsm_traffic_light+0x398>)
 8000a60:	f000 fd87 	bl	8001572 <HAL_GPIO_WritePin>

			if (timer_flag[0] == 1){
 8000a64:	4b22      	ldr	r3, [pc, #136]	; (8000af0 <fsm_traffic_light+0x39c>)
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	2b01      	cmp	r3, #1
 8000a6a:	d10c      	bne.n	8000a86 <fsm_traffic_light+0x332>
				status = RED_GREEN;
 8000a6c:	4b21      	ldr	r3, [pc, #132]	; (8000af4 <fsm_traffic_light+0x3a0>)
 8000a6e:	220b      	movs	r2, #11
 8000a70:	601a      	str	r2, [r3, #0]
				setTimer(0, GREEN * 1000);
 8000a72:	4b21      	ldr	r3, [pc, #132]	; (8000af8 <fsm_traffic_light+0x3a4>)
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000a7a:	fb02 f303 	mul.w	r3, r2, r3
 8000a7e:	4619      	mov	r1, r3
 8000a80:	2000      	movs	r0, #0
 8000a82:	f000 f957 	bl	8000d34 <setTimer>
			}

			if (timer_flag[1] == 1){
 8000a86:	4b1a      	ldr	r3, [pc, #104]	; (8000af0 <fsm_traffic_light+0x39c>)
 8000a88:	685b      	ldr	r3, [r3, #4]
 8000a8a:	2b01      	cmp	r3, #1
 8000a8c:	d106      	bne.n	8000a9c <fsm_traffic_light+0x348>
				updateLedBufferMode1();
 8000a8e:	f7ff fd19 	bl	80004c4 <updateLedBufferMode1>
				setTimer(1, 1000);
 8000a92:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000a96:	2001      	movs	r0, #1
 8000a98:	f000 f94c 	bl	8000d34 <setTimer>
			}

			if (timer_flag[2] == 1){
 8000a9c:	4b14      	ldr	r3, [pc, #80]	; (8000af0 <fsm_traffic_light+0x39c>)
 8000a9e:	689b      	ldr	r3, [r3, #8]
 8000aa0:	2b01      	cmp	r3, #1
 8000aa2:	d10d      	bne.n	8000ac0 <fsm_traffic_light+0x36c>
				update7SEGLandscape(index_ledlc);
 8000aa4:	4b15      	ldr	r3, [pc, #84]	; (8000afc <fsm_traffic_light+0x3a8>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	f7ff fc97 	bl	80003dc <update7SEGLandscape>
				update7SEGPortrait(index_ledpt);
 8000aae:	4b14      	ldr	r3, [pc, #80]	; (8000b00 <fsm_traffic_light+0x3ac>)
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	f7ff fcca 	bl	800044c <update7SEGPortrait>
				setTimer(2, 250);
 8000ab8:	21fa      	movs	r1, #250	; 0xfa
 8000aba:	2002      	movs	r0, #2
 8000abc:	f000 f93a 	bl	8000d34 <setTimer>
			}
			// If button 1 is pressed, come to MODE2
			if (isButtonPressed(0) == 1){
 8000ac0:	2000      	movs	r0, #0
 8000ac2:	f7ff fb43 	bl	800014c <isButtonPressed>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	2b01      	cmp	r3, #1
 8000aca:	d10b      	bne.n	8000ae4 <fsm_traffic_light+0x390>
				status = MODE2;
 8000acc:	4b09      	ldr	r3, [pc, #36]	; (8000af4 <fsm_traffic_light+0x3a0>)
 8000ace:	2202      	movs	r2, #2
 8000ad0:	601a      	str	r2, [r3, #0]
			}
			break;
 8000ad2:	e007      	b.n	8000ae4 <fsm_traffic_light+0x390>
		default:
			break;
 8000ad4:	bf00      	nop
 8000ad6:	e006      	b.n	8000ae6 <fsm_traffic_light+0x392>
			break;
 8000ad8:	bf00      	nop
 8000ada:	e004      	b.n	8000ae6 <fsm_traffic_light+0x392>
			break;
 8000adc:	bf00      	nop
 8000ade:	e002      	b.n	8000ae6 <fsm_traffic_light+0x392>
			break;
 8000ae0:	bf00      	nop
 8000ae2:	e000      	b.n	8000ae6 <fsm_traffic_light+0x392>
			break;
 8000ae4:	bf00      	nop
	}
}
 8000ae6:	bf00      	nop
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	bf00      	nop
 8000aec:	40010800 	.word	0x40010800
 8000af0:	200000e4 	.word	0x200000e4
 8000af4:	200000b8 	.word	0x200000b8
 8000af8:	20000064 	.word	0x20000064
 8000afc:	200000b4 	.word	0x200000b4
 8000b00:	20000040 	.word	0x20000040

08000b04 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b08:	f000 fa90 	bl	800102c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b0c:	f000 f80c 	bl	8000b28 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_TIM2_Init();
 8000b10:	f000 f846 	bl	8000ba0 <MX_TIM2_Init>
  MX_GPIO_Init();
 8000b14:	f000 f890 	bl	8000c38 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000b18:	4802      	ldr	r0, [pc, #8]	; (8000b24 <main+0x20>)
 8000b1a:	f001 f9bd 	bl	8001e98 <HAL_TIM_Base_Start_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  fsm_traffic_light();
 8000b1e:	f7ff fe19 	bl	8000754 <fsm_traffic_light>
 8000b22:	e7fc      	b.n	8000b1e <main+0x1a>
 8000b24:	2000010c 	.word	0x2000010c

08000b28 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b090      	sub	sp, #64	; 0x40
 8000b2c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b2e:	f107 0318 	add.w	r3, r7, #24
 8000b32:	2228      	movs	r2, #40	; 0x28
 8000b34:	2100      	movs	r1, #0
 8000b36:	4618      	mov	r0, r3
 8000b38:	f001 fd6a 	bl	8002610 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b3c:	1d3b      	adds	r3, r7, #4
 8000b3e:	2200      	movs	r2, #0
 8000b40:	601a      	str	r2, [r3, #0]
 8000b42:	605a      	str	r2, [r3, #4]
 8000b44:	609a      	str	r2, [r3, #8]
 8000b46:	60da      	str	r2, [r3, #12]
 8000b48:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b4a:	2302      	movs	r3, #2
 8000b4c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b4e:	2301      	movs	r3, #1
 8000b50:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b52:	2310      	movs	r3, #16
 8000b54:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000b56:	2300      	movs	r3, #0
 8000b58:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b5a:	f107 0318 	add.w	r3, r7, #24
 8000b5e:	4618      	mov	r0, r3
 8000b60:	f000 fd20 	bl	80015a4 <HAL_RCC_OscConfig>
 8000b64:	4603      	mov	r3, r0
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d001      	beq.n	8000b6e <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000b6a:	f000 f8dd 	bl	8000d28 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b6e:	230f      	movs	r3, #15
 8000b70:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000b72:	2300      	movs	r3, #0
 8000b74:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b76:	2300      	movs	r3, #0
 8000b78:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000b82:	1d3b      	adds	r3, r7, #4
 8000b84:	2100      	movs	r1, #0
 8000b86:	4618      	mov	r0, r3
 8000b88:	f000 ff8c 	bl	8001aa4 <HAL_RCC_ClockConfig>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d001      	beq.n	8000b96 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000b92:	f000 f8c9 	bl	8000d28 <Error_Handler>
  }
}
 8000b96:	bf00      	nop
 8000b98:	3740      	adds	r7, #64	; 0x40
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}
	...

08000ba0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b086      	sub	sp, #24
 8000ba4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ba6:	f107 0308 	add.w	r3, r7, #8
 8000baa:	2200      	movs	r2, #0
 8000bac:	601a      	str	r2, [r3, #0]
 8000bae:	605a      	str	r2, [r3, #4]
 8000bb0:	609a      	str	r2, [r3, #8]
 8000bb2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bb4:	463b      	mov	r3, r7
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	601a      	str	r2, [r3, #0]
 8000bba:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000bbc:	4b1d      	ldr	r3, [pc, #116]	; (8000c34 <MX_TIM2_Init+0x94>)
 8000bbe:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000bc2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000bc4:	4b1b      	ldr	r3, [pc, #108]	; (8000c34 <MX_TIM2_Init+0x94>)
 8000bc6:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000bca:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bcc:	4b19      	ldr	r3, [pc, #100]	; (8000c34 <MX_TIM2_Init+0x94>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000bd2:	4b18      	ldr	r3, [pc, #96]	; (8000c34 <MX_TIM2_Init+0x94>)
 8000bd4:	2209      	movs	r2, #9
 8000bd6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bd8:	4b16      	ldr	r3, [pc, #88]	; (8000c34 <MX_TIM2_Init+0x94>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bde:	4b15      	ldr	r3, [pc, #84]	; (8000c34 <MX_TIM2_Init+0x94>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000be4:	4813      	ldr	r0, [pc, #76]	; (8000c34 <MX_TIM2_Init+0x94>)
 8000be6:	f001 f907 	bl	8001df8 <HAL_TIM_Base_Init>
 8000bea:	4603      	mov	r3, r0
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d001      	beq.n	8000bf4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000bf0:	f000 f89a 	bl	8000d28 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000bf4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bf8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000bfa:	f107 0308 	add.w	r3, r7, #8
 8000bfe:	4619      	mov	r1, r3
 8000c00:	480c      	ldr	r0, [pc, #48]	; (8000c34 <MX_TIM2_Init+0x94>)
 8000c02:	f001 fa9d 	bl	8002140 <HAL_TIM_ConfigClockSource>
 8000c06:	4603      	mov	r3, r0
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d001      	beq.n	8000c10 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000c0c:	f000 f88c 	bl	8000d28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c10:	2300      	movs	r3, #0
 8000c12:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c14:	2300      	movs	r3, #0
 8000c16:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000c18:	463b      	mov	r3, r7
 8000c1a:	4619      	mov	r1, r3
 8000c1c:	4805      	ldr	r0, [pc, #20]	; (8000c34 <MX_TIM2_Init+0x94>)
 8000c1e:	f001 fc69 	bl	80024f4 <HAL_TIMEx_MasterConfigSynchronization>
 8000c22:	4603      	mov	r3, r0
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d001      	beq.n	8000c2c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000c28:	f000 f87e 	bl	8000d28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000c2c:	bf00      	nop
 8000c2e:	3718      	adds	r7, #24
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bd80      	pop	{r7, pc}
 8000c34:	2000010c 	.word	0x2000010c

08000c38 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b086      	sub	sp, #24
 8000c3c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c3e:	f107 0308 	add.w	r3, r7, #8
 8000c42:	2200      	movs	r2, #0
 8000c44:	601a      	str	r2, [r3, #0]
 8000c46:	605a      	str	r2, [r3, #4]
 8000c48:	609a      	str	r2, [r3, #8]
 8000c4a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c4c:	4b28      	ldr	r3, [pc, #160]	; (8000cf0 <MX_GPIO_Init+0xb8>)
 8000c4e:	699b      	ldr	r3, [r3, #24]
 8000c50:	4a27      	ldr	r2, [pc, #156]	; (8000cf0 <MX_GPIO_Init+0xb8>)
 8000c52:	f043 0304 	orr.w	r3, r3, #4
 8000c56:	6193      	str	r3, [r2, #24]
 8000c58:	4b25      	ldr	r3, [pc, #148]	; (8000cf0 <MX_GPIO_Init+0xb8>)
 8000c5a:	699b      	ldr	r3, [r3, #24]
 8000c5c:	f003 0304 	and.w	r3, r3, #4
 8000c60:	607b      	str	r3, [r7, #4]
 8000c62:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c64:	4b22      	ldr	r3, [pc, #136]	; (8000cf0 <MX_GPIO_Init+0xb8>)
 8000c66:	699b      	ldr	r3, [r3, #24]
 8000c68:	4a21      	ldr	r2, [pc, #132]	; (8000cf0 <MX_GPIO_Init+0xb8>)
 8000c6a:	f043 0308 	orr.w	r3, r3, #8
 8000c6e:	6193      	str	r3, [r2, #24]
 8000c70:	4b1f      	ldr	r3, [pc, #124]	; (8000cf0 <MX_GPIO_Init+0xb8>)
 8000c72:	699b      	ldr	r3, [r3, #24]
 8000c74:	f003 0308 	and.w	r3, r3, #8
 8000c78:	603b      	str	r3, [r7, #0]
 8000c7a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, EN0_Pin|EN1_Pin|EN2_Pin|EN3_Pin
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	f64f 71c0 	movw	r1, #65472	; 0xffc0
 8000c82:	481c      	ldr	r0, [pc, #112]	; (8000cf4 <MX_GPIO_Init+0xbc>)
 8000c84:	f000 fc75 	bl	8001572 <HAL_GPIO_WritePin>
                          |R1_Pin|A1_Pin|G1_Pin|R2_Pin
                          |A2_Pin|G2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SEG0_Pin|SEG1_Pin|SEG2_Pin|D0_Pin
 8000c88:	2200      	movs	r2, #0
 8000c8a:	f643 71ff 	movw	r1, #16383	; 0x3fff
 8000c8e:	481a      	ldr	r0, [pc, #104]	; (8000cf8 <MX_GPIO_Init+0xc0>)
 8000c90:	f000 fc6f 	bl	8001572 <HAL_GPIO_WritePin>
                          |E0_Pin|F0_Pin|G0_Pin|SEG3_Pin
                          |SEG4_Pin|SEG5_Pin|SEG6_Pin|A0_Pin
                          |B0_Pin|C0_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : BTN1_Pin BTN2_Pin BTN3_Pin */
  GPIO_InitStruct.Pin = BTN1_Pin|BTN2_Pin|BTN3_Pin;
 8000c94:	2338      	movs	r3, #56	; 0x38
 8000c96:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ca0:	f107 0308 	add.w	r3, r7, #8
 8000ca4:	4619      	mov	r1, r3
 8000ca6:	4813      	ldr	r0, [pc, #76]	; (8000cf4 <MX_GPIO_Init+0xbc>)
 8000ca8:	f000 fad2 	bl	8001250 <HAL_GPIO_Init>

  /*Configure GPIO pins : EN0_Pin EN1_Pin EN2_Pin EN3_Pin
                           R1_Pin A1_Pin G1_Pin R2_Pin
                           A2_Pin G2_Pin */
  GPIO_InitStruct.Pin = EN0_Pin|EN1_Pin|EN2_Pin|EN3_Pin
 8000cac:	f64f 73c0 	movw	r3, #65472	; 0xffc0
 8000cb0:	60bb      	str	r3, [r7, #8]
                          |R1_Pin|A1_Pin|G1_Pin|R2_Pin
                          |A2_Pin|G2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cb2:	2301      	movs	r3, #1
 8000cb4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cba:	2302      	movs	r3, #2
 8000cbc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cbe:	f107 0308 	add.w	r3, r7, #8
 8000cc2:	4619      	mov	r1, r3
 8000cc4:	480b      	ldr	r0, [pc, #44]	; (8000cf4 <MX_GPIO_Init+0xbc>)
 8000cc6:	f000 fac3 	bl	8001250 <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG0_Pin SEG1_Pin SEG2_Pin D0_Pin
                           E0_Pin F0_Pin G0_Pin SEG3_Pin
                           SEG4_Pin SEG5_Pin SEG6_Pin A0_Pin
                           B0_Pin C0_Pin */
  GPIO_InitStruct.Pin = SEG0_Pin|SEG1_Pin|SEG2_Pin|D0_Pin
 8000cca:	f643 73ff 	movw	r3, #16383	; 0x3fff
 8000cce:	60bb      	str	r3, [r7, #8]
                          |E0_Pin|F0_Pin|G0_Pin|SEG3_Pin
                          |SEG4_Pin|SEG5_Pin|SEG6_Pin|A0_Pin
                          |B0_Pin|C0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cd0:	2301      	movs	r3, #1
 8000cd2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cd8:	2302      	movs	r3, #2
 8000cda:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cdc:	f107 0308 	add.w	r3, r7, #8
 8000ce0:	4619      	mov	r1, r3
 8000ce2:	4805      	ldr	r0, [pc, #20]	; (8000cf8 <MX_GPIO_Init+0xc0>)
 8000ce4:	f000 fab4 	bl	8001250 <HAL_GPIO_Init>

}
 8000ce8:	bf00      	nop
 8000cea:	3718      	adds	r7, #24
 8000cec:	46bd      	mov	sp, r7
 8000cee:	bd80      	pop	{r7, pc}
 8000cf0:	40021000 	.word	0x40021000
 8000cf4:	40010800 	.word	0x40010800
 8000cf8:	40010c00 	.word	0x40010c00

08000cfc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b082      	sub	sp, #8
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
	timerRun();
 8000d04:	f000 f84e 	bl	8000da4 <timerRun>
	getKeyInput();
 8000d08:	f7ff fa4a 	bl	80001a0 <getKeyInput>
  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	4a04      	ldr	r2, [pc, #16]	; (8000d24 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000d12:	4293      	cmp	r3, r2
 8000d14:	d101      	bne.n	8000d1a <HAL_TIM_PeriodElapsedCallback+0x1e>
    HAL_IncTick();
 8000d16:	f000 f99f 	bl	8001058 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000d1a:	bf00      	nop
 8000d1c:	3708      	adds	r7, #8
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	bf00      	nop
 8000d24:	40012c00 	.word	0x40012c00

08000d28 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d2c:	b672      	cpsid	i
}
 8000d2e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d30:	e7fe      	b.n	8000d30 <Error_Handler+0x8>
	...

08000d34 <setTimer>:
#include "software_timer.h"

int timer_counter[NUM_OF_TIMERS] = {0};
int timer_flag[NUM_OF_TIMERS] = {0};

void setTimer(int index, int duration){
 8000d34:	b480      	push	{r7}
 8000d36:	b083      	sub	sp, #12
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
 8000d3c:	6039      	str	r1, [r7, #0]
	timer_counter[index] = duration / TIME_CYCLE;
 8000d3e:	683b      	ldr	r3, [r7, #0]
 8000d40:	4a09      	ldr	r2, [pc, #36]	; (8000d68 <setTimer+0x34>)
 8000d42:	fb82 1203 	smull	r1, r2, r2, r3
 8000d46:	1092      	asrs	r2, r2, #2
 8000d48:	17db      	asrs	r3, r3, #31
 8000d4a:	1ad2      	subs	r2, r2, r3
 8000d4c:	4907      	ldr	r1, [pc, #28]	; (8000d6c <setTimer+0x38>)
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	timer_flag[index] = 0;
 8000d54:	4a06      	ldr	r2, [pc, #24]	; (8000d70 <setTimer+0x3c>)
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	2100      	movs	r1, #0
 8000d5a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8000d5e:	bf00      	nop
 8000d60:	370c      	adds	r7, #12
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bc80      	pop	{r7}
 8000d66:	4770      	bx	lr
 8000d68:	66666667 	.word	0x66666667
 8000d6c:	200000bc 	.word	0x200000bc
 8000d70:	200000e4 	.word	0x200000e4

08000d74 <clearTimer>:

void clearTimer(int index){
 8000d74:	b480      	push	{r7}
 8000d76:	b083      	sub	sp, #12
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
	timer_counter[index] = 0;
 8000d7c:	4a07      	ldr	r2, [pc, #28]	; (8000d9c <clearTimer+0x28>)
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	2100      	movs	r1, #0
 8000d82:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	timer_flag[index] = 0;
 8000d86:	4a06      	ldr	r2, [pc, #24]	; (8000da0 <clearTimer+0x2c>)
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	2100      	movs	r1, #0
 8000d8c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8000d90:	bf00      	nop
 8000d92:	370c      	adds	r7, #12
 8000d94:	46bd      	mov	sp, r7
 8000d96:	bc80      	pop	{r7}
 8000d98:	4770      	bx	lr
 8000d9a:	bf00      	nop
 8000d9c:	200000bc 	.word	0x200000bc
 8000da0:	200000e4 	.word	0x200000e4

08000da4 <timerRun>:

void timerRun(){
 8000da4:	b480      	push	{r7}
 8000da6:	b083      	sub	sp, #12
 8000da8:	af00      	add	r7, sp, #0
	for (int i = 0; i < NUM_OF_TIMERS; i++){
 8000daa:	2300      	movs	r3, #0
 8000dac:	607b      	str	r3, [r7, #4]
 8000dae:	e01c      	b.n	8000dea <timerRun+0x46>
		if (timer_counter[i] > 0){
 8000db0:	4a12      	ldr	r2, [pc, #72]	; (8000dfc <timerRun+0x58>)
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	dd13      	ble.n	8000de4 <timerRun+0x40>
			timer_counter[i]--;
 8000dbc:	4a0f      	ldr	r2, [pc, #60]	; (8000dfc <timerRun+0x58>)
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000dc4:	1e5a      	subs	r2, r3, #1
 8000dc6:	490d      	ldr	r1, [pc, #52]	; (8000dfc <timerRun+0x58>)
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if (timer_counter[i] <= 0){
 8000dce:	4a0b      	ldr	r2, [pc, #44]	; (8000dfc <timerRun+0x58>)
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	dc04      	bgt.n	8000de4 <timerRun+0x40>
				timer_flag[i] = 1;
 8000dda:	4a09      	ldr	r2, [pc, #36]	; (8000e00 <timerRun+0x5c>)
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	2101      	movs	r1, #1
 8000de0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < NUM_OF_TIMERS; i++){
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	3301      	adds	r3, #1
 8000de8:	607b      	str	r3, [r7, #4]
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	2b09      	cmp	r3, #9
 8000dee:	dddf      	ble.n	8000db0 <timerRun+0xc>
			}
		}
	}
}
 8000df0:	bf00      	nop
 8000df2:	bf00      	nop
 8000df4:	370c      	adds	r7, #12
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bc80      	pop	{r7}
 8000dfa:	4770      	bx	lr
 8000dfc:	200000bc 	.word	0x200000bc
 8000e00:	200000e4 	.word	0x200000e4

08000e04 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	b085      	sub	sp, #20
 8000e08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000e0a:	4b15      	ldr	r3, [pc, #84]	; (8000e60 <HAL_MspInit+0x5c>)
 8000e0c:	699b      	ldr	r3, [r3, #24]
 8000e0e:	4a14      	ldr	r2, [pc, #80]	; (8000e60 <HAL_MspInit+0x5c>)
 8000e10:	f043 0301 	orr.w	r3, r3, #1
 8000e14:	6193      	str	r3, [r2, #24]
 8000e16:	4b12      	ldr	r3, [pc, #72]	; (8000e60 <HAL_MspInit+0x5c>)
 8000e18:	699b      	ldr	r3, [r3, #24]
 8000e1a:	f003 0301 	and.w	r3, r3, #1
 8000e1e:	60bb      	str	r3, [r7, #8]
 8000e20:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e22:	4b0f      	ldr	r3, [pc, #60]	; (8000e60 <HAL_MspInit+0x5c>)
 8000e24:	69db      	ldr	r3, [r3, #28]
 8000e26:	4a0e      	ldr	r2, [pc, #56]	; (8000e60 <HAL_MspInit+0x5c>)
 8000e28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e2c:	61d3      	str	r3, [r2, #28]
 8000e2e:	4b0c      	ldr	r3, [pc, #48]	; (8000e60 <HAL_MspInit+0x5c>)
 8000e30:	69db      	ldr	r3, [r3, #28]
 8000e32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e36:	607b      	str	r3, [r7, #4]
 8000e38:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000e3a:	4b0a      	ldr	r3, [pc, #40]	; (8000e64 <HAL_MspInit+0x60>)
 8000e3c:	685b      	ldr	r3, [r3, #4]
 8000e3e:	60fb      	str	r3, [r7, #12]
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000e46:	60fb      	str	r3, [r7, #12]
 8000e48:	68fb      	ldr	r3, [r7, #12]
 8000e4a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000e4e:	60fb      	str	r3, [r7, #12]
 8000e50:	4a04      	ldr	r2, [pc, #16]	; (8000e64 <HAL_MspInit+0x60>)
 8000e52:	68fb      	ldr	r3, [r7, #12]
 8000e54:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e56:	bf00      	nop
 8000e58:	3714      	adds	r7, #20
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bc80      	pop	{r7}
 8000e5e:	4770      	bx	lr
 8000e60:	40021000 	.word	0x40021000
 8000e64:	40010000 	.word	0x40010000

08000e68 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b084      	sub	sp, #16
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000e78:	d113      	bne.n	8000ea2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000e7a:	4b0c      	ldr	r3, [pc, #48]	; (8000eac <HAL_TIM_Base_MspInit+0x44>)
 8000e7c:	69db      	ldr	r3, [r3, #28]
 8000e7e:	4a0b      	ldr	r2, [pc, #44]	; (8000eac <HAL_TIM_Base_MspInit+0x44>)
 8000e80:	f043 0301 	orr.w	r3, r3, #1
 8000e84:	61d3      	str	r3, [r2, #28]
 8000e86:	4b09      	ldr	r3, [pc, #36]	; (8000eac <HAL_TIM_Base_MspInit+0x44>)
 8000e88:	69db      	ldr	r3, [r3, #28]
 8000e8a:	f003 0301 	and.w	r3, r3, #1
 8000e8e:	60fb      	str	r3, [r7, #12]
 8000e90:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000e92:	2200      	movs	r2, #0
 8000e94:	2100      	movs	r1, #0
 8000e96:	201c      	movs	r0, #28
 8000e98:	f000 f9af 	bl	80011fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000e9c:	201c      	movs	r0, #28
 8000e9e:	f000 f9c8 	bl	8001232 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000ea2:	bf00      	nop
 8000ea4:	3710      	adds	r7, #16
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	40021000 	.word	0x40021000

08000eb0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b08c      	sub	sp, #48	; 0x30
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0);
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	6879      	ldr	r1, [r7, #4]
 8000ec4:	2019      	movs	r0, #25
 8000ec6:	f000 f998 	bl	80011fa <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000eca:	2019      	movs	r0, #25
 8000ecc:	f000 f9b1 	bl	8001232 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000ed0:	4b1e      	ldr	r3, [pc, #120]	; (8000f4c <HAL_InitTick+0x9c>)
 8000ed2:	699b      	ldr	r3, [r3, #24]
 8000ed4:	4a1d      	ldr	r2, [pc, #116]	; (8000f4c <HAL_InitTick+0x9c>)
 8000ed6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000eda:	6193      	str	r3, [r2, #24]
 8000edc:	4b1b      	ldr	r3, [pc, #108]	; (8000f4c <HAL_InitTick+0x9c>)
 8000ede:	699b      	ldr	r3, [r3, #24]
 8000ee0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000ee4:	60fb      	str	r3, [r7, #12]
 8000ee6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000ee8:	f107 0210 	add.w	r2, r7, #16
 8000eec:	f107 0314 	add.w	r3, r7, #20
 8000ef0:	4611      	mov	r1, r2
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	f000 ff32 	bl	8001d5c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000ef8:	f000 ff1c 	bl	8001d34 <HAL_RCC_GetPCLK2Freq>
 8000efc:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000efe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f00:	4a13      	ldr	r2, [pc, #76]	; (8000f50 <HAL_InitTick+0xa0>)
 8000f02:	fba2 2303 	umull	r2, r3, r2, r3
 8000f06:	0c9b      	lsrs	r3, r3, #18
 8000f08:	3b01      	subs	r3, #1
 8000f0a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000f0c:	4b11      	ldr	r3, [pc, #68]	; (8000f54 <HAL_InitTick+0xa4>)
 8000f0e:	4a12      	ldr	r2, [pc, #72]	; (8000f58 <HAL_InitTick+0xa8>)
 8000f10:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000f12:	4b10      	ldr	r3, [pc, #64]	; (8000f54 <HAL_InitTick+0xa4>)
 8000f14:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000f18:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000f1a:	4a0e      	ldr	r2, [pc, #56]	; (8000f54 <HAL_InitTick+0xa4>)
 8000f1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f1e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000f20:	4b0c      	ldr	r3, [pc, #48]	; (8000f54 <HAL_InitTick+0xa4>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f26:	4b0b      	ldr	r3, [pc, #44]	; (8000f54 <HAL_InitTick+0xa4>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000f2c:	4809      	ldr	r0, [pc, #36]	; (8000f54 <HAL_InitTick+0xa4>)
 8000f2e:	f000 ff63 	bl	8001df8 <HAL_TIM_Base_Init>
 8000f32:	4603      	mov	r3, r0
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d104      	bne.n	8000f42 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000f38:	4806      	ldr	r0, [pc, #24]	; (8000f54 <HAL_InitTick+0xa4>)
 8000f3a:	f000 ffad 	bl	8001e98 <HAL_TIM_Base_Start_IT>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	e000      	b.n	8000f44 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8000f42:	2301      	movs	r3, #1
}
 8000f44:	4618      	mov	r0, r3
 8000f46:	3730      	adds	r7, #48	; 0x30
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bd80      	pop	{r7, pc}
 8000f4c:	40021000 	.word	0x40021000
 8000f50:	431bde83 	.word	0x431bde83
 8000f54:	20000154 	.word	0x20000154
 8000f58:	40012c00 	.word	0x40012c00

08000f5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f60:	e7fe      	b.n	8000f60 <NMI_Handler+0x4>

08000f62 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f62:	b480      	push	{r7}
 8000f64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f66:	e7fe      	b.n	8000f66 <HardFault_Handler+0x4>

08000f68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f6c:	e7fe      	b.n	8000f6c <MemManage_Handler+0x4>

08000f6e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f6e:	b480      	push	{r7}
 8000f70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f72:	e7fe      	b.n	8000f72 <BusFault_Handler+0x4>

08000f74 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f78:	e7fe      	b.n	8000f78 <UsageFault_Handler+0x4>

08000f7a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f7a:	b480      	push	{r7}
 8000f7c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f7e:	bf00      	nop
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bc80      	pop	{r7}
 8000f84:	4770      	bx	lr

08000f86 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f86:	b480      	push	{r7}
 8000f88:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f8a:	bf00      	nop
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bc80      	pop	{r7}
 8000f90:	4770      	bx	lr

08000f92 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f92:	b480      	push	{r7}
 8000f94:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f96:	bf00      	nop
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bc80      	pop	{r7}
 8000f9c:	4770      	bx	lr

08000f9e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f9e:	b480      	push	{r7}
 8000fa0:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fa2:	bf00      	nop
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bc80      	pop	{r7}
 8000fa8:	4770      	bx	lr
	...

08000fac <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000fb0:	4802      	ldr	r0, [pc, #8]	; (8000fbc <TIM1_UP_IRQHandler+0x10>)
 8000fb2:	f000 ffbd 	bl	8001f30 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8000fb6:	bf00      	nop
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	20000154 	.word	0x20000154

08000fc0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000fc4:	4802      	ldr	r0, [pc, #8]	; (8000fd0 <TIM2_IRQHandler+0x10>)
 8000fc6:	f000 ffb3 	bl	8001f30 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000fca:	bf00      	nop
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	2000010c 	.word	0x2000010c

08000fd4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fd8:	bf00      	nop
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bc80      	pop	{r7}
 8000fde:	4770      	bx	lr

08000fe0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000fe0:	f7ff fff8 	bl	8000fd4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000fe4:	480b      	ldr	r0, [pc, #44]	; (8001014 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000fe6:	490c      	ldr	r1, [pc, #48]	; (8001018 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000fe8:	4a0c      	ldr	r2, [pc, #48]	; (800101c <LoopFillZerobss+0x16>)
  movs r3, #0
 8000fea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fec:	e002      	b.n	8000ff4 <LoopCopyDataInit>

08000fee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ff0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ff2:	3304      	adds	r3, #4

08000ff4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ff4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ff6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ff8:	d3f9      	bcc.n	8000fee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ffa:	4a09      	ldr	r2, [pc, #36]	; (8001020 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000ffc:	4c09      	ldr	r4, [pc, #36]	; (8001024 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000ffe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001000:	e001      	b.n	8001006 <LoopFillZerobss>

08001002 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001002:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001004:	3204      	adds	r2, #4

08001006 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001006:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001008:	d3fb      	bcc.n	8001002 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800100a:	f001 fadd 	bl	80025c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800100e:	f7ff fd79 	bl	8000b04 <main>
  bx lr
 8001012:	4770      	bx	lr
  ldr r0, =_sdata
 8001014:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001018:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 800101c:	0800266c 	.word	0x0800266c
  ldr r2, =_sbss
 8001020:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001024:	200001a0 	.word	0x200001a0

08001028 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001028:	e7fe      	b.n	8001028 <ADC1_2_IRQHandler>
	...

0800102c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001030:	4b08      	ldr	r3, [pc, #32]	; (8001054 <HAL_Init+0x28>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	4a07      	ldr	r2, [pc, #28]	; (8001054 <HAL_Init+0x28>)
 8001036:	f043 0310 	orr.w	r3, r3, #16
 800103a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800103c:	2003      	movs	r0, #3
 800103e:	f000 f8d1 	bl	80011e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001042:	200f      	movs	r0, #15
 8001044:	f7ff ff34 	bl	8000eb0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001048:	f7ff fedc 	bl	8000e04 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800104c:	2300      	movs	r3, #0
}
 800104e:	4618      	mov	r0, r3
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	40022000 	.word	0x40022000

08001058 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001058:	b480      	push	{r7}
 800105a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800105c:	4b05      	ldr	r3, [pc, #20]	; (8001074 <HAL_IncTick+0x1c>)
 800105e:	781b      	ldrb	r3, [r3, #0]
 8001060:	461a      	mov	r2, r3
 8001062:	4b05      	ldr	r3, [pc, #20]	; (8001078 <HAL_IncTick+0x20>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	4413      	add	r3, r2
 8001068:	4a03      	ldr	r2, [pc, #12]	; (8001078 <HAL_IncTick+0x20>)
 800106a:	6013      	str	r3, [r2, #0]
}
 800106c:	bf00      	nop
 800106e:	46bd      	mov	sp, r7
 8001070:	bc80      	pop	{r7}
 8001072:	4770      	bx	lr
 8001074:	20000070 	.word	0x20000070
 8001078:	2000019c 	.word	0x2000019c

0800107c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800107c:	b480      	push	{r7}
 800107e:	af00      	add	r7, sp, #0
  return uwTick;
 8001080:	4b02      	ldr	r3, [pc, #8]	; (800108c <HAL_GetTick+0x10>)
 8001082:	681b      	ldr	r3, [r3, #0]
}
 8001084:	4618      	mov	r0, r3
 8001086:	46bd      	mov	sp, r7
 8001088:	bc80      	pop	{r7}
 800108a:	4770      	bx	lr
 800108c:	2000019c 	.word	0x2000019c

08001090 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001090:	b480      	push	{r7}
 8001092:	b085      	sub	sp, #20
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	f003 0307 	and.w	r3, r3, #7
 800109e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010a0:	4b0c      	ldr	r3, [pc, #48]	; (80010d4 <__NVIC_SetPriorityGrouping+0x44>)
 80010a2:	68db      	ldr	r3, [r3, #12]
 80010a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010a6:	68ba      	ldr	r2, [r7, #8]
 80010a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010ac:	4013      	ands	r3, r2
 80010ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010b4:	68bb      	ldr	r3, [r7, #8]
 80010b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010c2:	4a04      	ldr	r2, [pc, #16]	; (80010d4 <__NVIC_SetPriorityGrouping+0x44>)
 80010c4:	68bb      	ldr	r3, [r7, #8]
 80010c6:	60d3      	str	r3, [r2, #12]
}
 80010c8:	bf00      	nop
 80010ca:	3714      	adds	r7, #20
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bc80      	pop	{r7}
 80010d0:	4770      	bx	lr
 80010d2:	bf00      	nop
 80010d4:	e000ed00 	.word	0xe000ed00

080010d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010d8:	b480      	push	{r7}
 80010da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010dc:	4b04      	ldr	r3, [pc, #16]	; (80010f0 <__NVIC_GetPriorityGrouping+0x18>)
 80010de:	68db      	ldr	r3, [r3, #12]
 80010e0:	0a1b      	lsrs	r3, r3, #8
 80010e2:	f003 0307 	and.w	r3, r3, #7
}
 80010e6:	4618      	mov	r0, r3
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bc80      	pop	{r7}
 80010ec:	4770      	bx	lr
 80010ee:	bf00      	nop
 80010f0:	e000ed00 	.word	0xe000ed00

080010f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010f4:	b480      	push	{r7}
 80010f6:	b083      	sub	sp, #12
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	4603      	mov	r3, r0
 80010fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001102:	2b00      	cmp	r3, #0
 8001104:	db0b      	blt.n	800111e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001106:	79fb      	ldrb	r3, [r7, #7]
 8001108:	f003 021f 	and.w	r2, r3, #31
 800110c:	4906      	ldr	r1, [pc, #24]	; (8001128 <__NVIC_EnableIRQ+0x34>)
 800110e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001112:	095b      	lsrs	r3, r3, #5
 8001114:	2001      	movs	r0, #1
 8001116:	fa00 f202 	lsl.w	r2, r0, r2
 800111a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800111e:	bf00      	nop
 8001120:	370c      	adds	r7, #12
 8001122:	46bd      	mov	sp, r7
 8001124:	bc80      	pop	{r7}
 8001126:	4770      	bx	lr
 8001128:	e000e100 	.word	0xe000e100

0800112c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800112c:	b480      	push	{r7}
 800112e:	b083      	sub	sp, #12
 8001130:	af00      	add	r7, sp, #0
 8001132:	4603      	mov	r3, r0
 8001134:	6039      	str	r1, [r7, #0]
 8001136:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001138:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800113c:	2b00      	cmp	r3, #0
 800113e:	db0a      	blt.n	8001156 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	b2da      	uxtb	r2, r3
 8001144:	490c      	ldr	r1, [pc, #48]	; (8001178 <__NVIC_SetPriority+0x4c>)
 8001146:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800114a:	0112      	lsls	r2, r2, #4
 800114c:	b2d2      	uxtb	r2, r2
 800114e:	440b      	add	r3, r1
 8001150:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001154:	e00a      	b.n	800116c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	b2da      	uxtb	r2, r3
 800115a:	4908      	ldr	r1, [pc, #32]	; (800117c <__NVIC_SetPriority+0x50>)
 800115c:	79fb      	ldrb	r3, [r7, #7]
 800115e:	f003 030f 	and.w	r3, r3, #15
 8001162:	3b04      	subs	r3, #4
 8001164:	0112      	lsls	r2, r2, #4
 8001166:	b2d2      	uxtb	r2, r2
 8001168:	440b      	add	r3, r1
 800116a:	761a      	strb	r2, [r3, #24]
}
 800116c:	bf00      	nop
 800116e:	370c      	adds	r7, #12
 8001170:	46bd      	mov	sp, r7
 8001172:	bc80      	pop	{r7}
 8001174:	4770      	bx	lr
 8001176:	bf00      	nop
 8001178:	e000e100 	.word	0xe000e100
 800117c:	e000ed00 	.word	0xe000ed00

08001180 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001180:	b480      	push	{r7}
 8001182:	b089      	sub	sp, #36	; 0x24
 8001184:	af00      	add	r7, sp, #0
 8001186:	60f8      	str	r0, [r7, #12]
 8001188:	60b9      	str	r1, [r7, #8]
 800118a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	f003 0307 	and.w	r3, r3, #7
 8001192:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001194:	69fb      	ldr	r3, [r7, #28]
 8001196:	f1c3 0307 	rsb	r3, r3, #7
 800119a:	2b04      	cmp	r3, #4
 800119c:	bf28      	it	cs
 800119e:	2304      	movcs	r3, #4
 80011a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011a2:	69fb      	ldr	r3, [r7, #28]
 80011a4:	3304      	adds	r3, #4
 80011a6:	2b06      	cmp	r3, #6
 80011a8:	d902      	bls.n	80011b0 <NVIC_EncodePriority+0x30>
 80011aa:	69fb      	ldr	r3, [r7, #28]
 80011ac:	3b03      	subs	r3, #3
 80011ae:	e000      	b.n	80011b2 <NVIC_EncodePriority+0x32>
 80011b0:	2300      	movs	r3, #0
 80011b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011b4:	f04f 32ff 	mov.w	r2, #4294967295
 80011b8:	69bb      	ldr	r3, [r7, #24]
 80011ba:	fa02 f303 	lsl.w	r3, r2, r3
 80011be:	43da      	mvns	r2, r3
 80011c0:	68bb      	ldr	r3, [r7, #8]
 80011c2:	401a      	ands	r2, r3
 80011c4:	697b      	ldr	r3, [r7, #20]
 80011c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011c8:	f04f 31ff 	mov.w	r1, #4294967295
 80011cc:	697b      	ldr	r3, [r7, #20]
 80011ce:	fa01 f303 	lsl.w	r3, r1, r3
 80011d2:	43d9      	mvns	r1, r3
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011d8:	4313      	orrs	r3, r2
         );
}
 80011da:	4618      	mov	r0, r3
 80011dc:	3724      	adds	r7, #36	; 0x24
 80011de:	46bd      	mov	sp, r7
 80011e0:	bc80      	pop	{r7}
 80011e2:	4770      	bx	lr

080011e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b082      	sub	sp, #8
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011ec:	6878      	ldr	r0, [r7, #4]
 80011ee:	f7ff ff4f 	bl	8001090 <__NVIC_SetPriorityGrouping>
}
 80011f2:	bf00      	nop
 80011f4:	3708      	adds	r7, #8
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}

080011fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011fa:	b580      	push	{r7, lr}
 80011fc:	b086      	sub	sp, #24
 80011fe:	af00      	add	r7, sp, #0
 8001200:	4603      	mov	r3, r0
 8001202:	60b9      	str	r1, [r7, #8]
 8001204:	607a      	str	r2, [r7, #4]
 8001206:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001208:	2300      	movs	r3, #0
 800120a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800120c:	f7ff ff64 	bl	80010d8 <__NVIC_GetPriorityGrouping>
 8001210:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001212:	687a      	ldr	r2, [r7, #4]
 8001214:	68b9      	ldr	r1, [r7, #8]
 8001216:	6978      	ldr	r0, [r7, #20]
 8001218:	f7ff ffb2 	bl	8001180 <NVIC_EncodePriority>
 800121c:	4602      	mov	r2, r0
 800121e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001222:	4611      	mov	r1, r2
 8001224:	4618      	mov	r0, r3
 8001226:	f7ff ff81 	bl	800112c <__NVIC_SetPriority>
}
 800122a:	bf00      	nop
 800122c:	3718      	adds	r7, #24
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}

08001232 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001232:	b580      	push	{r7, lr}
 8001234:	b082      	sub	sp, #8
 8001236:	af00      	add	r7, sp, #0
 8001238:	4603      	mov	r3, r0
 800123a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800123c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001240:	4618      	mov	r0, r3
 8001242:	f7ff ff57 	bl	80010f4 <__NVIC_EnableIRQ>
}
 8001246:	bf00      	nop
 8001248:	3708      	adds	r7, #8
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}
	...

08001250 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001250:	b480      	push	{r7}
 8001252:	b08b      	sub	sp, #44	; 0x2c
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
 8001258:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800125a:	2300      	movs	r3, #0
 800125c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800125e:	2300      	movs	r3, #0
 8001260:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001262:	e148      	b.n	80014f6 <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001264:	2201      	movs	r2, #1
 8001266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001268:	fa02 f303 	lsl.w	r3, r2, r3
 800126c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	69fa      	ldr	r2, [r7, #28]
 8001274:	4013      	ands	r3, r2
 8001276:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001278:	69ba      	ldr	r2, [r7, #24]
 800127a:	69fb      	ldr	r3, [r7, #28]
 800127c:	429a      	cmp	r2, r3
 800127e:	f040 8137 	bne.w	80014f0 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	685b      	ldr	r3, [r3, #4]
 8001286:	4aa3      	ldr	r2, [pc, #652]	; (8001514 <HAL_GPIO_Init+0x2c4>)
 8001288:	4293      	cmp	r3, r2
 800128a:	d05e      	beq.n	800134a <HAL_GPIO_Init+0xfa>
 800128c:	4aa1      	ldr	r2, [pc, #644]	; (8001514 <HAL_GPIO_Init+0x2c4>)
 800128e:	4293      	cmp	r3, r2
 8001290:	d875      	bhi.n	800137e <HAL_GPIO_Init+0x12e>
 8001292:	4aa1      	ldr	r2, [pc, #644]	; (8001518 <HAL_GPIO_Init+0x2c8>)
 8001294:	4293      	cmp	r3, r2
 8001296:	d058      	beq.n	800134a <HAL_GPIO_Init+0xfa>
 8001298:	4a9f      	ldr	r2, [pc, #636]	; (8001518 <HAL_GPIO_Init+0x2c8>)
 800129a:	4293      	cmp	r3, r2
 800129c:	d86f      	bhi.n	800137e <HAL_GPIO_Init+0x12e>
 800129e:	4a9f      	ldr	r2, [pc, #636]	; (800151c <HAL_GPIO_Init+0x2cc>)
 80012a0:	4293      	cmp	r3, r2
 80012a2:	d052      	beq.n	800134a <HAL_GPIO_Init+0xfa>
 80012a4:	4a9d      	ldr	r2, [pc, #628]	; (800151c <HAL_GPIO_Init+0x2cc>)
 80012a6:	4293      	cmp	r3, r2
 80012a8:	d869      	bhi.n	800137e <HAL_GPIO_Init+0x12e>
 80012aa:	4a9d      	ldr	r2, [pc, #628]	; (8001520 <HAL_GPIO_Init+0x2d0>)
 80012ac:	4293      	cmp	r3, r2
 80012ae:	d04c      	beq.n	800134a <HAL_GPIO_Init+0xfa>
 80012b0:	4a9b      	ldr	r2, [pc, #620]	; (8001520 <HAL_GPIO_Init+0x2d0>)
 80012b2:	4293      	cmp	r3, r2
 80012b4:	d863      	bhi.n	800137e <HAL_GPIO_Init+0x12e>
 80012b6:	4a9b      	ldr	r2, [pc, #620]	; (8001524 <HAL_GPIO_Init+0x2d4>)
 80012b8:	4293      	cmp	r3, r2
 80012ba:	d046      	beq.n	800134a <HAL_GPIO_Init+0xfa>
 80012bc:	4a99      	ldr	r2, [pc, #612]	; (8001524 <HAL_GPIO_Init+0x2d4>)
 80012be:	4293      	cmp	r3, r2
 80012c0:	d85d      	bhi.n	800137e <HAL_GPIO_Init+0x12e>
 80012c2:	2b12      	cmp	r3, #18
 80012c4:	d82a      	bhi.n	800131c <HAL_GPIO_Init+0xcc>
 80012c6:	2b12      	cmp	r3, #18
 80012c8:	d859      	bhi.n	800137e <HAL_GPIO_Init+0x12e>
 80012ca:	a201      	add	r2, pc, #4	; (adr r2, 80012d0 <HAL_GPIO_Init+0x80>)
 80012cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012d0:	0800134b 	.word	0x0800134b
 80012d4:	08001325 	.word	0x08001325
 80012d8:	08001337 	.word	0x08001337
 80012dc:	08001379 	.word	0x08001379
 80012e0:	0800137f 	.word	0x0800137f
 80012e4:	0800137f 	.word	0x0800137f
 80012e8:	0800137f 	.word	0x0800137f
 80012ec:	0800137f 	.word	0x0800137f
 80012f0:	0800137f 	.word	0x0800137f
 80012f4:	0800137f 	.word	0x0800137f
 80012f8:	0800137f 	.word	0x0800137f
 80012fc:	0800137f 	.word	0x0800137f
 8001300:	0800137f 	.word	0x0800137f
 8001304:	0800137f 	.word	0x0800137f
 8001308:	0800137f 	.word	0x0800137f
 800130c:	0800137f 	.word	0x0800137f
 8001310:	0800137f 	.word	0x0800137f
 8001314:	0800132d 	.word	0x0800132d
 8001318:	08001341 	.word	0x08001341
 800131c:	4a82      	ldr	r2, [pc, #520]	; (8001528 <HAL_GPIO_Init+0x2d8>)
 800131e:	4293      	cmp	r3, r2
 8001320:	d013      	beq.n	800134a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001322:	e02c      	b.n	800137e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	68db      	ldr	r3, [r3, #12]
 8001328:	623b      	str	r3, [r7, #32]
          break;
 800132a:	e029      	b.n	8001380 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	68db      	ldr	r3, [r3, #12]
 8001330:	3304      	adds	r3, #4
 8001332:	623b      	str	r3, [r7, #32]
          break;
 8001334:	e024      	b.n	8001380 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	68db      	ldr	r3, [r3, #12]
 800133a:	3308      	adds	r3, #8
 800133c:	623b      	str	r3, [r7, #32]
          break;
 800133e:	e01f      	b.n	8001380 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	68db      	ldr	r3, [r3, #12]
 8001344:	330c      	adds	r3, #12
 8001346:	623b      	str	r3, [r7, #32]
          break;
 8001348:	e01a      	b.n	8001380 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	689b      	ldr	r3, [r3, #8]
 800134e:	2b00      	cmp	r3, #0
 8001350:	d102      	bne.n	8001358 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001352:	2304      	movs	r3, #4
 8001354:	623b      	str	r3, [r7, #32]
          break;
 8001356:	e013      	b.n	8001380 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	689b      	ldr	r3, [r3, #8]
 800135c:	2b01      	cmp	r3, #1
 800135e:	d105      	bne.n	800136c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001360:	2308      	movs	r3, #8
 8001362:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	69fa      	ldr	r2, [r7, #28]
 8001368:	611a      	str	r2, [r3, #16]
          break;
 800136a:	e009      	b.n	8001380 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800136c:	2308      	movs	r3, #8
 800136e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	69fa      	ldr	r2, [r7, #28]
 8001374:	615a      	str	r2, [r3, #20]
          break;
 8001376:	e003      	b.n	8001380 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001378:	2300      	movs	r3, #0
 800137a:	623b      	str	r3, [r7, #32]
          break;
 800137c:	e000      	b.n	8001380 <HAL_GPIO_Init+0x130>
          break;
 800137e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001380:	69bb      	ldr	r3, [r7, #24]
 8001382:	2bff      	cmp	r3, #255	; 0xff
 8001384:	d801      	bhi.n	800138a <HAL_GPIO_Init+0x13a>
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	e001      	b.n	800138e <HAL_GPIO_Init+0x13e>
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	3304      	adds	r3, #4
 800138e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001390:	69bb      	ldr	r3, [r7, #24]
 8001392:	2bff      	cmp	r3, #255	; 0xff
 8001394:	d802      	bhi.n	800139c <HAL_GPIO_Init+0x14c>
 8001396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001398:	009b      	lsls	r3, r3, #2
 800139a:	e002      	b.n	80013a2 <HAL_GPIO_Init+0x152>
 800139c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800139e:	3b08      	subs	r3, #8
 80013a0:	009b      	lsls	r3, r3, #2
 80013a2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80013a4:	697b      	ldr	r3, [r7, #20]
 80013a6:	681a      	ldr	r2, [r3, #0]
 80013a8:	210f      	movs	r1, #15
 80013aa:	693b      	ldr	r3, [r7, #16]
 80013ac:	fa01 f303 	lsl.w	r3, r1, r3
 80013b0:	43db      	mvns	r3, r3
 80013b2:	401a      	ands	r2, r3
 80013b4:	6a39      	ldr	r1, [r7, #32]
 80013b6:	693b      	ldr	r3, [r7, #16]
 80013b8:	fa01 f303 	lsl.w	r3, r1, r3
 80013bc:	431a      	orrs	r2, r3
 80013be:	697b      	ldr	r3, [r7, #20]
 80013c0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80013c2:	683b      	ldr	r3, [r7, #0]
 80013c4:	685b      	ldr	r3, [r3, #4]
 80013c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	f000 8090 	beq.w	80014f0 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80013d0:	4b56      	ldr	r3, [pc, #344]	; (800152c <HAL_GPIO_Init+0x2dc>)
 80013d2:	699b      	ldr	r3, [r3, #24]
 80013d4:	4a55      	ldr	r2, [pc, #340]	; (800152c <HAL_GPIO_Init+0x2dc>)
 80013d6:	f043 0301 	orr.w	r3, r3, #1
 80013da:	6193      	str	r3, [r2, #24]
 80013dc:	4b53      	ldr	r3, [pc, #332]	; (800152c <HAL_GPIO_Init+0x2dc>)
 80013de:	699b      	ldr	r3, [r3, #24]
 80013e0:	f003 0301 	and.w	r3, r3, #1
 80013e4:	60bb      	str	r3, [r7, #8]
 80013e6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80013e8:	4a51      	ldr	r2, [pc, #324]	; (8001530 <HAL_GPIO_Init+0x2e0>)
 80013ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013ec:	089b      	lsrs	r3, r3, #2
 80013ee:	3302      	adds	r3, #2
 80013f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013f4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80013f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013f8:	f003 0303 	and.w	r3, r3, #3
 80013fc:	009b      	lsls	r3, r3, #2
 80013fe:	220f      	movs	r2, #15
 8001400:	fa02 f303 	lsl.w	r3, r2, r3
 8001404:	43db      	mvns	r3, r3
 8001406:	68fa      	ldr	r2, [r7, #12]
 8001408:	4013      	ands	r3, r2
 800140a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	4a49      	ldr	r2, [pc, #292]	; (8001534 <HAL_GPIO_Init+0x2e4>)
 8001410:	4293      	cmp	r3, r2
 8001412:	d00d      	beq.n	8001430 <HAL_GPIO_Init+0x1e0>
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	4a48      	ldr	r2, [pc, #288]	; (8001538 <HAL_GPIO_Init+0x2e8>)
 8001418:	4293      	cmp	r3, r2
 800141a:	d007      	beq.n	800142c <HAL_GPIO_Init+0x1dc>
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	4a47      	ldr	r2, [pc, #284]	; (800153c <HAL_GPIO_Init+0x2ec>)
 8001420:	4293      	cmp	r3, r2
 8001422:	d101      	bne.n	8001428 <HAL_GPIO_Init+0x1d8>
 8001424:	2302      	movs	r3, #2
 8001426:	e004      	b.n	8001432 <HAL_GPIO_Init+0x1e2>
 8001428:	2303      	movs	r3, #3
 800142a:	e002      	b.n	8001432 <HAL_GPIO_Init+0x1e2>
 800142c:	2301      	movs	r3, #1
 800142e:	e000      	b.n	8001432 <HAL_GPIO_Init+0x1e2>
 8001430:	2300      	movs	r3, #0
 8001432:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001434:	f002 0203 	and.w	r2, r2, #3
 8001438:	0092      	lsls	r2, r2, #2
 800143a:	4093      	lsls	r3, r2
 800143c:	68fa      	ldr	r2, [r7, #12]
 800143e:	4313      	orrs	r3, r2
 8001440:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001442:	493b      	ldr	r1, [pc, #236]	; (8001530 <HAL_GPIO_Init+0x2e0>)
 8001444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001446:	089b      	lsrs	r3, r3, #2
 8001448:	3302      	adds	r3, #2
 800144a:	68fa      	ldr	r2, [r7, #12]
 800144c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	685b      	ldr	r3, [r3, #4]
 8001454:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001458:	2b00      	cmp	r3, #0
 800145a:	d006      	beq.n	800146a <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800145c:	4b38      	ldr	r3, [pc, #224]	; (8001540 <HAL_GPIO_Init+0x2f0>)
 800145e:	689a      	ldr	r2, [r3, #8]
 8001460:	4937      	ldr	r1, [pc, #220]	; (8001540 <HAL_GPIO_Init+0x2f0>)
 8001462:	69bb      	ldr	r3, [r7, #24]
 8001464:	4313      	orrs	r3, r2
 8001466:	608b      	str	r3, [r1, #8]
 8001468:	e006      	b.n	8001478 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800146a:	4b35      	ldr	r3, [pc, #212]	; (8001540 <HAL_GPIO_Init+0x2f0>)
 800146c:	689a      	ldr	r2, [r3, #8]
 800146e:	69bb      	ldr	r3, [r7, #24]
 8001470:	43db      	mvns	r3, r3
 8001472:	4933      	ldr	r1, [pc, #204]	; (8001540 <HAL_GPIO_Init+0x2f0>)
 8001474:	4013      	ands	r3, r2
 8001476:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	685b      	ldr	r3, [r3, #4]
 800147c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001480:	2b00      	cmp	r3, #0
 8001482:	d006      	beq.n	8001492 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001484:	4b2e      	ldr	r3, [pc, #184]	; (8001540 <HAL_GPIO_Init+0x2f0>)
 8001486:	68da      	ldr	r2, [r3, #12]
 8001488:	492d      	ldr	r1, [pc, #180]	; (8001540 <HAL_GPIO_Init+0x2f0>)
 800148a:	69bb      	ldr	r3, [r7, #24]
 800148c:	4313      	orrs	r3, r2
 800148e:	60cb      	str	r3, [r1, #12]
 8001490:	e006      	b.n	80014a0 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001492:	4b2b      	ldr	r3, [pc, #172]	; (8001540 <HAL_GPIO_Init+0x2f0>)
 8001494:	68da      	ldr	r2, [r3, #12]
 8001496:	69bb      	ldr	r3, [r7, #24]
 8001498:	43db      	mvns	r3, r3
 800149a:	4929      	ldr	r1, [pc, #164]	; (8001540 <HAL_GPIO_Init+0x2f0>)
 800149c:	4013      	ands	r3, r2
 800149e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	685b      	ldr	r3, [r3, #4]
 80014a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d006      	beq.n	80014ba <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80014ac:	4b24      	ldr	r3, [pc, #144]	; (8001540 <HAL_GPIO_Init+0x2f0>)
 80014ae:	685a      	ldr	r2, [r3, #4]
 80014b0:	4923      	ldr	r1, [pc, #140]	; (8001540 <HAL_GPIO_Init+0x2f0>)
 80014b2:	69bb      	ldr	r3, [r7, #24]
 80014b4:	4313      	orrs	r3, r2
 80014b6:	604b      	str	r3, [r1, #4]
 80014b8:	e006      	b.n	80014c8 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80014ba:	4b21      	ldr	r3, [pc, #132]	; (8001540 <HAL_GPIO_Init+0x2f0>)
 80014bc:	685a      	ldr	r2, [r3, #4]
 80014be:	69bb      	ldr	r3, [r7, #24]
 80014c0:	43db      	mvns	r3, r3
 80014c2:	491f      	ldr	r1, [pc, #124]	; (8001540 <HAL_GPIO_Init+0x2f0>)
 80014c4:	4013      	ands	r3, r2
 80014c6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	685b      	ldr	r3, [r3, #4]
 80014cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d006      	beq.n	80014e2 <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80014d4:	4b1a      	ldr	r3, [pc, #104]	; (8001540 <HAL_GPIO_Init+0x2f0>)
 80014d6:	681a      	ldr	r2, [r3, #0]
 80014d8:	4919      	ldr	r1, [pc, #100]	; (8001540 <HAL_GPIO_Init+0x2f0>)
 80014da:	69bb      	ldr	r3, [r7, #24]
 80014dc:	4313      	orrs	r3, r2
 80014de:	600b      	str	r3, [r1, #0]
 80014e0:	e006      	b.n	80014f0 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80014e2:	4b17      	ldr	r3, [pc, #92]	; (8001540 <HAL_GPIO_Init+0x2f0>)
 80014e4:	681a      	ldr	r2, [r3, #0]
 80014e6:	69bb      	ldr	r3, [r7, #24]
 80014e8:	43db      	mvns	r3, r3
 80014ea:	4915      	ldr	r1, [pc, #84]	; (8001540 <HAL_GPIO_Init+0x2f0>)
 80014ec:	4013      	ands	r3, r2
 80014ee:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80014f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014f2:	3301      	adds	r3, #1
 80014f4:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	681a      	ldr	r2, [r3, #0]
 80014fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014fc:	fa22 f303 	lsr.w	r3, r2, r3
 8001500:	2b00      	cmp	r3, #0
 8001502:	f47f aeaf 	bne.w	8001264 <HAL_GPIO_Init+0x14>
  }
}
 8001506:	bf00      	nop
 8001508:	bf00      	nop
 800150a:	372c      	adds	r7, #44	; 0x2c
 800150c:	46bd      	mov	sp, r7
 800150e:	bc80      	pop	{r7}
 8001510:	4770      	bx	lr
 8001512:	bf00      	nop
 8001514:	10320000 	.word	0x10320000
 8001518:	10310000 	.word	0x10310000
 800151c:	10220000 	.word	0x10220000
 8001520:	10210000 	.word	0x10210000
 8001524:	10120000 	.word	0x10120000
 8001528:	10110000 	.word	0x10110000
 800152c:	40021000 	.word	0x40021000
 8001530:	40010000 	.word	0x40010000
 8001534:	40010800 	.word	0x40010800
 8001538:	40010c00 	.word	0x40010c00
 800153c:	40011000 	.word	0x40011000
 8001540:	40010400 	.word	0x40010400

08001544 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001544:	b480      	push	{r7}
 8001546:	b085      	sub	sp, #20
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
 800154c:	460b      	mov	r3, r1
 800154e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	689a      	ldr	r2, [r3, #8]
 8001554:	887b      	ldrh	r3, [r7, #2]
 8001556:	4013      	ands	r3, r2
 8001558:	2b00      	cmp	r3, #0
 800155a:	d002      	beq.n	8001562 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800155c:	2301      	movs	r3, #1
 800155e:	73fb      	strb	r3, [r7, #15]
 8001560:	e001      	b.n	8001566 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001562:	2300      	movs	r3, #0
 8001564:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001566:	7bfb      	ldrb	r3, [r7, #15]
}
 8001568:	4618      	mov	r0, r3
 800156a:	3714      	adds	r7, #20
 800156c:	46bd      	mov	sp, r7
 800156e:	bc80      	pop	{r7}
 8001570:	4770      	bx	lr

08001572 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001572:	b480      	push	{r7}
 8001574:	b083      	sub	sp, #12
 8001576:	af00      	add	r7, sp, #0
 8001578:	6078      	str	r0, [r7, #4]
 800157a:	460b      	mov	r3, r1
 800157c:	807b      	strh	r3, [r7, #2]
 800157e:	4613      	mov	r3, r2
 8001580:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001582:	787b      	ldrb	r3, [r7, #1]
 8001584:	2b00      	cmp	r3, #0
 8001586:	d003      	beq.n	8001590 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001588:	887a      	ldrh	r2, [r7, #2]
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800158e:	e003      	b.n	8001598 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001590:	887b      	ldrh	r3, [r7, #2]
 8001592:	041a      	lsls	r2, r3, #16
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	611a      	str	r2, [r3, #16]
}
 8001598:	bf00      	nop
 800159a:	370c      	adds	r7, #12
 800159c:	46bd      	mov	sp, r7
 800159e:	bc80      	pop	{r7}
 80015a0:	4770      	bx	lr
	...

080015a4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b086      	sub	sp, #24
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d101      	bne.n	80015b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80015b2:	2301      	movs	r3, #1
 80015b4:	e26c      	b.n	8001a90 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f003 0301 	and.w	r3, r3, #1
 80015be:	2b00      	cmp	r3, #0
 80015c0:	f000 8087 	beq.w	80016d2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80015c4:	4b92      	ldr	r3, [pc, #584]	; (8001810 <HAL_RCC_OscConfig+0x26c>)
 80015c6:	685b      	ldr	r3, [r3, #4]
 80015c8:	f003 030c 	and.w	r3, r3, #12
 80015cc:	2b04      	cmp	r3, #4
 80015ce:	d00c      	beq.n	80015ea <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80015d0:	4b8f      	ldr	r3, [pc, #572]	; (8001810 <HAL_RCC_OscConfig+0x26c>)
 80015d2:	685b      	ldr	r3, [r3, #4]
 80015d4:	f003 030c 	and.w	r3, r3, #12
 80015d8:	2b08      	cmp	r3, #8
 80015da:	d112      	bne.n	8001602 <HAL_RCC_OscConfig+0x5e>
 80015dc:	4b8c      	ldr	r3, [pc, #560]	; (8001810 <HAL_RCC_OscConfig+0x26c>)
 80015de:	685b      	ldr	r3, [r3, #4]
 80015e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015e8:	d10b      	bne.n	8001602 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015ea:	4b89      	ldr	r3, [pc, #548]	; (8001810 <HAL_RCC_OscConfig+0x26c>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d06c      	beq.n	80016d0 <HAL_RCC_OscConfig+0x12c>
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	685b      	ldr	r3, [r3, #4]
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d168      	bne.n	80016d0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80015fe:	2301      	movs	r3, #1
 8001600:	e246      	b.n	8001a90 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	685b      	ldr	r3, [r3, #4]
 8001606:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800160a:	d106      	bne.n	800161a <HAL_RCC_OscConfig+0x76>
 800160c:	4b80      	ldr	r3, [pc, #512]	; (8001810 <HAL_RCC_OscConfig+0x26c>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	4a7f      	ldr	r2, [pc, #508]	; (8001810 <HAL_RCC_OscConfig+0x26c>)
 8001612:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001616:	6013      	str	r3, [r2, #0]
 8001618:	e02e      	b.n	8001678 <HAL_RCC_OscConfig+0xd4>
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	685b      	ldr	r3, [r3, #4]
 800161e:	2b00      	cmp	r3, #0
 8001620:	d10c      	bne.n	800163c <HAL_RCC_OscConfig+0x98>
 8001622:	4b7b      	ldr	r3, [pc, #492]	; (8001810 <HAL_RCC_OscConfig+0x26c>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	4a7a      	ldr	r2, [pc, #488]	; (8001810 <HAL_RCC_OscConfig+0x26c>)
 8001628:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800162c:	6013      	str	r3, [r2, #0]
 800162e:	4b78      	ldr	r3, [pc, #480]	; (8001810 <HAL_RCC_OscConfig+0x26c>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	4a77      	ldr	r2, [pc, #476]	; (8001810 <HAL_RCC_OscConfig+0x26c>)
 8001634:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001638:	6013      	str	r3, [r2, #0]
 800163a:	e01d      	b.n	8001678 <HAL_RCC_OscConfig+0xd4>
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	685b      	ldr	r3, [r3, #4]
 8001640:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001644:	d10c      	bne.n	8001660 <HAL_RCC_OscConfig+0xbc>
 8001646:	4b72      	ldr	r3, [pc, #456]	; (8001810 <HAL_RCC_OscConfig+0x26c>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	4a71      	ldr	r2, [pc, #452]	; (8001810 <HAL_RCC_OscConfig+0x26c>)
 800164c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001650:	6013      	str	r3, [r2, #0]
 8001652:	4b6f      	ldr	r3, [pc, #444]	; (8001810 <HAL_RCC_OscConfig+0x26c>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	4a6e      	ldr	r2, [pc, #440]	; (8001810 <HAL_RCC_OscConfig+0x26c>)
 8001658:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800165c:	6013      	str	r3, [r2, #0]
 800165e:	e00b      	b.n	8001678 <HAL_RCC_OscConfig+0xd4>
 8001660:	4b6b      	ldr	r3, [pc, #428]	; (8001810 <HAL_RCC_OscConfig+0x26c>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	4a6a      	ldr	r2, [pc, #424]	; (8001810 <HAL_RCC_OscConfig+0x26c>)
 8001666:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800166a:	6013      	str	r3, [r2, #0]
 800166c:	4b68      	ldr	r3, [pc, #416]	; (8001810 <HAL_RCC_OscConfig+0x26c>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	4a67      	ldr	r2, [pc, #412]	; (8001810 <HAL_RCC_OscConfig+0x26c>)
 8001672:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001676:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	685b      	ldr	r3, [r3, #4]
 800167c:	2b00      	cmp	r3, #0
 800167e:	d013      	beq.n	80016a8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001680:	f7ff fcfc 	bl	800107c <HAL_GetTick>
 8001684:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001686:	e008      	b.n	800169a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001688:	f7ff fcf8 	bl	800107c <HAL_GetTick>
 800168c:	4602      	mov	r2, r0
 800168e:	693b      	ldr	r3, [r7, #16]
 8001690:	1ad3      	subs	r3, r2, r3
 8001692:	2b64      	cmp	r3, #100	; 0x64
 8001694:	d901      	bls.n	800169a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001696:	2303      	movs	r3, #3
 8001698:	e1fa      	b.n	8001a90 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800169a:	4b5d      	ldr	r3, [pc, #372]	; (8001810 <HAL_RCC_OscConfig+0x26c>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d0f0      	beq.n	8001688 <HAL_RCC_OscConfig+0xe4>
 80016a6:	e014      	b.n	80016d2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016a8:	f7ff fce8 	bl	800107c <HAL_GetTick>
 80016ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016ae:	e008      	b.n	80016c2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016b0:	f7ff fce4 	bl	800107c <HAL_GetTick>
 80016b4:	4602      	mov	r2, r0
 80016b6:	693b      	ldr	r3, [r7, #16]
 80016b8:	1ad3      	subs	r3, r2, r3
 80016ba:	2b64      	cmp	r3, #100	; 0x64
 80016bc:	d901      	bls.n	80016c2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80016be:	2303      	movs	r3, #3
 80016c0:	e1e6      	b.n	8001a90 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016c2:	4b53      	ldr	r3, [pc, #332]	; (8001810 <HAL_RCC_OscConfig+0x26c>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d1f0      	bne.n	80016b0 <HAL_RCC_OscConfig+0x10c>
 80016ce:	e000      	b.n	80016d2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f003 0302 	and.w	r3, r3, #2
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d063      	beq.n	80017a6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80016de:	4b4c      	ldr	r3, [pc, #304]	; (8001810 <HAL_RCC_OscConfig+0x26c>)
 80016e0:	685b      	ldr	r3, [r3, #4]
 80016e2:	f003 030c 	and.w	r3, r3, #12
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d00b      	beq.n	8001702 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80016ea:	4b49      	ldr	r3, [pc, #292]	; (8001810 <HAL_RCC_OscConfig+0x26c>)
 80016ec:	685b      	ldr	r3, [r3, #4]
 80016ee:	f003 030c 	and.w	r3, r3, #12
 80016f2:	2b08      	cmp	r3, #8
 80016f4:	d11c      	bne.n	8001730 <HAL_RCC_OscConfig+0x18c>
 80016f6:	4b46      	ldr	r3, [pc, #280]	; (8001810 <HAL_RCC_OscConfig+0x26c>)
 80016f8:	685b      	ldr	r3, [r3, #4]
 80016fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d116      	bne.n	8001730 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001702:	4b43      	ldr	r3, [pc, #268]	; (8001810 <HAL_RCC_OscConfig+0x26c>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f003 0302 	and.w	r3, r3, #2
 800170a:	2b00      	cmp	r3, #0
 800170c:	d005      	beq.n	800171a <HAL_RCC_OscConfig+0x176>
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	691b      	ldr	r3, [r3, #16]
 8001712:	2b01      	cmp	r3, #1
 8001714:	d001      	beq.n	800171a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001716:	2301      	movs	r3, #1
 8001718:	e1ba      	b.n	8001a90 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800171a:	4b3d      	ldr	r3, [pc, #244]	; (8001810 <HAL_RCC_OscConfig+0x26c>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	695b      	ldr	r3, [r3, #20]
 8001726:	00db      	lsls	r3, r3, #3
 8001728:	4939      	ldr	r1, [pc, #228]	; (8001810 <HAL_RCC_OscConfig+0x26c>)
 800172a:	4313      	orrs	r3, r2
 800172c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800172e:	e03a      	b.n	80017a6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	691b      	ldr	r3, [r3, #16]
 8001734:	2b00      	cmp	r3, #0
 8001736:	d020      	beq.n	800177a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001738:	4b36      	ldr	r3, [pc, #216]	; (8001814 <HAL_RCC_OscConfig+0x270>)
 800173a:	2201      	movs	r2, #1
 800173c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800173e:	f7ff fc9d 	bl	800107c <HAL_GetTick>
 8001742:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001744:	e008      	b.n	8001758 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001746:	f7ff fc99 	bl	800107c <HAL_GetTick>
 800174a:	4602      	mov	r2, r0
 800174c:	693b      	ldr	r3, [r7, #16]
 800174e:	1ad3      	subs	r3, r2, r3
 8001750:	2b02      	cmp	r3, #2
 8001752:	d901      	bls.n	8001758 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001754:	2303      	movs	r3, #3
 8001756:	e19b      	b.n	8001a90 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001758:	4b2d      	ldr	r3, [pc, #180]	; (8001810 <HAL_RCC_OscConfig+0x26c>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f003 0302 	and.w	r3, r3, #2
 8001760:	2b00      	cmp	r3, #0
 8001762:	d0f0      	beq.n	8001746 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001764:	4b2a      	ldr	r3, [pc, #168]	; (8001810 <HAL_RCC_OscConfig+0x26c>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	695b      	ldr	r3, [r3, #20]
 8001770:	00db      	lsls	r3, r3, #3
 8001772:	4927      	ldr	r1, [pc, #156]	; (8001810 <HAL_RCC_OscConfig+0x26c>)
 8001774:	4313      	orrs	r3, r2
 8001776:	600b      	str	r3, [r1, #0]
 8001778:	e015      	b.n	80017a6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800177a:	4b26      	ldr	r3, [pc, #152]	; (8001814 <HAL_RCC_OscConfig+0x270>)
 800177c:	2200      	movs	r2, #0
 800177e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001780:	f7ff fc7c 	bl	800107c <HAL_GetTick>
 8001784:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001786:	e008      	b.n	800179a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001788:	f7ff fc78 	bl	800107c <HAL_GetTick>
 800178c:	4602      	mov	r2, r0
 800178e:	693b      	ldr	r3, [r7, #16]
 8001790:	1ad3      	subs	r3, r2, r3
 8001792:	2b02      	cmp	r3, #2
 8001794:	d901      	bls.n	800179a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001796:	2303      	movs	r3, #3
 8001798:	e17a      	b.n	8001a90 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800179a:	4b1d      	ldr	r3, [pc, #116]	; (8001810 <HAL_RCC_OscConfig+0x26c>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f003 0302 	and.w	r3, r3, #2
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d1f0      	bne.n	8001788 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f003 0308 	and.w	r3, r3, #8
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d03a      	beq.n	8001828 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	699b      	ldr	r3, [r3, #24]
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d019      	beq.n	80017ee <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80017ba:	4b17      	ldr	r3, [pc, #92]	; (8001818 <HAL_RCC_OscConfig+0x274>)
 80017bc:	2201      	movs	r2, #1
 80017be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017c0:	f7ff fc5c 	bl	800107c <HAL_GetTick>
 80017c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017c6:	e008      	b.n	80017da <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017c8:	f7ff fc58 	bl	800107c <HAL_GetTick>
 80017cc:	4602      	mov	r2, r0
 80017ce:	693b      	ldr	r3, [r7, #16]
 80017d0:	1ad3      	subs	r3, r2, r3
 80017d2:	2b02      	cmp	r3, #2
 80017d4:	d901      	bls.n	80017da <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80017d6:	2303      	movs	r3, #3
 80017d8:	e15a      	b.n	8001a90 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017da:	4b0d      	ldr	r3, [pc, #52]	; (8001810 <HAL_RCC_OscConfig+0x26c>)
 80017dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017de:	f003 0302 	and.w	r3, r3, #2
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d0f0      	beq.n	80017c8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80017e6:	2001      	movs	r0, #1
 80017e8:	f000 fae8 	bl	8001dbc <RCC_Delay>
 80017ec:	e01c      	b.n	8001828 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017ee:	4b0a      	ldr	r3, [pc, #40]	; (8001818 <HAL_RCC_OscConfig+0x274>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017f4:	f7ff fc42 	bl	800107c <HAL_GetTick>
 80017f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017fa:	e00f      	b.n	800181c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017fc:	f7ff fc3e 	bl	800107c <HAL_GetTick>
 8001800:	4602      	mov	r2, r0
 8001802:	693b      	ldr	r3, [r7, #16]
 8001804:	1ad3      	subs	r3, r2, r3
 8001806:	2b02      	cmp	r3, #2
 8001808:	d908      	bls.n	800181c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800180a:	2303      	movs	r3, #3
 800180c:	e140      	b.n	8001a90 <HAL_RCC_OscConfig+0x4ec>
 800180e:	bf00      	nop
 8001810:	40021000 	.word	0x40021000
 8001814:	42420000 	.word	0x42420000
 8001818:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800181c:	4b9e      	ldr	r3, [pc, #632]	; (8001a98 <HAL_RCC_OscConfig+0x4f4>)
 800181e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001820:	f003 0302 	and.w	r3, r3, #2
 8001824:	2b00      	cmp	r3, #0
 8001826:	d1e9      	bne.n	80017fc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f003 0304 	and.w	r3, r3, #4
 8001830:	2b00      	cmp	r3, #0
 8001832:	f000 80a6 	beq.w	8001982 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001836:	2300      	movs	r3, #0
 8001838:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800183a:	4b97      	ldr	r3, [pc, #604]	; (8001a98 <HAL_RCC_OscConfig+0x4f4>)
 800183c:	69db      	ldr	r3, [r3, #28]
 800183e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001842:	2b00      	cmp	r3, #0
 8001844:	d10d      	bne.n	8001862 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001846:	4b94      	ldr	r3, [pc, #592]	; (8001a98 <HAL_RCC_OscConfig+0x4f4>)
 8001848:	69db      	ldr	r3, [r3, #28]
 800184a:	4a93      	ldr	r2, [pc, #588]	; (8001a98 <HAL_RCC_OscConfig+0x4f4>)
 800184c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001850:	61d3      	str	r3, [r2, #28]
 8001852:	4b91      	ldr	r3, [pc, #580]	; (8001a98 <HAL_RCC_OscConfig+0x4f4>)
 8001854:	69db      	ldr	r3, [r3, #28]
 8001856:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800185a:	60bb      	str	r3, [r7, #8]
 800185c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800185e:	2301      	movs	r3, #1
 8001860:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001862:	4b8e      	ldr	r3, [pc, #568]	; (8001a9c <HAL_RCC_OscConfig+0x4f8>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800186a:	2b00      	cmp	r3, #0
 800186c:	d118      	bne.n	80018a0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800186e:	4b8b      	ldr	r3, [pc, #556]	; (8001a9c <HAL_RCC_OscConfig+0x4f8>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	4a8a      	ldr	r2, [pc, #552]	; (8001a9c <HAL_RCC_OscConfig+0x4f8>)
 8001874:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001878:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800187a:	f7ff fbff 	bl	800107c <HAL_GetTick>
 800187e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001880:	e008      	b.n	8001894 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001882:	f7ff fbfb 	bl	800107c <HAL_GetTick>
 8001886:	4602      	mov	r2, r0
 8001888:	693b      	ldr	r3, [r7, #16]
 800188a:	1ad3      	subs	r3, r2, r3
 800188c:	2b64      	cmp	r3, #100	; 0x64
 800188e:	d901      	bls.n	8001894 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001890:	2303      	movs	r3, #3
 8001892:	e0fd      	b.n	8001a90 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001894:	4b81      	ldr	r3, [pc, #516]	; (8001a9c <HAL_RCC_OscConfig+0x4f8>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800189c:	2b00      	cmp	r3, #0
 800189e:	d0f0      	beq.n	8001882 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	68db      	ldr	r3, [r3, #12]
 80018a4:	2b01      	cmp	r3, #1
 80018a6:	d106      	bne.n	80018b6 <HAL_RCC_OscConfig+0x312>
 80018a8:	4b7b      	ldr	r3, [pc, #492]	; (8001a98 <HAL_RCC_OscConfig+0x4f4>)
 80018aa:	6a1b      	ldr	r3, [r3, #32]
 80018ac:	4a7a      	ldr	r2, [pc, #488]	; (8001a98 <HAL_RCC_OscConfig+0x4f4>)
 80018ae:	f043 0301 	orr.w	r3, r3, #1
 80018b2:	6213      	str	r3, [r2, #32]
 80018b4:	e02d      	b.n	8001912 <HAL_RCC_OscConfig+0x36e>
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	68db      	ldr	r3, [r3, #12]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d10c      	bne.n	80018d8 <HAL_RCC_OscConfig+0x334>
 80018be:	4b76      	ldr	r3, [pc, #472]	; (8001a98 <HAL_RCC_OscConfig+0x4f4>)
 80018c0:	6a1b      	ldr	r3, [r3, #32]
 80018c2:	4a75      	ldr	r2, [pc, #468]	; (8001a98 <HAL_RCC_OscConfig+0x4f4>)
 80018c4:	f023 0301 	bic.w	r3, r3, #1
 80018c8:	6213      	str	r3, [r2, #32]
 80018ca:	4b73      	ldr	r3, [pc, #460]	; (8001a98 <HAL_RCC_OscConfig+0x4f4>)
 80018cc:	6a1b      	ldr	r3, [r3, #32]
 80018ce:	4a72      	ldr	r2, [pc, #456]	; (8001a98 <HAL_RCC_OscConfig+0x4f4>)
 80018d0:	f023 0304 	bic.w	r3, r3, #4
 80018d4:	6213      	str	r3, [r2, #32]
 80018d6:	e01c      	b.n	8001912 <HAL_RCC_OscConfig+0x36e>
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	68db      	ldr	r3, [r3, #12]
 80018dc:	2b05      	cmp	r3, #5
 80018de:	d10c      	bne.n	80018fa <HAL_RCC_OscConfig+0x356>
 80018e0:	4b6d      	ldr	r3, [pc, #436]	; (8001a98 <HAL_RCC_OscConfig+0x4f4>)
 80018e2:	6a1b      	ldr	r3, [r3, #32]
 80018e4:	4a6c      	ldr	r2, [pc, #432]	; (8001a98 <HAL_RCC_OscConfig+0x4f4>)
 80018e6:	f043 0304 	orr.w	r3, r3, #4
 80018ea:	6213      	str	r3, [r2, #32]
 80018ec:	4b6a      	ldr	r3, [pc, #424]	; (8001a98 <HAL_RCC_OscConfig+0x4f4>)
 80018ee:	6a1b      	ldr	r3, [r3, #32]
 80018f0:	4a69      	ldr	r2, [pc, #420]	; (8001a98 <HAL_RCC_OscConfig+0x4f4>)
 80018f2:	f043 0301 	orr.w	r3, r3, #1
 80018f6:	6213      	str	r3, [r2, #32]
 80018f8:	e00b      	b.n	8001912 <HAL_RCC_OscConfig+0x36e>
 80018fa:	4b67      	ldr	r3, [pc, #412]	; (8001a98 <HAL_RCC_OscConfig+0x4f4>)
 80018fc:	6a1b      	ldr	r3, [r3, #32]
 80018fe:	4a66      	ldr	r2, [pc, #408]	; (8001a98 <HAL_RCC_OscConfig+0x4f4>)
 8001900:	f023 0301 	bic.w	r3, r3, #1
 8001904:	6213      	str	r3, [r2, #32]
 8001906:	4b64      	ldr	r3, [pc, #400]	; (8001a98 <HAL_RCC_OscConfig+0x4f4>)
 8001908:	6a1b      	ldr	r3, [r3, #32]
 800190a:	4a63      	ldr	r2, [pc, #396]	; (8001a98 <HAL_RCC_OscConfig+0x4f4>)
 800190c:	f023 0304 	bic.w	r3, r3, #4
 8001910:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	68db      	ldr	r3, [r3, #12]
 8001916:	2b00      	cmp	r3, #0
 8001918:	d015      	beq.n	8001946 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800191a:	f7ff fbaf 	bl	800107c <HAL_GetTick>
 800191e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001920:	e00a      	b.n	8001938 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001922:	f7ff fbab 	bl	800107c <HAL_GetTick>
 8001926:	4602      	mov	r2, r0
 8001928:	693b      	ldr	r3, [r7, #16]
 800192a:	1ad3      	subs	r3, r2, r3
 800192c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001930:	4293      	cmp	r3, r2
 8001932:	d901      	bls.n	8001938 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001934:	2303      	movs	r3, #3
 8001936:	e0ab      	b.n	8001a90 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001938:	4b57      	ldr	r3, [pc, #348]	; (8001a98 <HAL_RCC_OscConfig+0x4f4>)
 800193a:	6a1b      	ldr	r3, [r3, #32]
 800193c:	f003 0302 	and.w	r3, r3, #2
 8001940:	2b00      	cmp	r3, #0
 8001942:	d0ee      	beq.n	8001922 <HAL_RCC_OscConfig+0x37e>
 8001944:	e014      	b.n	8001970 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001946:	f7ff fb99 	bl	800107c <HAL_GetTick>
 800194a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800194c:	e00a      	b.n	8001964 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800194e:	f7ff fb95 	bl	800107c <HAL_GetTick>
 8001952:	4602      	mov	r2, r0
 8001954:	693b      	ldr	r3, [r7, #16]
 8001956:	1ad3      	subs	r3, r2, r3
 8001958:	f241 3288 	movw	r2, #5000	; 0x1388
 800195c:	4293      	cmp	r3, r2
 800195e:	d901      	bls.n	8001964 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001960:	2303      	movs	r3, #3
 8001962:	e095      	b.n	8001a90 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001964:	4b4c      	ldr	r3, [pc, #304]	; (8001a98 <HAL_RCC_OscConfig+0x4f4>)
 8001966:	6a1b      	ldr	r3, [r3, #32]
 8001968:	f003 0302 	and.w	r3, r3, #2
 800196c:	2b00      	cmp	r3, #0
 800196e:	d1ee      	bne.n	800194e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001970:	7dfb      	ldrb	r3, [r7, #23]
 8001972:	2b01      	cmp	r3, #1
 8001974:	d105      	bne.n	8001982 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001976:	4b48      	ldr	r3, [pc, #288]	; (8001a98 <HAL_RCC_OscConfig+0x4f4>)
 8001978:	69db      	ldr	r3, [r3, #28]
 800197a:	4a47      	ldr	r2, [pc, #284]	; (8001a98 <HAL_RCC_OscConfig+0x4f4>)
 800197c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001980:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	69db      	ldr	r3, [r3, #28]
 8001986:	2b00      	cmp	r3, #0
 8001988:	f000 8081 	beq.w	8001a8e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800198c:	4b42      	ldr	r3, [pc, #264]	; (8001a98 <HAL_RCC_OscConfig+0x4f4>)
 800198e:	685b      	ldr	r3, [r3, #4]
 8001990:	f003 030c 	and.w	r3, r3, #12
 8001994:	2b08      	cmp	r3, #8
 8001996:	d061      	beq.n	8001a5c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	69db      	ldr	r3, [r3, #28]
 800199c:	2b02      	cmp	r3, #2
 800199e:	d146      	bne.n	8001a2e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019a0:	4b3f      	ldr	r3, [pc, #252]	; (8001aa0 <HAL_RCC_OscConfig+0x4fc>)
 80019a2:	2200      	movs	r2, #0
 80019a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019a6:	f7ff fb69 	bl	800107c <HAL_GetTick>
 80019aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019ac:	e008      	b.n	80019c0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019ae:	f7ff fb65 	bl	800107c <HAL_GetTick>
 80019b2:	4602      	mov	r2, r0
 80019b4:	693b      	ldr	r3, [r7, #16]
 80019b6:	1ad3      	subs	r3, r2, r3
 80019b8:	2b02      	cmp	r3, #2
 80019ba:	d901      	bls.n	80019c0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80019bc:	2303      	movs	r3, #3
 80019be:	e067      	b.n	8001a90 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019c0:	4b35      	ldr	r3, [pc, #212]	; (8001a98 <HAL_RCC_OscConfig+0x4f4>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d1f0      	bne.n	80019ae <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	6a1b      	ldr	r3, [r3, #32]
 80019d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019d4:	d108      	bne.n	80019e8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80019d6:	4b30      	ldr	r3, [pc, #192]	; (8001a98 <HAL_RCC_OscConfig+0x4f4>)
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	689b      	ldr	r3, [r3, #8]
 80019e2:	492d      	ldr	r1, [pc, #180]	; (8001a98 <HAL_RCC_OscConfig+0x4f4>)
 80019e4:	4313      	orrs	r3, r2
 80019e6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80019e8:	4b2b      	ldr	r3, [pc, #172]	; (8001a98 <HAL_RCC_OscConfig+0x4f4>)
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	6a19      	ldr	r1, [r3, #32]
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019f8:	430b      	orrs	r3, r1
 80019fa:	4927      	ldr	r1, [pc, #156]	; (8001a98 <HAL_RCC_OscConfig+0x4f4>)
 80019fc:	4313      	orrs	r3, r2
 80019fe:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a00:	4b27      	ldr	r3, [pc, #156]	; (8001aa0 <HAL_RCC_OscConfig+0x4fc>)
 8001a02:	2201      	movs	r2, #1
 8001a04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a06:	f7ff fb39 	bl	800107c <HAL_GetTick>
 8001a0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a0c:	e008      	b.n	8001a20 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a0e:	f7ff fb35 	bl	800107c <HAL_GetTick>
 8001a12:	4602      	mov	r2, r0
 8001a14:	693b      	ldr	r3, [r7, #16]
 8001a16:	1ad3      	subs	r3, r2, r3
 8001a18:	2b02      	cmp	r3, #2
 8001a1a:	d901      	bls.n	8001a20 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001a1c:	2303      	movs	r3, #3
 8001a1e:	e037      	b.n	8001a90 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a20:	4b1d      	ldr	r3, [pc, #116]	; (8001a98 <HAL_RCC_OscConfig+0x4f4>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d0f0      	beq.n	8001a0e <HAL_RCC_OscConfig+0x46a>
 8001a2c:	e02f      	b.n	8001a8e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a2e:	4b1c      	ldr	r3, [pc, #112]	; (8001aa0 <HAL_RCC_OscConfig+0x4fc>)
 8001a30:	2200      	movs	r2, #0
 8001a32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a34:	f7ff fb22 	bl	800107c <HAL_GetTick>
 8001a38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a3a:	e008      	b.n	8001a4e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a3c:	f7ff fb1e 	bl	800107c <HAL_GetTick>
 8001a40:	4602      	mov	r2, r0
 8001a42:	693b      	ldr	r3, [r7, #16]
 8001a44:	1ad3      	subs	r3, r2, r3
 8001a46:	2b02      	cmp	r3, #2
 8001a48:	d901      	bls.n	8001a4e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001a4a:	2303      	movs	r3, #3
 8001a4c:	e020      	b.n	8001a90 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a4e:	4b12      	ldr	r3, [pc, #72]	; (8001a98 <HAL_RCC_OscConfig+0x4f4>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d1f0      	bne.n	8001a3c <HAL_RCC_OscConfig+0x498>
 8001a5a:	e018      	b.n	8001a8e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	69db      	ldr	r3, [r3, #28]
 8001a60:	2b01      	cmp	r3, #1
 8001a62:	d101      	bne.n	8001a68 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001a64:	2301      	movs	r3, #1
 8001a66:	e013      	b.n	8001a90 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001a68:	4b0b      	ldr	r3, [pc, #44]	; (8001a98 <HAL_RCC_OscConfig+0x4f4>)
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	6a1b      	ldr	r3, [r3, #32]
 8001a78:	429a      	cmp	r2, r3
 8001a7a:	d106      	bne.n	8001a8a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a86:	429a      	cmp	r2, r3
 8001a88:	d001      	beq.n	8001a8e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	e000      	b.n	8001a90 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001a8e:	2300      	movs	r3, #0
}
 8001a90:	4618      	mov	r0, r3
 8001a92:	3718      	adds	r7, #24
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bd80      	pop	{r7, pc}
 8001a98:	40021000 	.word	0x40021000
 8001a9c:	40007000 	.word	0x40007000
 8001aa0:	42420060 	.word	0x42420060

08001aa4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b084      	sub	sp, #16
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
 8001aac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d101      	bne.n	8001ab8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ab4:	2301      	movs	r3, #1
 8001ab6:	e0d0      	b.n	8001c5a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001ab8:	4b6a      	ldr	r3, [pc, #424]	; (8001c64 <HAL_RCC_ClockConfig+0x1c0>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f003 0307 	and.w	r3, r3, #7
 8001ac0:	683a      	ldr	r2, [r7, #0]
 8001ac2:	429a      	cmp	r2, r3
 8001ac4:	d910      	bls.n	8001ae8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ac6:	4b67      	ldr	r3, [pc, #412]	; (8001c64 <HAL_RCC_ClockConfig+0x1c0>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f023 0207 	bic.w	r2, r3, #7
 8001ace:	4965      	ldr	r1, [pc, #404]	; (8001c64 <HAL_RCC_ClockConfig+0x1c0>)
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	4313      	orrs	r3, r2
 8001ad4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ad6:	4b63      	ldr	r3, [pc, #396]	; (8001c64 <HAL_RCC_ClockConfig+0x1c0>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f003 0307 	and.w	r3, r3, #7
 8001ade:	683a      	ldr	r2, [r7, #0]
 8001ae0:	429a      	cmp	r2, r3
 8001ae2:	d001      	beq.n	8001ae8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001ae4:	2301      	movs	r3, #1
 8001ae6:	e0b8      	b.n	8001c5a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f003 0302 	and.w	r3, r3, #2
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d020      	beq.n	8001b36 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f003 0304 	and.w	r3, r3, #4
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d005      	beq.n	8001b0c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001b00:	4b59      	ldr	r3, [pc, #356]	; (8001c68 <HAL_RCC_ClockConfig+0x1c4>)
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	4a58      	ldr	r2, [pc, #352]	; (8001c68 <HAL_RCC_ClockConfig+0x1c4>)
 8001b06:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001b0a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f003 0308 	and.w	r3, r3, #8
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d005      	beq.n	8001b24 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001b18:	4b53      	ldr	r3, [pc, #332]	; (8001c68 <HAL_RCC_ClockConfig+0x1c4>)
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	4a52      	ldr	r2, [pc, #328]	; (8001c68 <HAL_RCC_ClockConfig+0x1c4>)
 8001b1e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001b22:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b24:	4b50      	ldr	r3, [pc, #320]	; (8001c68 <HAL_RCC_ClockConfig+0x1c4>)
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	689b      	ldr	r3, [r3, #8]
 8001b30:	494d      	ldr	r1, [pc, #308]	; (8001c68 <HAL_RCC_ClockConfig+0x1c4>)
 8001b32:	4313      	orrs	r3, r2
 8001b34:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f003 0301 	and.w	r3, r3, #1
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d040      	beq.n	8001bc4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	685b      	ldr	r3, [r3, #4]
 8001b46:	2b01      	cmp	r3, #1
 8001b48:	d107      	bne.n	8001b5a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b4a:	4b47      	ldr	r3, [pc, #284]	; (8001c68 <HAL_RCC_ClockConfig+0x1c4>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d115      	bne.n	8001b82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b56:	2301      	movs	r3, #1
 8001b58:	e07f      	b.n	8001c5a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	685b      	ldr	r3, [r3, #4]
 8001b5e:	2b02      	cmp	r3, #2
 8001b60:	d107      	bne.n	8001b72 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b62:	4b41      	ldr	r3, [pc, #260]	; (8001c68 <HAL_RCC_ClockConfig+0x1c4>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d109      	bne.n	8001b82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b6e:	2301      	movs	r3, #1
 8001b70:	e073      	b.n	8001c5a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b72:	4b3d      	ldr	r3, [pc, #244]	; (8001c68 <HAL_RCC_ClockConfig+0x1c4>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f003 0302 	and.w	r3, r3, #2
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d101      	bne.n	8001b82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b7e:	2301      	movs	r3, #1
 8001b80:	e06b      	b.n	8001c5a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b82:	4b39      	ldr	r3, [pc, #228]	; (8001c68 <HAL_RCC_ClockConfig+0x1c4>)
 8001b84:	685b      	ldr	r3, [r3, #4]
 8001b86:	f023 0203 	bic.w	r2, r3, #3
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	685b      	ldr	r3, [r3, #4]
 8001b8e:	4936      	ldr	r1, [pc, #216]	; (8001c68 <HAL_RCC_ClockConfig+0x1c4>)
 8001b90:	4313      	orrs	r3, r2
 8001b92:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b94:	f7ff fa72 	bl	800107c <HAL_GetTick>
 8001b98:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b9a:	e00a      	b.n	8001bb2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b9c:	f7ff fa6e 	bl	800107c <HAL_GetTick>
 8001ba0:	4602      	mov	r2, r0
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	1ad3      	subs	r3, r2, r3
 8001ba6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d901      	bls.n	8001bb2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001bae:	2303      	movs	r3, #3
 8001bb0:	e053      	b.n	8001c5a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bb2:	4b2d      	ldr	r3, [pc, #180]	; (8001c68 <HAL_RCC_ClockConfig+0x1c4>)
 8001bb4:	685b      	ldr	r3, [r3, #4]
 8001bb6:	f003 020c 	and.w	r2, r3, #12
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	685b      	ldr	r3, [r3, #4]
 8001bbe:	009b      	lsls	r3, r3, #2
 8001bc0:	429a      	cmp	r2, r3
 8001bc2:	d1eb      	bne.n	8001b9c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001bc4:	4b27      	ldr	r3, [pc, #156]	; (8001c64 <HAL_RCC_ClockConfig+0x1c0>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f003 0307 	and.w	r3, r3, #7
 8001bcc:	683a      	ldr	r2, [r7, #0]
 8001bce:	429a      	cmp	r2, r3
 8001bd0:	d210      	bcs.n	8001bf4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bd2:	4b24      	ldr	r3, [pc, #144]	; (8001c64 <HAL_RCC_ClockConfig+0x1c0>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f023 0207 	bic.w	r2, r3, #7
 8001bda:	4922      	ldr	r1, [pc, #136]	; (8001c64 <HAL_RCC_ClockConfig+0x1c0>)
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	4313      	orrs	r3, r2
 8001be0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001be2:	4b20      	ldr	r3, [pc, #128]	; (8001c64 <HAL_RCC_ClockConfig+0x1c0>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f003 0307 	and.w	r3, r3, #7
 8001bea:	683a      	ldr	r2, [r7, #0]
 8001bec:	429a      	cmp	r2, r3
 8001bee:	d001      	beq.n	8001bf4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001bf0:	2301      	movs	r3, #1
 8001bf2:	e032      	b.n	8001c5a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f003 0304 	and.w	r3, r3, #4
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d008      	beq.n	8001c12 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c00:	4b19      	ldr	r3, [pc, #100]	; (8001c68 <HAL_RCC_ClockConfig+0x1c4>)
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	68db      	ldr	r3, [r3, #12]
 8001c0c:	4916      	ldr	r1, [pc, #88]	; (8001c68 <HAL_RCC_ClockConfig+0x1c4>)
 8001c0e:	4313      	orrs	r3, r2
 8001c10:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f003 0308 	and.w	r3, r3, #8
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d009      	beq.n	8001c32 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001c1e:	4b12      	ldr	r3, [pc, #72]	; (8001c68 <HAL_RCC_ClockConfig+0x1c4>)
 8001c20:	685b      	ldr	r3, [r3, #4]
 8001c22:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	691b      	ldr	r3, [r3, #16]
 8001c2a:	00db      	lsls	r3, r3, #3
 8001c2c:	490e      	ldr	r1, [pc, #56]	; (8001c68 <HAL_RCC_ClockConfig+0x1c4>)
 8001c2e:	4313      	orrs	r3, r2
 8001c30:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001c32:	f000 f821 	bl	8001c78 <HAL_RCC_GetSysClockFreq>
 8001c36:	4602      	mov	r2, r0
 8001c38:	4b0b      	ldr	r3, [pc, #44]	; (8001c68 <HAL_RCC_ClockConfig+0x1c4>)
 8001c3a:	685b      	ldr	r3, [r3, #4]
 8001c3c:	091b      	lsrs	r3, r3, #4
 8001c3e:	f003 030f 	and.w	r3, r3, #15
 8001c42:	490a      	ldr	r1, [pc, #40]	; (8001c6c <HAL_RCC_ClockConfig+0x1c8>)
 8001c44:	5ccb      	ldrb	r3, [r1, r3]
 8001c46:	fa22 f303 	lsr.w	r3, r2, r3
 8001c4a:	4a09      	ldr	r2, [pc, #36]	; (8001c70 <HAL_RCC_ClockConfig+0x1cc>)
 8001c4c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001c4e:	4b09      	ldr	r3, [pc, #36]	; (8001c74 <HAL_RCC_ClockConfig+0x1d0>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4618      	mov	r0, r3
 8001c54:	f7ff f92c 	bl	8000eb0 <HAL_InitTick>

  return HAL_OK;
 8001c58:	2300      	movs	r3, #0
}
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	3710      	adds	r7, #16
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd80      	pop	{r7, pc}
 8001c62:	bf00      	nop
 8001c64:	40022000 	.word	0x40022000
 8001c68:	40021000 	.word	0x40021000
 8001c6c:	08002638 	.word	0x08002638
 8001c70:	20000068 	.word	0x20000068
 8001c74:	2000006c 	.word	0x2000006c

08001c78 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	b087      	sub	sp, #28
 8001c7c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	60fb      	str	r3, [r7, #12]
 8001c82:	2300      	movs	r3, #0
 8001c84:	60bb      	str	r3, [r7, #8]
 8001c86:	2300      	movs	r3, #0
 8001c88:	617b      	str	r3, [r7, #20]
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001c92:	4b1e      	ldr	r3, [pc, #120]	; (8001d0c <HAL_RCC_GetSysClockFreq+0x94>)
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	f003 030c 	and.w	r3, r3, #12
 8001c9e:	2b04      	cmp	r3, #4
 8001ca0:	d002      	beq.n	8001ca8 <HAL_RCC_GetSysClockFreq+0x30>
 8001ca2:	2b08      	cmp	r3, #8
 8001ca4:	d003      	beq.n	8001cae <HAL_RCC_GetSysClockFreq+0x36>
 8001ca6:	e027      	b.n	8001cf8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001ca8:	4b19      	ldr	r3, [pc, #100]	; (8001d10 <HAL_RCC_GetSysClockFreq+0x98>)
 8001caa:	613b      	str	r3, [r7, #16]
      break;
 8001cac:	e027      	b.n	8001cfe <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	0c9b      	lsrs	r3, r3, #18
 8001cb2:	f003 030f 	and.w	r3, r3, #15
 8001cb6:	4a17      	ldr	r2, [pc, #92]	; (8001d14 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001cb8:	5cd3      	ldrb	r3, [r2, r3]
 8001cba:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d010      	beq.n	8001ce8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001cc6:	4b11      	ldr	r3, [pc, #68]	; (8001d0c <HAL_RCC_GetSysClockFreq+0x94>)
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	0c5b      	lsrs	r3, r3, #17
 8001ccc:	f003 0301 	and.w	r3, r3, #1
 8001cd0:	4a11      	ldr	r2, [pc, #68]	; (8001d18 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001cd2:	5cd3      	ldrb	r3, [r2, r3]
 8001cd4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	4a0d      	ldr	r2, [pc, #52]	; (8001d10 <HAL_RCC_GetSysClockFreq+0x98>)
 8001cda:	fb02 f203 	mul.w	r2, r2, r3
 8001cde:	68bb      	ldr	r3, [r7, #8]
 8001ce0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ce4:	617b      	str	r3, [r7, #20]
 8001ce6:	e004      	b.n	8001cf2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	4a0c      	ldr	r2, [pc, #48]	; (8001d1c <HAL_RCC_GetSysClockFreq+0xa4>)
 8001cec:	fb02 f303 	mul.w	r3, r2, r3
 8001cf0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001cf2:	697b      	ldr	r3, [r7, #20]
 8001cf4:	613b      	str	r3, [r7, #16]
      break;
 8001cf6:	e002      	b.n	8001cfe <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001cf8:	4b05      	ldr	r3, [pc, #20]	; (8001d10 <HAL_RCC_GetSysClockFreq+0x98>)
 8001cfa:	613b      	str	r3, [r7, #16]
      break;
 8001cfc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001cfe:	693b      	ldr	r3, [r7, #16]
}
 8001d00:	4618      	mov	r0, r3
 8001d02:	371c      	adds	r7, #28
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bc80      	pop	{r7}
 8001d08:	4770      	bx	lr
 8001d0a:	bf00      	nop
 8001d0c:	40021000 	.word	0x40021000
 8001d10:	007a1200 	.word	0x007a1200
 8001d14:	08002650 	.word	0x08002650
 8001d18:	08002660 	.word	0x08002660
 8001d1c:	003d0900 	.word	0x003d0900

08001d20 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d20:	b480      	push	{r7}
 8001d22:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d24:	4b02      	ldr	r3, [pc, #8]	; (8001d30 <HAL_RCC_GetHCLKFreq+0x10>)
 8001d26:	681b      	ldr	r3, [r3, #0]
}
 8001d28:	4618      	mov	r0, r3
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bc80      	pop	{r7}
 8001d2e:	4770      	bx	lr
 8001d30:	20000068 	.word	0x20000068

08001d34 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001d38:	f7ff fff2 	bl	8001d20 <HAL_RCC_GetHCLKFreq>
 8001d3c:	4602      	mov	r2, r0
 8001d3e:	4b05      	ldr	r3, [pc, #20]	; (8001d54 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	0adb      	lsrs	r3, r3, #11
 8001d44:	f003 0307 	and.w	r3, r3, #7
 8001d48:	4903      	ldr	r1, [pc, #12]	; (8001d58 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d4a:	5ccb      	ldrb	r3, [r1, r3]
 8001d4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d50:	4618      	mov	r0, r3
 8001d52:	bd80      	pop	{r7, pc}
 8001d54:	40021000 	.word	0x40021000
 8001d58:	08002648 	.word	0x08002648

08001d5c <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	b083      	sub	sp, #12
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
 8001d64:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	220f      	movs	r2, #15
 8001d6a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001d6c:	4b11      	ldr	r3, [pc, #68]	; (8001db4 <HAL_RCC_GetClockConfig+0x58>)
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	f003 0203 	and.w	r2, r3, #3
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001d78:	4b0e      	ldr	r3, [pc, #56]	; (8001db4 <HAL_RCC_GetClockConfig+0x58>)
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001d84:	4b0b      	ldr	r3, [pc, #44]	; (8001db4 <HAL_RCC_GetClockConfig+0x58>)
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001d90:	4b08      	ldr	r3, [pc, #32]	; (8001db4 <HAL_RCC_GetClockConfig+0x58>)
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	08db      	lsrs	r3, r3, #3
 8001d96:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001d9e:	4b06      	ldr	r3, [pc, #24]	; (8001db8 <HAL_RCC_GetClockConfig+0x5c>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f003 0207 	and.w	r2, r3, #7
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8001daa:	bf00      	nop
 8001dac:	370c      	adds	r7, #12
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bc80      	pop	{r7}
 8001db2:	4770      	bx	lr
 8001db4:	40021000 	.word	0x40021000
 8001db8:	40022000 	.word	0x40022000

08001dbc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	b085      	sub	sp, #20
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001dc4:	4b0a      	ldr	r3, [pc, #40]	; (8001df0 <RCC_Delay+0x34>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4a0a      	ldr	r2, [pc, #40]	; (8001df4 <RCC_Delay+0x38>)
 8001dca:	fba2 2303 	umull	r2, r3, r2, r3
 8001dce:	0a5b      	lsrs	r3, r3, #9
 8001dd0:	687a      	ldr	r2, [r7, #4]
 8001dd2:	fb02 f303 	mul.w	r3, r2, r3
 8001dd6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001dd8:	bf00      	nop
  }
  while (Delay --);
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	1e5a      	subs	r2, r3, #1
 8001dde:	60fa      	str	r2, [r7, #12]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d1f9      	bne.n	8001dd8 <RCC_Delay+0x1c>
}
 8001de4:	bf00      	nop
 8001de6:	bf00      	nop
 8001de8:	3714      	adds	r7, #20
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bc80      	pop	{r7}
 8001dee:	4770      	bx	lr
 8001df0:	20000068 	.word	0x20000068
 8001df4:	10624dd3 	.word	0x10624dd3

08001df8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b082      	sub	sp, #8
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d101      	bne.n	8001e0a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001e06:	2301      	movs	r3, #1
 8001e08:	e041      	b.n	8001e8e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e10:	b2db      	uxtb	r3, r3
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d106      	bne.n	8001e24 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	2200      	movs	r2, #0
 8001e1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001e1e:	6878      	ldr	r0, [r7, #4]
 8001e20:	f7ff f822 	bl	8000e68 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2202      	movs	r2, #2
 8001e28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681a      	ldr	r2, [r3, #0]
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	3304      	adds	r3, #4
 8001e34:	4619      	mov	r1, r3
 8001e36:	4610      	mov	r0, r2
 8001e38:	f000 fa6e 	bl	8002318 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	2201      	movs	r2, #1
 8001e40:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2201      	movs	r2, #1
 8001e48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2201      	movs	r2, #1
 8001e50:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2201      	movs	r2, #1
 8001e58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	2201      	movs	r2, #1
 8001e60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	2201      	movs	r2, #1
 8001e68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2201      	movs	r2, #1
 8001e70:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2201      	movs	r2, #1
 8001e78:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	2201      	movs	r2, #1
 8001e80:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	2201      	movs	r2, #1
 8001e88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001e8c:	2300      	movs	r3, #0
}
 8001e8e:	4618      	mov	r0, r3
 8001e90:	3708      	adds	r7, #8
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}
	...

08001e98 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	b085      	sub	sp, #20
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ea6:	b2db      	uxtb	r3, r3
 8001ea8:	2b01      	cmp	r3, #1
 8001eaa:	d001      	beq.n	8001eb0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001eac:	2301      	movs	r3, #1
 8001eae:	e035      	b.n	8001f1c <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2202      	movs	r2, #2
 8001eb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	68da      	ldr	r2, [r3, #12]
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f042 0201 	orr.w	r2, r2, #1
 8001ec6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4a16      	ldr	r2, [pc, #88]	; (8001f28 <HAL_TIM_Base_Start_IT+0x90>)
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d009      	beq.n	8001ee6 <HAL_TIM_Base_Start_IT+0x4e>
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001eda:	d004      	beq.n	8001ee6 <HAL_TIM_Base_Start_IT+0x4e>
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4a12      	ldr	r2, [pc, #72]	; (8001f2c <HAL_TIM_Base_Start_IT+0x94>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d111      	bne.n	8001f0a <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	689b      	ldr	r3, [r3, #8]
 8001eec:	f003 0307 	and.w	r3, r3, #7
 8001ef0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	2b06      	cmp	r3, #6
 8001ef6:	d010      	beq.n	8001f1a <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	681a      	ldr	r2, [r3, #0]
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f042 0201 	orr.w	r2, r2, #1
 8001f06:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f08:	e007      	b.n	8001f1a <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	681a      	ldr	r2, [r3, #0]
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f042 0201 	orr.w	r2, r2, #1
 8001f18:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001f1a:	2300      	movs	r3, #0
}
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	3714      	adds	r7, #20
 8001f20:	46bd      	mov	sp, r7
 8001f22:	bc80      	pop	{r7}
 8001f24:	4770      	bx	lr
 8001f26:	bf00      	nop
 8001f28:	40012c00 	.word	0x40012c00
 8001f2c:	40000400 	.word	0x40000400

08001f30 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b082      	sub	sp, #8
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	691b      	ldr	r3, [r3, #16]
 8001f3e:	f003 0302 	and.w	r3, r3, #2
 8001f42:	2b02      	cmp	r3, #2
 8001f44:	d122      	bne.n	8001f8c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	68db      	ldr	r3, [r3, #12]
 8001f4c:	f003 0302 	and.w	r3, r3, #2
 8001f50:	2b02      	cmp	r3, #2
 8001f52:	d11b      	bne.n	8001f8c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f06f 0202 	mvn.w	r2, #2
 8001f5c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	2201      	movs	r2, #1
 8001f62:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	699b      	ldr	r3, [r3, #24]
 8001f6a:	f003 0303 	and.w	r3, r3, #3
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d003      	beq.n	8001f7a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001f72:	6878      	ldr	r0, [r7, #4]
 8001f74:	f000 f9b4 	bl	80022e0 <HAL_TIM_IC_CaptureCallback>
 8001f78:	e005      	b.n	8001f86 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f7a:	6878      	ldr	r0, [r7, #4]
 8001f7c:	f000 f9a7 	bl	80022ce <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f80:	6878      	ldr	r0, [r7, #4]
 8001f82:	f000 f9b6 	bl	80022f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	2200      	movs	r2, #0
 8001f8a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	691b      	ldr	r3, [r3, #16]
 8001f92:	f003 0304 	and.w	r3, r3, #4
 8001f96:	2b04      	cmp	r3, #4
 8001f98:	d122      	bne.n	8001fe0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	68db      	ldr	r3, [r3, #12]
 8001fa0:	f003 0304 	and.w	r3, r3, #4
 8001fa4:	2b04      	cmp	r3, #4
 8001fa6:	d11b      	bne.n	8001fe0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f06f 0204 	mvn.w	r2, #4
 8001fb0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	2202      	movs	r2, #2
 8001fb6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	699b      	ldr	r3, [r3, #24]
 8001fbe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d003      	beq.n	8001fce <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001fc6:	6878      	ldr	r0, [r7, #4]
 8001fc8:	f000 f98a 	bl	80022e0 <HAL_TIM_IC_CaptureCallback>
 8001fcc:	e005      	b.n	8001fda <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fce:	6878      	ldr	r0, [r7, #4]
 8001fd0:	f000 f97d 	bl	80022ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fd4:	6878      	ldr	r0, [r7, #4]
 8001fd6:	f000 f98c 	bl	80022f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	2200      	movs	r2, #0
 8001fde:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	691b      	ldr	r3, [r3, #16]
 8001fe6:	f003 0308 	and.w	r3, r3, #8
 8001fea:	2b08      	cmp	r3, #8
 8001fec:	d122      	bne.n	8002034 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	68db      	ldr	r3, [r3, #12]
 8001ff4:	f003 0308 	and.w	r3, r3, #8
 8001ff8:	2b08      	cmp	r3, #8
 8001ffa:	d11b      	bne.n	8002034 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f06f 0208 	mvn.w	r2, #8
 8002004:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	2204      	movs	r2, #4
 800200a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	69db      	ldr	r3, [r3, #28]
 8002012:	f003 0303 	and.w	r3, r3, #3
 8002016:	2b00      	cmp	r3, #0
 8002018:	d003      	beq.n	8002022 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800201a:	6878      	ldr	r0, [r7, #4]
 800201c:	f000 f960 	bl	80022e0 <HAL_TIM_IC_CaptureCallback>
 8002020:	e005      	b.n	800202e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002022:	6878      	ldr	r0, [r7, #4]
 8002024:	f000 f953 	bl	80022ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002028:	6878      	ldr	r0, [r7, #4]
 800202a:	f000 f962 	bl	80022f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	2200      	movs	r2, #0
 8002032:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	691b      	ldr	r3, [r3, #16]
 800203a:	f003 0310 	and.w	r3, r3, #16
 800203e:	2b10      	cmp	r3, #16
 8002040:	d122      	bne.n	8002088 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	68db      	ldr	r3, [r3, #12]
 8002048:	f003 0310 	and.w	r3, r3, #16
 800204c:	2b10      	cmp	r3, #16
 800204e:	d11b      	bne.n	8002088 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f06f 0210 	mvn.w	r2, #16
 8002058:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	2208      	movs	r2, #8
 800205e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	69db      	ldr	r3, [r3, #28]
 8002066:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800206a:	2b00      	cmp	r3, #0
 800206c:	d003      	beq.n	8002076 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800206e:	6878      	ldr	r0, [r7, #4]
 8002070:	f000 f936 	bl	80022e0 <HAL_TIM_IC_CaptureCallback>
 8002074:	e005      	b.n	8002082 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002076:	6878      	ldr	r0, [r7, #4]
 8002078:	f000 f929 	bl	80022ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800207c:	6878      	ldr	r0, [r7, #4]
 800207e:	f000 f938 	bl	80022f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	2200      	movs	r2, #0
 8002086:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	691b      	ldr	r3, [r3, #16]
 800208e:	f003 0301 	and.w	r3, r3, #1
 8002092:	2b01      	cmp	r3, #1
 8002094:	d10e      	bne.n	80020b4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	68db      	ldr	r3, [r3, #12]
 800209c:	f003 0301 	and.w	r3, r3, #1
 80020a0:	2b01      	cmp	r3, #1
 80020a2:	d107      	bne.n	80020b4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f06f 0201 	mvn.w	r2, #1
 80020ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80020ae:	6878      	ldr	r0, [r7, #4]
 80020b0:	f7fe fe24 	bl	8000cfc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	691b      	ldr	r3, [r3, #16]
 80020ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020be:	2b80      	cmp	r3, #128	; 0x80
 80020c0:	d10e      	bne.n	80020e0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	68db      	ldr	r3, [r3, #12]
 80020c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020cc:	2b80      	cmp	r3, #128	; 0x80
 80020ce:	d107      	bne.n	80020e0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80020d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80020da:	6878      	ldr	r0, [r7, #4]
 80020dc:	f000 fa6b 	bl	80025b6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	691b      	ldr	r3, [r3, #16]
 80020e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020ea:	2b40      	cmp	r3, #64	; 0x40
 80020ec:	d10e      	bne.n	800210c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	68db      	ldr	r3, [r3, #12]
 80020f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020f8:	2b40      	cmp	r3, #64	; 0x40
 80020fa:	d107      	bne.n	800210c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002104:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002106:	6878      	ldr	r0, [r7, #4]
 8002108:	f000 f8fc 	bl	8002304 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	691b      	ldr	r3, [r3, #16]
 8002112:	f003 0320 	and.w	r3, r3, #32
 8002116:	2b20      	cmp	r3, #32
 8002118:	d10e      	bne.n	8002138 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	68db      	ldr	r3, [r3, #12]
 8002120:	f003 0320 	and.w	r3, r3, #32
 8002124:	2b20      	cmp	r3, #32
 8002126:	d107      	bne.n	8002138 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f06f 0220 	mvn.w	r2, #32
 8002130:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002132:	6878      	ldr	r0, [r7, #4]
 8002134:	f000 fa36 	bl	80025a4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002138:	bf00      	nop
 800213a:	3708      	adds	r7, #8
 800213c:	46bd      	mov	sp, r7
 800213e:	bd80      	pop	{r7, pc}

08002140 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b084      	sub	sp, #16
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
 8002148:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800214a:	2300      	movs	r3, #0
 800214c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002154:	2b01      	cmp	r3, #1
 8002156:	d101      	bne.n	800215c <HAL_TIM_ConfigClockSource+0x1c>
 8002158:	2302      	movs	r3, #2
 800215a:	e0b4      	b.n	80022c6 <HAL_TIM_ConfigClockSource+0x186>
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2201      	movs	r2, #1
 8002160:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2202      	movs	r2, #2
 8002168:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	689b      	ldr	r3, [r3, #8]
 8002172:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002174:	68bb      	ldr	r3, [r7, #8]
 8002176:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800217a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800217c:	68bb      	ldr	r3, [r7, #8]
 800217e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002182:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	68ba      	ldr	r2, [r7, #8]
 800218a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002194:	d03e      	beq.n	8002214 <HAL_TIM_ConfigClockSource+0xd4>
 8002196:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800219a:	f200 8087 	bhi.w	80022ac <HAL_TIM_ConfigClockSource+0x16c>
 800219e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80021a2:	f000 8086 	beq.w	80022b2 <HAL_TIM_ConfigClockSource+0x172>
 80021a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80021aa:	d87f      	bhi.n	80022ac <HAL_TIM_ConfigClockSource+0x16c>
 80021ac:	2b70      	cmp	r3, #112	; 0x70
 80021ae:	d01a      	beq.n	80021e6 <HAL_TIM_ConfigClockSource+0xa6>
 80021b0:	2b70      	cmp	r3, #112	; 0x70
 80021b2:	d87b      	bhi.n	80022ac <HAL_TIM_ConfigClockSource+0x16c>
 80021b4:	2b60      	cmp	r3, #96	; 0x60
 80021b6:	d050      	beq.n	800225a <HAL_TIM_ConfigClockSource+0x11a>
 80021b8:	2b60      	cmp	r3, #96	; 0x60
 80021ba:	d877      	bhi.n	80022ac <HAL_TIM_ConfigClockSource+0x16c>
 80021bc:	2b50      	cmp	r3, #80	; 0x50
 80021be:	d03c      	beq.n	800223a <HAL_TIM_ConfigClockSource+0xfa>
 80021c0:	2b50      	cmp	r3, #80	; 0x50
 80021c2:	d873      	bhi.n	80022ac <HAL_TIM_ConfigClockSource+0x16c>
 80021c4:	2b40      	cmp	r3, #64	; 0x40
 80021c6:	d058      	beq.n	800227a <HAL_TIM_ConfigClockSource+0x13a>
 80021c8:	2b40      	cmp	r3, #64	; 0x40
 80021ca:	d86f      	bhi.n	80022ac <HAL_TIM_ConfigClockSource+0x16c>
 80021cc:	2b30      	cmp	r3, #48	; 0x30
 80021ce:	d064      	beq.n	800229a <HAL_TIM_ConfigClockSource+0x15a>
 80021d0:	2b30      	cmp	r3, #48	; 0x30
 80021d2:	d86b      	bhi.n	80022ac <HAL_TIM_ConfigClockSource+0x16c>
 80021d4:	2b20      	cmp	r3, #32
 80021d6:	d060      	beq.n	800229a <HAL_TIM_ConfigClockSource+0x15a>
 80021d8:	2b20      	cmp	r3, #32
 80021da:	d867      	bhi.n	80022ac <HAL_TIM_ConfigClockSource+0x16c>
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d05c      	beq.n	800229a <HAL_TIM_ConfigClockSource+0x15a>
 80021e0:	2b10      	cmp	r3, #16
 80021e2:	d05a      	beq.n	800229a <HAL_TIM_ConfigClockSource+0x15a>
 80021e4:	e062      	b.n	80022ac <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6818      	ldr	r0, [r3, #0]
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	6899      	ldr	r1, [r3, #8]
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	685a      	ldr	r2, [r3, #4]
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	68db      	ldr	r3, [r3, #12]
 80021f6:	f000 f95e 	bl	80024b6 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	689b      	ldr	r3, [r3, #8]
 8002200:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002202:	68bb      	ldr	r3, [r7, #8]
 8002204:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002208:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	68ba      	ldr	r2, [r7, #8]
 8002210:	609a      	str	r2, [r3, #8]
      break;
 8002212:	e04f      	b.n	80022b4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6818      	ldr	r0, [r3, #0]
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	6899      	ldr	r1, [r3, #8]
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	685a      	ldr	r2, [r3, #4]
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	68db      	ldr	r3, [r3, #12]
 8002224:	f000 f947 	bl	80024b6 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	689a      	ldr	r2, [r3, #8]
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002236:	609a      	str	r2, [r3, #8]
      break;
 8002238:	e03c      	b.n	80022b4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6818      	ldr	r0, [r3, #0]
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	6859      	ldr	r1, [r3, #4]
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	68db      	ldr	r3, [r3, #12]
 8002246:	461a      	mov	r2, r3
 8002248:	f000 f8be 	bl	80023c8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	2150      	movs	r1, #80	; 0x50
 8002252:	4618      	mov	r0, r3
 8002254:	f000 f915 	bl	8002482 <TIM_ITRx_SetConfig>
      break;
 8002258:	e02c      	b.n	80022b4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6818      	ldr	r0, [r3, #0]
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	6859      	ldr	r1, [r3, #4]
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	68db      	ldr	r3, [r3, #12]
 8002266:	461a      	mov	r2, r3
 8002268:	f000 f8dc 	bl	8002424 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	2160      	movs	r1, #96	; 0x60
 8002272:	4618      	mov	r0, r3
 8002274:	f000 f905 	bl	8002482 <TIM_ITRx_SetConfig>
      break;
 8002278:	e01c      	b.n	80022b4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6818      	ldr	r0, [r3, #0]
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	6859      	ldr	r1, [r3, #4]
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	68db      	ldr	r3, [r3, #12]
 8002286:	461a      	mov	r2, r3
 8002288:	f000 f89e 	bl	80023c8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	2140      	movs	r1, #64	; 0x40
 8002292:	4618      	mov	r0, r3
 8002294:	f000 f8f5 	bl	8002482 <TIM_ITRx_SetConfig>
      break;
 8002298:	e00c      	b.n	80022b4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681a      	ldr	r2, [r3, #0]
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	4619      	mov	r1, r3
 80022a4:	4610      	mov	r0, r2
 80022a6:	f000 f8ec 	bl	8002482 <TIM_ITRx_SetConfig>
      break;
 80022aa:	e003      	b.n	80022b4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80022ac:	2301      	movs	r3, #1
 80022ae:	73fb      	strb	r3, [r7, #15]
      break;
 80022b0:	e000      	b.n	80022b4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80022b2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2201      	movs	r2, #1
 80022b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2200      	movs	r2, #0
 80022c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80022c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80022c6:	4618      	mov	r0, r3
 80022c8:	3710      	adds	r7, #16
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bd80      	pop	{r7, pc}

080022ce <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80022ce:	b480      	push	{r7}
 80022d0:	b083      	sub	sp, #12
 80022d2:	af00      	add	r7, sp, #0
 80022d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80022d6:	bf00      	nop
 80022d8:	370c      	adds	r7, #12
 80022da:	46bd      	mov	sp, r7
 80022dc:	bc80      	pop	{r7}
 80022de:	4770      	bx	lr

080022e0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80022e0:	b480      	push	{r7}
 80022e2:	b083      	sub	sp, #12
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80022e8:	bf00      	nop
 80022ea:	370c      	adds	r7, #12
 80022ec:	46bd      	mov	sp, r7
 80022ee:	bc80      	pop	{r7}
 80022f0:	4770      	bx	lr

080022f2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80022f2:	b480      	push	{r7}
 80022f4:	b083      	sub	sp, #12
 80022f6:	af00      	add	r7, sp, #0
 80022f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80022fa:	bf00      	nop
 80022fc:	370c      	adds	r7, #12
 80022fe:	46bd      	mov	sp, r7
 8002300:	bc80      	pop	{r7}
 8002302:	4770      	bx	lr

08002304 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002304:	b480      	push	{r7}
 8002306:	b083      	sub	sp, #12
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800230c:	bf00      	nop
 800230e:	370c      	adds	r7, #12
 8002310:	46bd      	mov	sp, r7
 8002312:	bc80      	pop	{r7}
 8002314:	4770      	bx	lr
	...

08002318 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002318:	b480      	push	{r7}
 800231a:	b085      	sub	sp, #20
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
 8002320:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	4a25      	ldr	r2, [pc, #148]	; (80023c0 <TIM_Base_SetConfig+0xa8>)
 800232c:	4293      	cmp	r3, r2
 800232e:	d007      	beq.n	8002340 <TIM_Base_SetConfig+0x28>
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002336:	d003      	beq.n	8002340 <TIM_Base_SetConfig+0x28>
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	4a22      	ldr	r2, [pc, #136]	; (80023c4 <TIM_Base_SetConfig+0xac>)
 800233c:	4293      	cmp	r3, r2
 800233e:	d108      	bne.n	8002352 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002346:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	68fa      	ldr	r2, [r7, #12]
 800234e:	4313      	orrs	r3, r2
 8002350:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	4a1a      	ldr	r2, [pc, #104]	; (80023c0 <TIM_Base_SetConfig+0xa8>)
 8002356:	4293      	cmp	r3, r2
 8002358:	d007      	beq.n	800236a <TIM_Base_SetConfig+0x52>
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002360:	d003      	beq.n	800236a <TIM_Base_SetConfig+0x52>
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	4a17      	ldr	r2, [pc, #92]	; (80023c4 <TIM_Base_SetConfig+0xac>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d108      	bne.n	800237c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002370:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	68db      	ldr	r3, [r3, #12]
 8002376:	68fa      	ldr	r2, [r7, #12]
 8002378:	4313      	orrs	r3, r2
 800237a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	695b      	ldr	r3, [r3, #20]
 8002386:	4313      	orrs	r3, r2
 8002388:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	68fa      	ldr	r2, [r7, #12]
 800238e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	689a      	ldr	r2, [r3, #8]
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	681a      	ldr	r2, [r3, #0]
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	4a07      	ldr	r2, [pc, #28]	; (80023c0 <TIM_Base_SetConfig+0xa8>)
 80023a4:	4293      	cmp	r3, r2
 80023a6:	d103      	bne.n	80023b0 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	691a      	ldr	r2, [r3, #16]
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2201      	movs	r2, #1
 80023b4:	615a      	str	r2, [r3, #20]
}
 80023b6:	bf00      	nop
 80023b8:	3714      	adds	r7, #20
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bc80      	pop	{r7}
 80023be:	4770      	bx	lr
 80023c0:	40012c00 	.word	0x40012c00
 80023c4:	40000400 	.word	0x40000400

080023c8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80023c8:	b480      	push	{r7}
 80023ca:	b087      	sub	sp, #28
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	60f8      	str	r0, [r7, #12]
 80023d0:	60b9      	str	r1, [r7, #8]
 80023d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	6a1b      	ldr	r3, [r3, #32]
 80023d8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	6a1b      	ldr	r3, [r3, #32]
 80023de:	f023 0201 	bic.w	r2, r3, #1
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	699b      	ldr	r3, [r3, #24]
 80023ea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80023ec:	693b      	ldr	r3, [r7, #16]
 80023ee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80023f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	011b      	lsls	r3, r3, #4
 80023f8:	693a      	ldr	r2, [r7, #16]
 80023fa:	4313      	orrs	r3, r2
 80023fc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80023fe:	697b      	ldr	r3, [r7, #20]
 8002400:	f023 030a 	bic.w	r3, r3, #10
 8002404:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002406:	697a      	ldr	r2, [r7, #20]
 8002408:	68bb      	ldr	r3, [r7, #8]
 800240a:	4313      	orrs	r3, r2
 800240c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	693a      	ldr	r2, [r7, #16]
 8002412:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	697a      	ldr	r2, [r7, #20]
 8002418:	621a      	str	r2, [r3, #32]
}
 800241a:	bf00      	nop
 800241c:	371c      	adds	r7, #28
 800241e:	46bd      	mov	sp, r7
 8002420:	bc80      	pop	{r7}
 8002422:	4770      	bx	lr

08002424 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002424:	b480      	push	{r7}
 8002426:	b087      	sub	sp, #28
 8002428:	af00      	add	r7, sp, #0
 800242a:	60f8      	str	r0, [r7, #12]
 800242c:	60b9      	str	r1, [r7, #8]
 800242e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	6a1b      	ldr	r3, [r3, #32]
 8002434:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	6a1b      	ldr	r3, [r3, #32]
 800243a:	f023 0210 	bic.w	r2, r3, #16
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	699b      	ldr	r3, [r3, #24]
 8002446:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002448:	693b      	ldr	r3, [r7, #16]
 800244a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800244e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	031b      	lsls	r3, r3, #12
 8002454:	693a      	ldr	r2, [r7, #16]
 8002456:	4313      	orrs	r3, r2
 8002458:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800245a:	697b      	ldr	r3, [r7, #20]
 800245c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002460:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002462:	68bb      	ldr	r3, [r7, #8]
 8002464:	011b      	lsls	r3, r3, #4
 8002466:	697a      	ldr	r2, [r7, #20]
 8002468:	4313      	orrs	r3, r2
 800246a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	693a      	ldr	r2, [r7, #16]
 8002470:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	697a      	ldr	r2, [r7, #20]
 8002476:	621a      	str	r2, [r3, #32]
}
 8002478:	bf00      	nop
 800247a:	371c      	adds	r7, #28
 800247c:	46bd      	mov	sp, r7
 800247e:	bc80      	pop	{r7}
 8002480:	4770      	bx	lr

08002482 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002482:	b480      	push	{r7}
 8002484:	b085      	sub	sp, #20
 8002486:	af00      	add	r7, sp, #0
 8002488:	6078      	str	r0, [r7, #4]
 800248a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	689b      	ldr	r3, [r3, #8]
 8002490:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002498:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800249a:	683a      	ldr	r2, [r7, #0]
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	4313      	orrs	r3, r2
 80024a0:	f043 0307 	orr.w	r3, r3, #7
 80024a4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	68fa      	ldr	r2, [r7, #12]
 80024aa:	609a      	str	r2, [r3, #8]
}
 80024ac:	bf00      	nop
 80024ae:	3714      	adds	r7, #20
 80024b0:	46bd      	mov	sp, r7
 80024b2:	bc80      	pop	{r7}
 80024b4:	4770      	bx	lr

080024b6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80024b6:	b480      	push	{r7}
 80024b8:	b087      	sub	sp, #28
 80024ba:	af00      	add	r7, sp, #0
 80024bc:	60f8      	str	r0, [r7, #12]
 80024be:	60b9      	str	r1, [r7, #8]
 80024c0:	607a      	str	r2, [r7, #4]
 80024c2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	689b      	ldr	r3, [r3, #8]
 80024c8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80024ca:	697b      	ldr	r3, [r7, #20]
 80024cc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80024d0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	021a      	lsls	r2, r3, #8
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	431a      	orrs	r2, r3
 80024da:	68bb      	ldr	r3, [r7, #8]
 80024dc:	4313      	orrs	r3, r2
 80024de:	697a      	ldr	r2, [r7, #20]
 80024e0:	4313      	orrs	r3, r2
 80024e2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	697a      	ldr	r2, [r7, #20]
 80024e8:	609a      	str	r2, [r3, #8]
}
 80024ea:	bf00      	nop
 80024ec:	371c      	adds	r7, #28
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bc80      	pop	{r7}
 80024f2:	4770      	bx	lr

080024f4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80024f4:	b480      	push	{r7}
 80024f6:	b085      	sub	sp, #20
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
 80024fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002504:	2b01      	cmp	r3, #1
 8002506:	d101      	bne.n	800250c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002508:	2302      	movs	r3, #2
 800250a:	e041      	b.n	8002590 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2201      	movs	r2, #1
 8002510:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2202      	movs	r2, #2
 8002518:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	685b      	ldr	r3, [r3, #4]
 8002522:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	689b      	ldr	r3, [r3, #8]
 800252a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002532:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	68fa      	ldr	r2, [r7, #12]
 800253a:	4313      	orrs	r3, r2
 800253c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	68fa      	ldr	r2, [r7, #12]
 8002544:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	4a14      	ldr	r2, [pc, #80]	; (800259c <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 800254c:	4293      	cmp	r3, r2
 800254e:	d009      	beq.n	8002564 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002558:	d004      	beq.n	8002564 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	4a10      	ldr	r2, [pc, #64]	; (80025a0 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002560:	4293      	cmp	r3, r2
 8002562:	d10c      	bne.n	800257e <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002564:	68bb      	ldr	r3, [r7, #8]
 8002566:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800256a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	68ba      	ldr	r2, [r7, #8]
 8002572:	4313      	orrs	r3, r2
 8002574:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	68ba      	ldr	r2, [r7, #8]
 800257c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	2201      	movs	r2, #1
 8002582:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	2200      	movs	r2, #0
 800258a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800258e:	2300      	movs	r3, #0
}
 8002590:	4618      	mov	r0, r3
 8002592:	3714      	adds	r7, #20
 8002594:	46bd      	mov	sp, r7
 8002596:	bc80      	pop	{r7}
 8002598:	4770      	bx	lr
 800259a:	bf00      	nop
 800259c:	40012c00 	.word	0x40012c00
 80025a0:	40000400 	.word	0x40000400

080025a4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80025a4:	b480      	push	{r7}
 80025a6:	b083      	sub	sp, #12
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80025ac:	bf00      	nop
 80025ae:	370c      	adds	r7, #12
 80025b0:	46bd      	mov	sp, r7
 80025b2:	bc80      	pop	{r7}
 80025b4:	4770      	bx	lr

080025b6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80025b6:	b480      	push	{r7}
 80025b8:	b083      	sub	sp, #12
 80025ba:	af00      	add	r7, sp, #0
 80025bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80025be:	bf00      	nop
 80025c0:	370c      	adds	r7, #12
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bc80      	pop	{r7}
 80025c6:	4770      	bx	lr

080025c8 <__libc_init_array>:
 80025c8:	b570      	push	{r4, r5, r6, lr}
 80025ca:	2600      	movs	r6, #0
 80025cc:	4d0c      	ldr	r5, [pc, #48]	; (8002600 <__libc_init_array+0x38>)
 80025ce:	4c0d      	ldr	r4, [pc, #52]	; (8002604 <__libc_init_array+0x3c>)
 80025d0:	1b64      	subs	r4, r4, r5
 80025d2:	10a4      	asrs	r4, r4, #2
 80025d4:	42a6      	cmp	r6, r4
 80025d6:	d109      	bne.n	80025ec <__libc_init_array+0x24>
 80025d8:	f000 f822 	bl	8002620 <_init>
 80025dc:	2600      	movs	r6, #0
 80025de:	4d0a      	ldr	r5, [pc, #40]	; (8002608 <__libc_init_array+0x40>)
 80025e0:	4c0a      	ldr	r4, [pc, #40]	; (800260c <__libc_init_array+0x44>)
 80025e2:	1b64      	subs	r4, r4, r5
 80025e4:	10a4      	asrs	r4, r4, #2
 80025e6:	42a6      	cmp	r6, r4
 80025e8:	d105      	bne.n	80025f6 <__libc_init_array+0x2e>
 80025ea:	bd70      	pop	{r4, r5, r6, pc}
 80025ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80025f0:	4798      	blx	r3
 80025f2:	3601      	adds	r6, #1
 80025f4:	e7ee      	b.n	80025d4 <__libc_init_array+0xc>
 80025f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80025fa:	4798      	blx	r3
 80025fc:	3601      	adds	r6, #1
 80025fe:	e7f2      	b.n	80025e6 <__libc_init_array+0x1e>
 8002600:	08002664 	.word	0x08002664
 8002604:	08002664 	.word	0x08002664
 8002608:	08002664 	.word	0x08002664
 800260c:	08002668 	.word	0x08002668

08002610 <memset>:
 8002610:	4603      	mov	r3, r0
 8002612:	4402      	add	r2, r0
 8002614:	4293      	cmp	r3, r2
 8002616:	d100      	bne.n	800261a <memset+0xa>
 8002618:	4770      	bx	lr
 800261a:	f803 1b01 	strb.w	r1, [r3], #1
 800261e:	e7f9      	b.n	8002614 <memset+0x4>

08002620 <_init>:
 8002620:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002622:	bf00      	nop
 8002624:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002626:	bc08      	pop	{r3}
 8002628:	469e      	mov	lr, r3
 800262a:	4770      	bx	lr

0800262c <_fini>:
 800262c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800262e:	bf00      	nop
 8002630:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002632:	bc08      	pop	{r3}
 8002634:	469e      	mov	lr, r3
 8002636:	4770      	bx	lr
