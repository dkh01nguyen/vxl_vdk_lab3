
lab3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002a8c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08002b98  08002b98  00012b98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002bc4  08002bc4  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  08002bc4  08002bc4  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002bc4  08002bc4  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002bc4  08002bc4  00012bc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002bc8  08002bc8  00012bc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08002bcc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000013c  2000005c  08002c28  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000198  08002c28  00020198  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009abc  00000000  00000000  00020085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c7a  00000000  00000000  00029b41  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a58  00000000  00000000  0002b7c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000948  00000000  00000000  0002c218  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016b22  00000000  00000000  0002cb60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b4c6  00000000  00000000  00043682  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082471  00000000  00000000  0004eb48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d0fb9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000028c0  00000000  00000000  000d100c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000005c 	.word	0x2000005c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002b80 	.word	0x08002b80

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000060 	.word	0x20000060
 8000148:	08002b80 	.word	0x08002b80

0800014c <isButtonPressed>:
int normal_flag[NUM_OF_BUTTONS] = {0};
int long_flag[NUM_OF_BUTTONS] = {0};

int TimeOutForKeyPress[NUM_OF_BUTTONS] = {0};

int isButtonPressed(int index){
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	if (normal_flag[index] == 1){
 8000154:	4a09      	ldr	r2, [pc, #36]	; (800017c <isButtonPressed+0x30>)
 8000156:	687b      	ldr	r3, [r7, #4]
 8000158:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800015c:	2b01      	cmp	r3, #1
 800015e:	d106      	bne.n	800016e <isButtonPressed+0x22>
		normal_flag[index] = 0;
 8000160:	4a06      	ldr	r2, [pc, #24]	; (800017c <isButtonPressed+0x30>)
 8000162:	687b      	ldr	r3, [r7, #4]
 8000164:	2100      	movs	r1, #0
 8000166:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 800016a:	2301      	movs	r3, #1
 800016c:	e000      	b.n	8000170 <isButtonPressed+0x24>
	}
	return 0;
 800016e:	2300      	movs	r3, #0
}
 8000170:	4618      	mov	r0, r3
 8000172:	370c      	adds	r7, #12
 8000174:	46bd      	mov	sp, r7
 8000176:	bc80      	pop	{r7}
 8000178:	4770      	bx	lr
 800017a:	bf00      	nop
 800017c:	20000078 	.word	0x20000078

08000180 <subKeyProcess>:

void subKeyProcess(int index){
 8000180:	b480      	push	{r7}
 8000182:	b083      	sub	sp, #12
 8000184:	af00      	add	r7, sp, #0
 8000186:	6078      	str	r0, [r7, #4]
	normal_flag[index] = 1;
 8000188:	4a04      	ldr	r2, [pc, #16]	; (800019c <subKeyProcess+0x1c>)
 800018a:	687b      	ldr	r3, [r7, #4]
 800018c:	2101      	movs	r1, #1
 800018e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8000192:	bf00      	nop
 8000194:	370c      	adds	r7, #12
 8000196:	46bd      	mov	sp, r7
 8000198:	bc80      	pop	{r7}
 800019a:	4770      	bx	lr
 800019c:	20000078 	.word	0x20000078

080001a0 <getKeyInput>:

void getKeyInput() {
 80001a0:	b580      	push	{r7, lr}
 80001a2:	b082      	sub	sp, #8
 80001a4:	af00      	add	r7, sp, #0
	for (int i = 0; i < NUM_OF_BUTTONS; i++) {
 80001a6:	2300      	movs	r3, #0
 80001a8:	607b      	str	r3, [r7, #4]
 80001aa:	e0a6      	b.n	80002fa <getKeyInput+0x15a>
		KeyReg0[i] = KeyReg1[i];
 80001ac:	4a57      	ldr	r2, [pc, #348]	; (800030c <getKeyInput+0x16c>)
 80001ae:	687b      	ldr	r3, [r7, #4]
 80001b0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001b4:	4956      	ldr	r1, [pc, #344]	; (8000310 <getKeyInput+0x170>)
 80001b6:	687b      	ldr	r3, [r7, #4]
 80001b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		KeyReg1[i] = KeyReg2[i];
 80001bc:	4a55      	ldr	r2, [pc, #340]	; (8000314 <getKeyInput+0x174>)
 80001be:	687b      	ldr	r3, [r7, #4]
 80001c0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001c4:	4951      	ldr	r1, [pc, #324]	; (800030c <getKeyInput+0x16c>)
 80001c6:	687b      	ldr	r3, [r7, #4]
 80001c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		// Read signals from buttons
		if (i == 0) {
 80001cc:	687b      	ldr	r3, [r7, #4]
 80001ce:	2b00      	cmp	r3, #0
 80001d0:	d10a      	bne.n	80001e8 <getKeyInput+0x48>
			KeyReg2[i] = HAL_GPIO_ReadPin(BTN1_GPIO_Port, BTN1_Pin);
 80001d2:	2108      	movs	r1, #8
 80001d4:	4850      	ldr	r0, [pc, #320]	; (8000318 <getKeyInput+0x178>)
 80001d6:	f001 fc4d 	bl	8001a74 <HAL_GPIO_ReadPin>
 80001da:	4603      	mov	r3, r0
 80001dc:	4619      	mov	r1, r3
 80001de:	4a4d      	ldr	r2, [pc, #308]	; (8000314 <getKeyInput+0x174>)
 80001e0:	687b      	ldr	r3, [r7, #4]
 80001e2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 80001e6:	e01a      	b.n	800021e <getKeyInput+0x7e>
		}
		else if (i == 1) {
 80001e8:	687b      	ldr	r3, [r7, #4]
 80001ea:	2b01      	cmp	r3, #1
 80001ec:	d10a      	bne.n	8000204 <getKeyInput+0x64>
			KeyReg2[i] = HAL_GPIO_ReadPin(BTN2_GPIO_Port, BTN2_Pin);
 80001ee:	2110      	movs	r1, #16
 80001f0:	4849      	ldr	r0, [pc, #292]	; (8000318 <getKeyInput+0x178>)
 80001f2:	f001 fc3f 	bl	8001a74 <HAL_GPIO_ReadPin>
 80001f6:	4603      	mov	r3, r0
 80001f8:	4619      	mov	r1, r3
 80001fa:	4a46      	ldr	r2, [pc, #280]	; (8000314 <getKeyInput+0x174>)
 80001fc:	687b      	ldr	r3, [r7, #4]
 80001fe:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000202:	e00c      	b.n	800021e <getKeyInput+0x7e>
		}
		else if (i == 2) {
 8000204:	687b      	ldr	r3, [r7, #4]
 8000206:	2b02      	cmp	r3, #2
 8000208:	d109      	bne.n	800021e <getKeyInput+0x7e>
			KeyReg2[i] = HAL_GPIO_ReadPin(BTN3_GPIO_Port, BTN3_Pin);
 800020a:	2120      	movs	r1, #32
 800020c:	4842      	ldr	r0, [pc, #264]	; (8000318 <getKeyInput+0x178>)
 800020e:	f001 fc31 	bl	8001a74 <HAL_GPIO_ReadPin>
 8000212:	4603      	mov	r3, r0
 8000214:	4619      	mov	r1, r3
 8000216:	4a3f      	ldr	r2, [pc, #252]	; (8000314 <getKeyInput+0x174>)
 8000218:	687b      	ldr	r3, [r7, #4]
 800021a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		}

		if ((KeyReg1[i] == KeyReg0[i]) && (KeyReg1[i] == KeyReg2[i])){
 800021e:	4a3b      	ldr	r2, [pc, #236]	; (800030c <getKeyInput+0x16c>)
 8000220:	687b      	ldr	r3, [r7, #4]
 8000222:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000226:	493a      	ldr	r1, [pc, #232]	; (8000310 <getKeyInput+0x170>)
 8000228:	687b      	ldr	r3, [r7, #4]
 800022a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800022e:	429a      	cmp	r2, r3
 8000230:	d159      	bne.n	80002e6 <getKeyInput+0x146>
 8000232:	4a36      	ldr	r2, [pc, #216]	; (800030c <getKeyInput+0x16c>)
 8000234:	687b      	ldr	r3, [r7, #4]
 8000236:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800023a:	4936      	ldr	r1, [pc, #216]	; (8000314 <getKeyInput+0x174>)
 800023c:	687b      	ldr	r3, [r7, #4]
 800023e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000242:	429a      	cmp	r2, r3
 8000244:	d14f      	bne.n	80002e6 <getKeyInput+0x146>
			if (KeyReg3[i] != KeyReg2[i]){
 8000246:	4a35      	ldr	r2, [pc, #212]	; (800031c <getKeyInput+0x17c>)
 8000248:	687b      	ldr	r3, [r7, #4]
 800024a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800024e:	4931      	ldr	r1, [pc, #196]	; (8000314 <getKeyInput+0x174>)
 8000250:	687b      	ldr	r3, [r7, #4]
 8000252:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000256:	429a      	cmp	r2, r3
 8000258:	d02b      	beq.n	80002b2 <getKeyInput+0x112>
				KeyReg3[i] = KeyReg2[i];
 800025a:	4a2e      	ldr	r2, [pc, #184]	; (8000314 <getKeyInput+0x174>)
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000262:	492e      	ldr	r1, [pc, #184]	; (800031c <getKeyInput+0x17c>)
 8000264:	687b      	ldr	r3, [r7, #4]
 8000266:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if (KeyReg2[i] == PRESSED_STATE){
 800026a:	4a2a      	ldr	r2, [pc, #168]	; (8000314 <getKeyInput+0x174>)
 800026c:	687b      	ldr	r3, [r7, #4]
 800026e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000272:	2b00      	cmp	r3, #0
 8000274:	d13d      	bne.n	80002f2 <getKeyInput+0x152>
					subKeyProcess(i);	// Set timer_flag[i] = 1;
 8000276:	6878      	ldr	r0, [r7, #4]
 8000278:	f7ff ff82 	bl	8000180 <subKeyProcess>
					if (long_flag[i] == 0) {
 800027c:	4a28      	ldr	r2, [pc, #160]	; (8000320 <getKeyInput+0x180>)
 800027e:	687b      	ldr	r3, [r7, #4]
 8000280:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000284:	2b00      	cmp	r3, #0
 8000286:	d10a      	bne.n	800029e <getKeyInput+0xfe>
						TimeOutForKeyPress[i] = 2000 / TIME_CYCLE;
 8000288:	4b26      	ldr	r3, [pc, #152]	; (8000324 <getKeyInput+0x184>)
 800028a:	681b      	ldr	r3, [r3, #0]
 800028c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000290:	fb92 f2f3 	sdiv	r2, r2, r3
 8000294:	4924      	ldr	r1, [pc, #144]	; (8000328 <getKeyInput+0x188>)
 8000296:	687b      	ldr	r3, [r7, #4]
 8000298:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if (KeyReg3[i] != KeyReg2[i]){
 800029c:	e029      	b.n	80002f2 <getKeyInput+0x152>
					}
					else {
						TimeOutForKeyPress[i] = 250 / TIME_CYCLE;
 800029e:	4b21      	ldr	r3, [pc, #132]	; (8000324 <getKeyInput+0x184>)
 80002a0:	681b      	ldr	r3, [r3, #0]
 80002a2:	22fa      	movs	r2, #250	; 0xfa
 80002a4:	fb92 f2f3 	sdiv	r2, r2, r3
 80002a8:	491f      	ldr	r1, [pc, #124]	; (8000328 <getKeyInput+0x188>)
 80002aa:	687b      	ldr	r3, [r7, #4]
 80002ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if (KeyReg3[i] != KeyReg2[i]){
 80002b0:	e01f      	b.n	80002f2 <getKeyInput+0x152>
					}
				}
			} else {
				TimeOutForKeyPress[i]--;
 80002b2:	4a1d      	ldr	r2, [pc, #116]	; (8000328 <getKeyInput+0x188>)
 80002b4:	687b      	ldr	r3, [r7, #4]
 80002b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002ba:	1e5a      	subs	r2, r3, #1
 80002bc:	491a      	ldr	r1, [pc, #104]	; (8000328 <getKeyInput+0x188>)
 80002be:	687b      	ldr	r3, [r7, #4]
 80002c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if (TimeOutForKeyPress[i] == 0){
 80002c4:	4a18      	ldr	r2, [pc, #96]	; (8000328 <getKeyInput+0x188>)
 80002c6:	687b      	ldr	r3, [r7, #4]
 80002c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d110      	bne.n	80002f2 <getKeyInput+0x152>
					KeyReg3[i] = NORMAL_STATE;
 80002d0:	4a12      	ldr	r2, [pc, #72]	; (800031c <getKeyInput+0x17c>)
 80002d2:	687b      	ldr	r3, [r7, #4]
 80002d4:	2101      	movs	r1, #1
 80002d6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					long_flag[i] = 1;
 80002da:	4a11      	ldr	r2, [pc, #68]	; (8000320 <getKeyInput+0x180>)
 80002dc:	687b      	ldr	r3, [r7, #4]
 80002de:	2101      	movs	r1, #1
 80002e0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			if (KeyReg3[i] != KeyReg2[i]){
 80002e4:	e005      	b.n	80002f2 <getKeyInput+0x152>
				}
			}
		}
		else {
			long_flag[i] = 0;
 80002e6:	4a0e      	ldr	r2, [pc, #56]	; (8000320 <getKeyInput+0x180>)
 80002e8:	687b      	ldr	r3, [r7, #4]
 80002ea:	2100      	movs	r1, #0
 80002ec:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 80002f0:	e000      	b.n	80002f4 <getKeyInput+0x154>
			if (KeyReg3[i] != KeyReg2[i]){
 80002f2:	bf00      	nop
	for (int i = 0; i < NUM_OF_BUTTONS; i++) {
 80002f4:	687b      	ldr	r3, [r7, #4]
 80002f6:	3301      	adds	r3, #1
 80002f8:	607b      	str	r3, [r7, #4]
 80002fa:	687b      	ldr	r3, [r7, #4]
 80002fc:	2b02      	cmp	r3, #2
 80002fe:	f77f af55 	ble.w	80001ac <getKeyInput+0xc>
		}
	}
}
 8000302:	bf00      	nop
 8000304:	bf00      	nop
 8000306:	3708      	adds	r7, #8
 8000308:	46bd      	mov	sp, r7
 800030a:	bd80      	pop	{r7, pc}
 800030c:	20000010 	.word	0x20000010
 8000310:	20000004 	.word	0x20000004
 8000314:	2000001c 	.word	0x2000001c
 8000318:	40010800 	.word	0x40010800
 800031c:	20000028 	.word	0x20000028
 8000320:	20000084 	.word	0x20000084
 8000324:	20000000 	.word	0x20000000
 8000328:	20000090 	.word	0x20000090

0800032c <display7seg_portrait>:
	uint8_t n= table[num];
	GPIOB->ODR = (GPIOB->ODR & ~0x7F) | (n & 0x7F);
}

//A0 -> F0 for portrait LED
void display7seg_portrait(int num){
 800032c:	b480      	push	{r7}
 800032e:	b085      	sub	sp, #20
 8000330:	af00      	add	r7, sp, #0
 8000332:	6078      	str	r0, [r7, #4]
	uint8_t n= table[num];
 8000334:	4a0a      	ldr	r2, [pc, #40]	; (8000360 <display7seg_portrait+0x34>)
 8000336:	687b      	ldr	r3, [r7, #4]
 8000338:	4413      	add	r3, r2
 800033a:	781b      	ldrb	r3, [r3, #0]
 800033c:	73fb      	strb	r3, [r7, #15]
	GPIOB->ODR = (GPIOB->ODR & ~(0x7F << 7)) | ((n & 0x7F) << 7);
 800033e:	4b09      	ldr	r3, [pc, #36]	; (8000364 <display7seg_portrait+0x38>)
 8000340:	68db      	ldr	r3, [r3, #12]
 8000342:	f423 527e 	bic.w	r2, r3, #16256	; 0x3f80
 8000346:	7bfb      	ldrb	r3, [r7, #15]
 8000348:	01db      	lsls	r3, r3, #7
 800034a:	f403 537e 	and.w	r3, r3, #16256	; 0x3f80
 800034e:	4905      	ldr	r1, [pc, #20]	; (8000364 <display7seg_portrait+0x38>)
 8000350:	4313      	orrs	r3, r2
 8000352:	60cb      	str	r3, [r1, #12]
}
 8000354:	bf00      	nop
 8000356:	3714      	adds	r7, #20
 8000358:	46bd      	mov	sp, r7
 800035a:	bc80      	pop	{r7}
 800035c:	4770      	bx	lr
 800035e:	bf00      	nop
 8000360:	20000034 	.word	0x20000034
 8000364:	40010c00 	.word	0x40010c00

08000368 <update7SEGPortrait>:
			break;
		default:
			break;
	}
}
void update7SEGPortrait(int index){
 8000368:	b580      	push	{r7, lr}
 800036a:	b082      	sub	sp, #8
 800036c:	af00      	add	r7, sp, #0
 800036e:	6078      	str	r0, [r7, #4]
	display7seg_portrait(led_buffer[index]);
 8000370:	4a18      	ldr	r2, [pc, #96]	; (80003d4 <update7SEGPortrait+0x6c>)
 8000372:	687b      	ldr	r3, [r7, #4]
 8000374:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000378:	4618      	mov	r0, r3
 800037a:	f7ff ffd7 	bl	800032c <display7seg_portrait>
	switch(index){
 800037e:	687b      	ldr	r3, [r7, #4]
 8000380:	2b02      	cmp	r3, #2
 8000382:	d003      	beq.n	800038c <update7SEGPortrait+0x24>
 8000384:	687b      	ldr	r3, [r7, #4]
 8000386:	2b03      	cmp	r3, #3
 8000388:	d010      	beq.n	80003ac <update7SEGPortrait+0x44>
			index_led = 2;
			HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, SET);
			HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, RESET);
			break;
		default:
			break;
 800038a:	e01f      	b.n	80003cc <update7SEGPortrait+0x64>
			index_led = 3;
 800038c:	4b12      	ldr	r3, [pc, #72]	; (80003d8 <update7SEGPortrait+0x70>)
 800038e:	2203      	movs	r2, #3
 8000390:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, RESET);
 8000392:	2200      	movs	r2, #0
 8000394:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000398:	4810      	ldr	r0, [pc, #64]	; (80003dc <update7SEGPortrait+0x74>)
 800039a:	f001 fb82 	bl	8001aa2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, SET);
 800039e:	2201      	movs	r2, #1
 80003a0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80003a4:	480d      	ldr	r0, [pc, #52]	; (80003dc <update7SEGPortrait+0x74>)
 80003a6:	f001 fb7c 	bl	8001aa2 <HAL_GPIO_WritePin>
			break;
 80003aa:	e00f      	b.n	80003cc <update7SEGPortrait+0x64>
			index_led = 2;
 80003ac:	4b0a      	ldr	r3, [pc, #40]	; (80003d8 <update7SEGPortrait+0x70>)
 80003ae:	2202      	movs	r2, #2
 80003b0:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, SET);
 80003b2:	2201      	movs	r2, #1
 80003b4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80003b8:	4808      	ldr	r0, [pc, #32]	; (80003dc <update7SEGPortrait+0x74>)
 80003ba:	f001 fb72 	bl	8001aa2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, RESET);
 80003be:	2200      	movs	r2, #0
 80003c0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80003c4:	4805      	ldr	r0, [pc, #20]	; (80003dc <update7SEGPortrait+0x74>)
 80003c6:	f001 fb6c 	bl	8001aa2 <HAL_GPIO_WritePin>
			break;
 80003ca:	bf00      	nop
	}
}
 80003cc:	bf00      	nop
 80003ce:	3708      	adds	r7, #8
 80003d0:	46bd      	mov	sp, r7
 80003d2:	bd80      	pop	{r7, pc}
 80003d4:	200000a0 	.word	0x200000a0
 80003d8:	2000009c 	.word	0x2000009c
 80003dc:	40010800 	.word	0x40010800

080003e0 <updateLedBufferMode1>:

int counter1 = 1, counter2 = 1;
void updateLedBufferMode1(){
 80003e0:	b480      	push	{r7}
 80003e2:	af00      	add	r7, sp, #0
	// 2 7-SEG LED Landscape
	/* Turn on RED-Landscape (count down from RED -> 0) */
	if (counter1 <= RED){
 80003e4:	4b9b      	ldr	r3, [pc, #620]	; (8000654 <updateLedBufferMode1+0x274>)
 80003e6:	681a      	ldr	r2, [r3, #0]
 80003e8:	4b9b      	ldr	r3, [pc, #620]	; (8000658 <updateLedBufferMode1+0x278>)
 80003ea:	681b      	ldr	r3, [r3, #0]
 80003ec:	429a      	cmp	r2, r3
 80003ee:	dc21      	bgt.n	8000434 <updateLedBufferMode1+0x54>
		led_buffer[0] = (RED - counter1 + 1) / 10;
 80003f0:	4b99      	ldr	r3, [pc, #612]	; (8000658 <updateLedBufferMode1+0x278>)
 80003f2:	681a      	ldr	r2, [r3, #0]
 80003f4:	4b97      	ldr	r3, [pc, #604]	; (8000654 <updateLedBufferMode1+0x274>)
 80003f6:	681b      	ldr	r3, [r3, #0]
 80003f8:	1ad3      	subs	r3, r2, r3
 80003fa:	3301      	adds	r3, #1
 80003fc:	4a97      	ldr	r2, [pc, #604]	; (800065c <updateLedBufferMode1+0x27c>)
 80003fe:	fb82 1203 	smull	r1, r2, r2, r3
 8000402:	1092      	asrs	r2, r2, #2
 8000404:	17db      	asrs	r3, r3, #31
 8000406:	1ad3      	subs	r3, r2, r3
 8000408:	4a95      	ldr	r2, [pc, #596]	; (8000660 <updateLedBufferMode1+0x280>)
 800040a:	6013      	str	r3, [r2, #0]
		led_buffer[1] = (RED - counter1 + 1) % 10;
 800040c:	4b92      	ldr	r3, [pc, #584]	; (8000658 <updateLedBufferMode1+0x278>)
 800040e:	681a      	ldr	r2, [r3, #0]
 8000410:	4b90      	ldr	r3, [pc, #576]	; (8000654 <updateLedBufferMode1+0x274>)
 8000412:	681b      	ldr	r3, [r3, #0]
 8000414:	1ad3      	subs	r3, r2, r3
 8000416:	1c59      	adds	r1, r3, #1
 8000418:	4b90      	ldr	r3, [pc, #576]	; (800065c <updateLedBufferMode1+0x27c>)
 800041a:	fb83 2301 	smull	r2, r3, r3, r1
 800041e:	109a      	asrs	r2, r3, #2
 8000420:	17cb      	asrs	r3, r1, #31
 8000422:	1ad2      	subs	r2, r2, r3
 8000424:	4613      	mov	r3, r2
 8000426:	009b      	lsls	r3, r3, #2
 8000428:	4413      	add	r3, r2
 800042a:	005b      	lsls	r3, r3, #1
 800042c:	1aca      	subs	r2, r1, r3
 800042e:	4b8c      	ldr	r3, [pc, #560]	; (8000660 <updateLedBufferMode1+0x280>)
 8000430:	605a      	str	r2, [r3, #4]
 8000432:	e05d      	b.n	80004f0 <updateLedBufferMode1+0x110>
	}
	/* Turn on GREEN-Landscape (count down from GREEN -> 0) */
	else if (counter1 <= (RED + GREEN)){
 8000434:	4b88      	ldr	r3, [pc, #544]	; (8000658 <updateLedBufferMode1+0x278>)
 8000436:	681a      	ldr	r2, [r3, #0]
 8000438:	4b8a      	ldr	r3, [pc, #552]	; (8000664 <updateLedBufferMode1+0x284>)
 800043a:	681b      	ldr	r3, [r3, #0]
 800043c:	441a      	add	r2, r3
 800043e:	4b85      	ldr	r3, [pc, #532]	; (8000654 <updateLedBufferMode1+0x274>)
 8000440:	681b      	ldr	r3, [r3, #0]
 8000442:	429a      	cmp	r2, r3
 8000444:	db27      	blt.n	8000496 <updateLedBufferMode1+0xb6>
		led_buffer[0] = (RED + GREEN - counter1 + 1) / 10;
 8000446:	4b84      	ldr	r3, [pc, #528]	; (8000658 <updateLedBufferMode1+0x278>)
 8000448:	681a      	ldr	r2, [r3, #0]
 800044a:	4b86      	ldr	r3, [pc, #536]	; (8000664 <updateLedBufferMode1+0x284>)
 800044c:	681b      	ldr	r3, [r3, #0]
 800044e:	441a      	add	r2, r3
 8000450:	4b80      	ldr	r3, [pc, #512]	; (8000654 <updateLedBufferMode1+0x274>)
 8000452:	681b      	ldr	r3, [r3, #0]
 8000454:	1ad3      	subs	r3, r2, r3
 8000456:	3301      	adds	r3, #1
 8000458:	4a80      	ldr	r2, [pc, #512]	; (800065c <updateLedBufferMode1+0x27c>)
 800045a:	fb82 1203 	smull	r1, r2, r2, r3
 800045e:	1092      	asrs	r2, r2, #2
 8000460:	17db      	asrs	r3, r3, #31
 8000462:	1ad3      	subs	r3, r2, r3
 8000464:	4a7e      	ldr	r2, [pc, #504]	; (8000660 <updateLedBufferMode1+0x280>)
 8000466:	6013      	str	r3, [r2, #0]
		led_buffer[1] = (RED + GREEN - counter1 + 1) % 10;
 8000468:	4b7b      	ldr	r3, [pc, #492]	; (8000658 <updateLedBufferMode1+0x278>)
 800046a:	681a      	ldr	r2, [r3, #0]
 800046c:	4b7d      	ldr	r3, [pc, #500]	; (8000664 <updateLedBufferMode1+0x284>)
 800046e:	681b      	ldr	r3, [r3, #0]
 8000470:	441a      	add	r2, r3
 8000472:	4b78      	ldr	r3, [pc, #480]	; (8000654 <updateLedBufferMode1+0x274>)
 8000474:	681b      	ldr	r3, [r3, #0]
 8000476:	1ad3      	subs	r3, r2, r3
 8000478:	1c59      	adds	r1, r3, #1
 800047a:	4b78      	ldr	r3, [pc, #480]	; (800065c <updateLedBufferMode1+0x27c>)
 800047c:	fb83 2301 	smull	r2, r3, r3, r1
 8000480:	109a      	asrs	r2, r3, #2
 8000482:	17cb      	asrs	r3, r1, #31
 8000484:	1ad2      	subs	r2, r2, r3
 8000486:	4613      	mov	r3, r2
 8000488:	009b      	lsls	r3, r3, #2
 800048a:	4413      	add	r3, r2
 800048c:	005b      	lsls	r3, r3, #1
 800048e:	1aca      	subs	r2, r1, r3
 8000490:	4b73      	ldr	r3, [pc, #460]	; (8000660 <updateLedBufferMode1+0x280>)
 8000492:	605a      	str	r2, [r3, #4]
 8000494:	e02c      	b.n	80004f0 <updateLedBufferMode1+0x110>
	}
	/* Turn on AMPER-Landscape (count down from AMPER -> 0) */
	else{
		led_buffer[0] = (RED + GREEN + AMBER - counter1 + 1) / 10;
 8000496:	4b70      	ldr	r3, [pc, #448]	; (8000658 <updateLedBufferMode1+0x278>)
 8000498:	681a      	ldr	r2, [r3, #0]
 800049a:	4b72      	ldr	r3, [pc, #456]	; (8000664 <updateLedBufferMode1+0x284>)
 800049c:	681b      	ldr	r3, [r3, #0]
 800049e:	441a      	add	r2, r3
 80004a0:	4b71      	ldr	r3, [pc, #452]	; (8000668 <updateLedBufferMode1+0x288>)
 80004a2:	681b      	ldr	r3, [r3, #0]
 80004a4:	441a      	add	r2, r3
 80004a6:	4b6b      	ldr	r3, [pc, #428]	; (8000654 <updateLedBufferMode1+0x274>)
 80004a8:	681b      	ldr	r3, [r3, #0]
 80004aa:	1ad3      	subs	r3, r2, r3
 80004ac:	3301      	adds	r3, #1
 80004ae:	4a6b      	ldr	r2, [pc, #428]	; (800065c <updateLedBufferMode1+0x27c>)
 80004b0:	fb82 1203 	smull	r1, r2, r2, r3
 80004b4:	1092      	asrs	r2, r2, #2
 80004b6:	17db      	asrs	r3, r3, #31
 80004b8:	1ad3      	subs	r3, r2, r3
 80004ba:	4a69      	ldr	r2, [pc, #420]	; (8000660 <updateLedBufferMode1+0x280>)
 80004bc:	6013      	str	r3, [r2, #0]
		led_buffer[1] = (RED + GREEN + AMBER - counter1 + 1) % 10;
 80004be:	4b66      	ldr	r3, [pc, #408]	; (8000658 <updateLedBufferMode1+0x278>)
 80004c0:	681a      	ldr	r2, [r3, #0]
 80004c2:	4b68      	ldr	r3, [pc, #416]	; (8000664 <updateLedBufferMode1+0x284>)
 80004c4:	681b      	ldr	r3, [r3, #0]
 80004c6:	441a      	add	r2, r3
 80004c8:	4b67      	ldr	r3, [pc, #412]	; (8000668 <updateLedBufferMode1+0x288>)
 80004ca:	681b      	ldr	r3, [r3, #0]
 80004cc:	441a      	add	r2, r3
 80004ce:	4b61      	ldr	r3, [pc, #388]	; (8000654 <updateLedBufferMode1+0x274>)
 80004d0:	681b      	ldr	r3, [r3, #0]
 80004d2:	1ad3      	subs	r3, r2, r3
 80004d4:	1c59      	adds	r1, r3, #1
 80004d6:	4b61      	ldr	r3, [pc, #388]	; (800065c <updateLedBufferMode1+0x27c>)
 80004d8:	fb83 2301 	smull	r2, r3, r3, r1
 80004dc:	109a      	asrs	r2, r3, #2
 80004de:	17cb      	asrs	r3, r1, #31
 80004e0:	1ad2      	subs	r2, r2, r3
 80004e2:	4613      	mov	r3, r2
 80004e4:	009b      	lsls	r3, r3, #2
 80004e6:	4413      	add	r3, r2
 80004e8:	005b      	lsls	r3, r3, #1
 80004ea:	1aca      	subs	r2, r1, r3
 80004ec:	4b5c      	ldr	r3, [pc, #368]	; (8000660 <updateLedBufferMode1+0x280>)
 80004ee:	605a      	str	r2, [r3, #4]
	}
	counter1++;
 80004f0:	4b58      	ldr	r3, [pc, #352]	; (8000654 <updateLedBufferMode1+0x274>)
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	3301      	adds	r3, #1
 80004f6:	4a57      	ldr	r2, [pc, #348]	; (8000654 <updateLedBufferMode1+0x274>)
 80004f8:	6013      	str	r3, [r2, #0]
	/* Return to turn on RED-Landscape */
	if (counter1 > RED + AMBER + GREEN) counter1 = 1;
 80004fa:	4b57      	ldr	r3, [pc, #348]	; (8000658 <updateLedBufferMode1+0x278>)
 80004fc:	681a      	ldr	r2, [r3, #0]
 80004fe:	4b5a      	ldr	r3, [pc, #360]	; (8000668 <updateLedBufferMode1+0x288>)
 8000500:	681b      	ldr	r3, [r3, #0]
 8000502:	441a      	add	r2, r3
 8000504:	4b57      	ldr	r3, [pc, #348]	; (8000664 <updateLedBufferMode1+0x284>)
 8000506:	681b      	ldr	r3, [r3, #0]
 8000508:	441a      	add	r2, r3
 800050a:	4b52      	ldr	r3, [pc, #328]	; (8000654 <updateLedBufferMode1+0x274>)
 800050c:	681b      	ldr	r3, [r3, #0]
 800050e:	429a      	cmp	r2, r3
 8000510:	da02      	bge.n	8000518 <updateLedBufferMode1+0x138>
 8000512:	4b50      	ldr	r3, [pc, #320]	; (8000654 <updateLedBufferMode1+0x274>)
 8000514:	2201      	movs	r2, #1
 8000516:	601a      	str	r2, [r3, #0]


	// 2 7-SEG LED Portrait
	/* Turn on GREEN-Portrait (count down from GREEN -> 0) */
	if (counter2 <= GREEN){
 8000518:	4b54      	ldr	r3, [pc, #336]	; (800066c <updateLedBufferMode1+0x28c>)
 800051a:	681a      	ldr	r2, [r3, #0]
 800051c:	4b51      	ldr	r3, [pc, #324]	; (8000664 <updateLedBufferMode1+0x284>)
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	429a      	cmp	r2, r3
 8000522:	dc21      	bgt.n	8000568 <updateLedBufferMode1+0x188>
		led_buffer[2] = (GREEN - counter2 + 1) / 10;
 8000524:	4b4f      	ldr	r3, [pc, #316]	; (8000664 <updateLedBufferMode1+0x284>)
 8000526:	681a      	ldr	r2, [r3, #0]
 8000528:	4b50      	ldr	r3, [pc, #320]	; (800066c <updateLedBufferMode1+0x28c>)
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	1ad3      	subs	r3, r2, r3
 800052e:	3301      	adds	r3, #1
 8000530:	4a4a      	ldr	r2, [pc, #296]	; (800065c <updateLedBufferMode1+0x27c>)
 8000532:	fb82 1203 	smull	r1, r2, r2, r3
 8000536:	1092      	asrs	r2, r2, #2
 8000538:	17db      	asrs	r3, r3, #31
 800053a:	1ad3      	subs	r3, r2, r3
 800053c:	4a48      	ldr	r2, [pc, #288]	; (8000660 <updateLedBufferMode1+0x280>)
 800053e:	6093      	str	r3, [r2, #8]
		led_buffer[3] = (GREEN - counter2 + 1) % 10;
 8000540:	4b48      	ldr	r3, [pc, #288]	; (8000664 <updateLedBufferMode1+0x284>)
 8000542:	681a      	ldr	r2, [r3, #0]
 8000544:	4b49      	ldr	r3, [pc, #292]	; (800066c <updateLedBufferMode1+0x28c>)
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	1ad3      	subs	r3, r2, r3
 800054a:	1c59      	adds	r1, r3, #1
 800054c:	4b43      	ldr	r3, [pc, #268]	; (800065c <updateLedBufferMode1+0x27c>)
 800054e:	fb83 2301 	smull	r2, r3, r3, r1
 8000552:	109a      	asrs	r2, r3, #2
 8000554:	17cb      	asrs	r3, r1, #31
 8000556:	1ad2      	subs	r2, r2, r3
 8000558:	4613      	mov	r3, r2
 800055a:	009b      	lsls	r3, r3, #2
 800055c:	4413      	add	r3, r2
 800055e:	005b      	lsls	r3, r3, #1
 8000560:	1aca      	subs	r2, r1, r3
 8000562:	4b3f      	ldr	r3, [pc, #252]	; (8000660 <updateLedBufferMode1+0x280>)
 8000564:	60da      	str	r2, [r3, #12]
 8000566:	e05d      	b.n	8000624 <updateLedBufferMode1+0x244>
	}
	/* Turn on AMPER-Portrait (count down from AMPER -> 0) */
	else if (counter2 <= (AMBER + GREEN)){
 8000568:	4b3f      	ldr	r3, [pc, #252]	; (8000668 <updateLedBufferMode1+0x288>)
 800056a:	681a      	ldr	r2, [r3, #0]
 800056c:	4b3d      	ldr	r3, [pc, #244]	; (8000664 <updateLedBufferMode1+0x284>)
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	441a      	add	r2, r3
 8000572:	4b3e      	ldr	r3, [pc, #248]	; (800066c <updateLedBufferMode1+0x28c>)
 8000574:	681b      	ldr	r3, [r3, #0]
 8000576:	429a      	cmp	r2, r3
 8000578:	db27      	blt.n	80005ca <updateLedBufferMode1+0x1ea>
		led_buffer[2] = (AMBER + GREEN - counter2 + 1) / 10;
 800057a:	4b3b      	ldr	r3, [pc, #236]	; (8000668 <updateLedBufferMode1+0x288>)
 800057c:	681a      	ldr	r2, [r3, #0]
 800057e:	4b39      	ldr	r3, [pc, #228]	; (8000664 <updateLedBufferMode1+0x284>)
 8000580:	681b      	ldr	r3, [r3, #0]
 8000582:	441a      	add	r2, r3
 8000584:	4b39      	ldr	r3, [pc, #228]	; (800066c <updateLedBufferMode1+0x28c>)
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	1ad3      	subs	r3, r2, r3
 800058a:	3301      	adds	r3, #1
 800058c:	4a33      	ldr	r2, [pc, #204]	; (800065c <updateLedBufferMode1+0x27c>)
 800058e:	fb82 1203 	smull	r1, r2, r2, r3
 8000592:	1092      	asrs	r2, r2, #2
 8000594:	17db      	asrs	r3, r3, #31
 8000596:	1ad3      	subs	r3, r2, r3
 8000598:	4a31      	ldr	r2, [pc, #196]	; (8000660 <updateLedBufferMode1+0x280>)
 800059a:	6093      	str	r3, [r2, #8]
		led_buffer[3] = (AMBER + GREEN - counter2 + 1) % 10;
 800059c:	4b32      	ldr	r3, [pc, #200]	; (8000668 <updateLedBufferMode1+0x288>)
 800059e:	681a      	ldr	r2, [r3, #0]
 80005a0:	4b30      	ldr	r3, [pc, #192]	; (8000664 <updateLedBufferMode1+0x284>)
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	441a      	add	r2, r3
 80005a6:	4b31      	ldr	r3, [pc, #196]	; (800066c <updateLedBufferMode1+0x28c>)
 80005a8:	681b      	ldr	r3, [r3, #0]
 80005aa:	1ad3      	subs	r3, r2, r3
 80005ac:	1c59      	adds	r1, r3, #1
 80005ae:	4b2b      	ldr	r3, [pc, #172]	; (800065c <updateLedBufferMode1+0x27c>)
 80005b0:	fb83 2301 	smull	r2, r3, r3, r1
 80005b4:	109a      	asrs	r2, r3, #2
 80005b6:	17cb      	asrs	r3, r1, #31
 80005b8:	1ad2      	subs	r2, r2, r3
 80005ba:	4613      	mov	r3, r2
 80005bc:	009b      	lsls	r3, r3, #2
 80005be:	4413      	add	r3, r2
 80005c0:	005b      	lsls	r3, r3, #1
 80005c2:	1aca      	subs	r2, r1, r3
 80005c4:	4b26      	ldr	r3, [pc, #152]	; (8000660 <updateLedBufferMode1+0x280>)
 80005c6:	60da      	str	r2, [r3, #12]
 80005c8:	e02c      	b.n	8000624 <updateLedBufferMode1+0x244>
	}
	/* Turn on RED-Portrait (count down from RED -> 0) */
	else {
		led_buffer[2] = (RED + GREEN + AMBER - counter2 + 1) / 10;
 80005ca:	4b23      	ldr	r3, [pc, #140]	; (8000658 <updateLedBufferMode1+0x278>)
 80005cc:	681a      	ldr	r2, [r3, #0]
 80005ce:	4b25      	ldr	r3, [pc, #148]	; (8000664 <updateLedBufferMode1+0x284>)
 80005d0:	681b      	ldr	r3, [r3, #0]
 80005d2:	441a      	add	r2, r3
 80005d4:	4b24      	ldr	r3, [pc, #144]	; (8000668 <updateLedBufferMode1+0x288>)
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	441a      	add	r2, r3
 80005da:	4b24      	ldr	r3, [pc, #144]	; (800066c <updateLedBufferMode1+0x28c>)
 80005dc:	681b      	ldr	r3, [r3, #0]
 80005de:	1ad3      	subs	r3, r2, r3
 80005e0:	3301      	adds	r3, #1
 80005e2:	4a1e      	ldr	r2, [pc, #120]	; (800065c <updateLedBufferMode1+0x27c>)
 80005e4:	fb82 1203 	smull	r1, r2, r2, r3
 80005e8:	1092      	asrs	r2, r2, #2
 80005ea:	17db      	asrs	r3, r3, #31
 80005ec:	1ad3      	subs	r3, r2, r3
 80005ee:	4a1c      	ldr	r2, [pc, #112]	; (8000660 <updateLedBufferMode1+0x280>)
 80005f0:	6093      	str	r3, [r2, #8]
		led_buffer[3] = (RED + GREEN + AMBER - counter2 + 1) % 10;
 80005f2:	4b19      	ldr	r3, [pc, #100]	; (8000658 <updateLedBufferMode1+0x278>)
 80005f4:	681a      	ldr	r2, [r3, #0]
 80005f6:	4b1b      	ldr	r3, [pc, #108]	; (8000664 <updateLedBufferMode1+0x284>)
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	441a      	add	r2, r3
 80005fc:	4b1a      	ldr	r3, [pc, #104]	; (8000668 <updateLedBufferMode1+0x288>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	441a      	add	r2, r3
 8000602:	4b1a      	ldr	r3, [pc, #104]	; (800066c <updateLedBufferMode1+0x28c>)
 8000604:	681b      	ldr	r3, [r3, #0]
 8000606:	1ad3      	subs	r3, r2, r3
 8000608:	1c59      	adds	r1, r3, #1
 800060a:	4b14      	ldr	r3, [pc, #80]	; (800065c <updateLedBufferMode1+0x27c>)
 800060c:	fb83 2301 	smull	r2, r3, r3, r1
 8000610:	109a      	asrs	r2, r3, #2
 8000612:	17cb      	asrs	r3, r1, #31
 8000614:	1ad2      	subs	r2, r2, r3
 8000616:	4613      	mov	r3, r2
 8000618:	009b      	lsls	r3, r3, #2
 800061a:	4413      	add	r3, r2
 800061c:	005b      	lsls	r3, r3, #1
 800061e:	1aca      	subs	r2, r1, r3
 8000620:	4b0f      	ldr	r3, [pc, #60]	; (8000660 <updateLedBufferMode1+0x280>)
 8000622:	60da      	str	r2, [r3, #12]
	}
	counter2++;
 8000624:	4b11      	ldr	r3, [pc, #68]	; (800066c <updateLedBufferMode1+0x28c>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	3301      	adds	r3, #1
 800062a:	4a10      	ldr	r2, [pc, #64]	; (800066c <updateLedBufferMode1+0x28c>)
 800062c:	6013      	str	r3, [r2, #0]
	/* Return to turn on GREEN-Portrait */
	if (counter2 > RED + AMBER + GREEN) counter2 = 1;
 800062e:	4b0a      	ldr	r3, [pc, #40]	; (8000658 <updateLedBufferMode1+0x278>)
 8000630:	681a      	ldr	r2, [r3, #0]
 8000632:	4b0d      	ldr	r3, [pc, #52]	; (8000668 <updateLedBufferMode1+0x288>)
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	441a      	add	r2, r3
 8000638:	4b0a      	ldr	r3, [pc, #40]	; (8000664 <updateLedBufferMode1+0x284>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	441a      	add	r2, r3
 800063e:	4b0b      	ldr	r3, [pc, #44]	; (800066c <updateLedBufferMode1+0x28c>)
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	429a      	cmp	r2, r3
 8000644:	da02      	bge.n	800064c <updateLedBufferMode1+0x26c>
 8000646:	4b09      	ldr	r3, [pc, #36]	; (800066c <updateLedBufferMode1+0x28c>)
 8000648:	2201      	movs	r2, #1
 800064a:	601a      	str	r2, [r3, #0]
}
 800064c:	bf00      	nop
 800064e:	46bd      	mov	sp, r7
 8000650:	bc80      	pop	{r7}
 8000652:	4770      	bx	lr
 8000654:	20000040 	.word	0x20000040
 8000658:	20000048 	.word	0x20000048
 800065c:	66666667 	.word	0x66666667
 8000660:	200000a0 	.word	0x200000a0
 8000664:	20000050 	.word	0x20000050
 8000668:	2000004c 	.word	0x2000004c
 800066c:	20000044 	.word	0x20000044

08000670 <updateLedBufferMode2>:

void updateLedBufferMode2(){
 8000670:	b480      	push	{r7}
 8000672:	af00      	add	r7, sp, #0
	// Display mode 2
	led_buffer[0] = 0;
 8000674:	4b11      	ldr	r3, [pc, #68]	; (80006bc <updateLedBufferMode2+0x4c>)
 8000676:	2200      	movs	r2, #0
 8000678:	601a      	str	r2, [r3, #0]
	led_buffer[1] = 2;
 800067a:	4b10      	ldr	r3, [pc, #64]	; (80006bc <updateLedBufferMode2+0x4c>)
 800067c:	2202      	movs	r2, #2
 800067e:	605a      	str	r2, [r3, #4]
	// Display value RED
	led_buffer[2] = RED / 10;
 8000680:	4b0f      	ldr	r3, [pc, #60]	; (80006c0 <updateLedBufferMode2+0x50>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	4a0f      	ldr	r2, [pc, #60]	; (80006c4 <updateLedBufferMode2+0x54>)
 8000686:	fb82 1203 	smull	r1, r2, r2, r3
 800068a:	1092      	asrs	r2, r2, #2
 800068c:	17db      	asrs	r3, r3, #31
 800068e:	1ad3      	subs	r3, r2, r3
 8000690:	4a0a      	ldr	r2, [pc, #40]	; (80006bc <updateLedBufferMode2+0x4c>)
 8000692:	6093      	str	r3, [r2, #8]
	led_buffer[3] = RED % 10;
 8000694:	4b0a      	ldr	r3, [pc, #40]	; (80006c0 <updateLedBufferMode2+0x50>)
 8000696:	6819      	ldr	r1, [r3, #0]
 8000698:	4b0a      	ldr	r3, [pc, #40]	; (80006c4 <updateLedBufferMode2+0x54>)
 800069a:	fb83 2301 	smull	r2, r3, r3, r1
 800069e:	109a      	asrs	r2, r3, #2
 80006a0:	17cb      	asrs	r3, r1, #31
 80006a2:	1ad2      	subs	r2, r2, r3
 80006a4:	4613      	mov	r3, r2
 80006a6:	009b      	lsls	r3, r3, #2
 80006a8:	4413      	add	r3, r2
 80006aa:	005b      	lsls	r3, r3, #1
 80006ac:	1aca      	subs	r2, r1, r3
 80006ae:	4b03      	ldr	r3, [pc, #12]	; (80006bc <updateLedBufferMode2+0x4c>)
 80006b0:	60da      	str	r2, [r3, #12]
}
 80006b2:	bf00      	nop
 80006b4:	46bd      	mov	sp, r7
 80006b6:	bc80      	pop	{r7}
 80006b8:	4770      	bx	lr
 80006ba:	bf00      	nop
 80006bc:	200000a0 	.word	0x200000a0
 80006c0:	20000048 	.word	0x20000048
 80006c4:	66666667 	.word	0x66666667

080006c8 <updateLedBufferMode3>:

void updateLedBufferMode3(){
 80006c8:	b480      	push	{r7}
 80006ca:	af00      	add	r7, sp, #0
	// Display mode 3
	led_buffer[0] = 0;
 80006cc:	4b11      	ldr	r3, [pc, #68]	; (8000714 <updateLedBufferMode3+0x4c>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	601a      	str	r2, [r3, #0]
	led_buffer[1] = 3;
 80006d2:	4b10      	ldr	r3, [pc, #64]	; (8000714 <updateLedBufferMode3+0x4c>)
 80006d4:	2203      	movs	r2, #3
 80006d6:	605a      	str	r2, [r3, #4]
	// Display value AMBER
	led_buffer[2] = AMBER / 10;
 80006d8:	4b0f      	ldr	r3, [pc, #60]	; (8000718 <updateLedBufferMode3+0x50>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	4a0f      	ldr	r2, [pc, #60]	; (800071c <updateLedBufferMode3+0x54>)
 80006de:	fb82 1203 	smull	r1, r2, r2, r3
 80006e2:	1092      	asrs	r2, r2, #2
 80006e4:	17db      	asrs	r3, r3, #31
 80006e6:	1ad3      	subs	r3, r2, r3
 80006e8:	4a0a      	ldr	r2, [pc, #40]	; (8000714 <updateLedBufferMode3+0x4c>)
 80006ea:	6093      	str	r3, [r2, #8]
	led_buffer[3] = AMBER % 10;
 80006ec:	4b0a      	ldr	r3, [pc, #40]	; (8000718 <updateLedBufferMode3+0x50>)
 80006ee:	6819      	ldr	r1, [r3, #0]
 80006f0:	4b0a      	ldr	r3, [pc, #40]	; (800071c <updateLedBufferMode3+0x54>)
 80006f2:	fb83 2301 	smull	r2, r3, r3, r1
 80006f6:	109a      	asrs	r2, r3, #2
 80006f8:	17cb      	asrs	r3, r1, #31
 80006fa:	1ad2      	subs	r2, r2, r3
 80006fc:	4613      	mov	r3, r2
 80006fe:	009b      	lsls	r3, r3, #2
 8000700:	4413      	add	r3, r2
 8000702:	005b      	lsls	r3, r3, #1
 8000704:	1aca      	subs	r2, r1, r3
 8000706:	4b03      	ldr	r3, [pc, #12]	; (8000714 <updateLedBufferMode3+0x4c>)
 8000708:	60da      	str	r2, [r3, #12]
}
 800070a:	bf00      	nop
 800070c:	46bd      	mov	sp, r7
 800070e:	bc80      	pop	{r7}
 8000710:	4770      	bx	lr
 8000712:	bf00      	nop
 8000714:	200000a0 	.word	0x200000a0
 8000718:	2000004c 	.word	0x2000004c
 800071c:	66666667 	.word	0x66666667

08000720 <updateLedBufferMode4>:

void updateLedBufferMode4(){
 8000720:	b480      	push	{r7}
 8000722:	af00      	add	r7, sp, #0
	// Display mode 4
	led_buffer[0] = 0;
 8000724:	4b11      	ldr	r3, [pc, #68]	; (800076c <updateLedBufferMode4+0x4c>)
 8000726:	2200      	movs	r2, #0
 8000728:	601a      	str	r2, [r3, #0]
	led_buffer[1] = 4;
 800072a:	4b10      	ldr	r3, [pc, #64]	; (800076c <updateLedBufferMode4+0x4c>)
 800072c:	2204      	movs	r2, #4
 800072e:	605a      	str	r2, [r3, #4]
	// Display value GREEN
	led_buffer[2] = GREEN / 10;
 8000730:	4b0f      	ldr	r3, [pc, #60]	; (8000770 <updateLedBufferMode4+0x50>)
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	4a0f      	ldr	r2, [pc, #60]	; (8000774 <updateLedBufferMode4+0x54>)
 8000736:	fb82 1203 	smull	r1, r2, r2, r3
 800073a:	1092      	asrs	r2, r2, #2
 800073c:	17db      	asrs	r3, r3, #31
 800073e:	1ad3      	subs	r3, r2, r3
 8000740:	4a0a      	ldr	r2, [pc, #40]	; (800076c <updateLedBufferMode4+0x4c>)
 8000742:	6093      	str	r3, [r2, #8]
	led_buffer[3] = GREEN % 10;
 8000744:	4b0a      	ldr	r3, [pc, #40]	; (8000770 <updateLedBufferMode4+0x50>)
 8000746:	6819      	ldr	r1, [r3, #0]
 8000748:	4b0a      	ldr	r3, [pc, #40]	; (8000774 <updateLedBufferMode4+0x54>)
 800074a:	fb83 2301 	smull	r2, r3, r3, r1
 800074e:	109a      	asrs	r2, r3, #2
 8000750:	17cb      	asrs	r3, r1, #31
 8000752:	1ad2      	subs	r2, r2, r3
 8000754:	4613      	mov	r3, r2
 8000756:	009b      	lsls	r3, r3, #2
 8000758:	4413      	add	r3, r2
 800075a:	005b      	lsls	r3, r3, #1
 800075c:	1aca      	subs	r2, r1, r3
 800075e:	4b03      	ldr	r3, [pc, #12]	; (800076c <updateLedBufferMode4+0x4c>)
 8000760:	60da      	str	r2, [r3, #12]
}
 8000762:	bf00      	nop
 8000764:	46bd      	mov	sp, r7
 8000766:	bc80      	pop	{r7}
 8000768:	4770      	bx	lr
 800076a:	bf00      	nop
 800076c:	200000a0 	.word	0x200000a0
 8000770:	20000050 	.word	0x20000050
 8000774:	66666667 	.word	0x66666667

08000778 <fsm_traffic_light>:

#include "fsm_traffic_light.h"

int status = INIT;

void fsm_traffic_light(){
 8000778:	b580      	push	{r7, lr}
 800077a:	af00      	add	r7, sp, #0
	switch(status){
 800077c:	4bc4      	ldr	r3, [pc, #784]	; (8000a90 <fsm_traffic_light+0x318>)
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	2b2a      	cmp	r3, #42	; 0x2a
 8000782:	f200 844c 	bhi.w	800101e <fsm_traffic_light+0x8a6>
 8000786:	a201      	add	r2, pc, #4	; (adr r2, 800078c <fsm_traffic_light+0x14>)
 8000788:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800078c:	08000839 	.word	0x08000839
 8000790:	08000843 	.word	0x08000843
 8000794:	08000b31 	.word	0x08000b31
 8000798:	08000cc3 	.word	0x08000cc3
 800079c:	08000e65 	.word	0x08000e65
 80007a0:	0800101f 	.word	0x0800101f
 80007a4:	0800101f 	.word	0x0800101f
 80007a8:	0800101f 	.word	0x0800101f
 80007ac:	0800101f 	.word	0x0800101f
 80007b0:	0800101f 	.word	0x0800101f
 80007b4:	0800101f 	.word	0x0800101f
 80007b8:	080008e1 	.word	0x080008e1
 80007bc:	08000979 	.word	0x08000979
 80007c0:	080009f9 	.word	0x080009f9
 80007c4:	08000ab1 	.word	0x08000ab1
 80007c8:	0800101f 	.word	0x0800101f
 80007cc:	0800101f 	.word	0x0800101f
 80007d0:	0800101f 	.word	0x0800101f
 80007d4:	0800101f 	.word	0x0800101f
 80007d8:	0800101f 	.word	0x0800101f
 80007dc:	0800101f 	.word	0x0800101f
 80007e0:	08000bb3 	.word	0x08000bb3
 80007e4:	08000c3b 	.word	0x08000c3b
 80007e8:	0800101f 	.word	0x0800101f
 80007ec:	0800101f 	.word	0x0800101f
 80007f0:	0800101f 	.word	0x0800101f
 80007f4:	0800101f 	.word	0x0800101f
 80007f8:	0800101f 	.word	0x0800101f
 80007fc:	0800101f 	.word	0x0800101f
 8000800:	0800101f 	.word	0x0800101f
 8000804:	0800101f 	.word	0x0800101f
 8000808:	08000d5d 	.word	0x08000d5d
 800080c:	08000de1 	.word	0x08000de1
 8000810:	0800101f 	.word	0x0800101f
 8000814:	0800101f 	.word	0x0800101f
 8000818:	0800101f 	.word	0x0800101f
 800081c:	0800101f 	.word	0x0800101f
 8000820:	0800101f 	.word	0x0800101f
 8000824:	0800101f 	.word	0x0800101f
 8000828:	0800101f 	.word	0x0800101f
 800082c:	0800101f 	.word	0x0800101f
 8000830:	08000ee7 	.word	0x08000ee7
 8000834:	08000f95 	.word	0x08000f95

	//INIT
	case INIT:
		status = MODE1;
 8000838:	4b95      	ldr	r3, [pc, #596]	; (8000a90 <fsm_traffic_light+0x318>)
 800083a:	2201      	movs	r2, #1
 800083c:	601a      	str	r2, [r3, #0]
		break;
 800083e:	f000 bc12 	b.w	8001066 <fsm_traffic_light+0x8ee>

	//MODE1
	case MODE1:
		status = RED_GREEN;
 8000842:	4b93      	ldr	r3, [pc, #588]	; (8000a90 <fsm_traffic_light+0x318>)
 8000844:	220b      	movs	r2, #11
 8000846:	601a      	str	r2, [r3, #0]
		//Set up LED
		HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin, RESET);
 8000848:	2200      	movs	r2, #0
 800084a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800084e:	4891      	ldr	r0, [pc, #580]	; (8000a94 <fsm_traffic_light+0x31c>)
 8000850:	f001 f927 	bl	8001aa2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(A1_GPIO_Port, A1_Pin, SET);
 8000854:	2201      	movs	r2, #1
 8000856:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800085a:	488e      	ldr	r0, [pc, #568]	; (8000a94 <fsm_traffic_light+0x31c>)
 800085c:	f001 f921 	bl	8001aa2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(G1_GPIO_Port, G1_Pin, SET);
 8000860:	2201      	movs	r2, #1
 8000862:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000866:	488b      	ldr	r0, [pc, #556]	; (8000a94 <fsm_traffic_light+0x31c>)
 8000868:	f001 f91b 	bl	8001aa2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin, SET);
 800086c:	2201      	movs	r2, #1
 800086e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000872:	4888      	ldr	r0, [pc, #544]	; (8000a94 <fsm_traffic_light+0x31c>)
 8000874:	f001 f915 	bl	8001aa2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(A2_GPIO_Port, A2_Pin, SET);
 8000878:	2201      	movs	r2, #1
 800087a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800087e:	4885      	ldr	r0, [pc, #532]	; (8000a94 <fsm_traffic_light+0x31c>)
 8000880:	f001 f90f 	bl	8001aa2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(G2_GPIO_Port, G2_Pin, RESET);
 8000884:	2200      	movs	r2, #0
 8000886:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800088a:	4882      	ldr	r0, [pc, #520]	; (8000a94 <fsm_traffic_light+0x31c>)
 800088c:	f001 f909 	bl	8001aa2 <HAL_GPIO_WritePin>

		//Set up default value
		counter1 = counter2 = 1;
 8000890:	4b81      	ldr	r3, [pc, #516]	; (8000a98 <fsm_traffic_light+0x320>)
 8000892:	2201      	movs	r2, #1
 8000894:	601a      	str	r2, [r3, #0]
 8000896:	4b80      	ldr	r3, [pc, #512]	; (8000a98 <fsm_traffic_light+0x320>)
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	4a80      	ldr	r2, [pc, #512]	; (8000a9c <fsm_traffic_light+0x324>)
 800089c:	6013      	str	r3, [r2, #0]
		index_led = 0;
 800089e:	4b80      	ldr	r3, [pc, #512]	; (8000aa0 <fsm_traffic_light+0x328>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	601a      	str	r2, [r3, #0]
		updateLedBufferMode1();
 80008a4:	f7ff fd9c 	bl	80003e0 <updateLedBufferMode1>
		update7SEGPortrait(index_led);
 80008a8:	4b7d      	ldr	r3, [pc, #500]	; (8000aa0 <fsm_traffic_light+0x328>)
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	4618      	mov	r0, r3
 80008ae:	f7ff fd5b 	bl	8000368 <update7SEGPortrait>

		//Set timer
		setTimer(0, GREEN * 1000);	// Set timer for RED_GREEN
 80008b2:	4b7c      	ldr	r3, [pc, #496]	; (8000aa4 <fsm_traffic_light+0x32c>)
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80008ba:	fb02 f303 	mul.w	r3, r2, r3
 80008be:	4619      	mov	r1, r3
 80008c0:	2000      	movs	r0, #0
 80008c2:	f000 fce1 	bl	8001288 <setTimer>
		setTimer(1, 1000);			// Set timer for updateLedBufferMode1
 80008c6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80008ca:	2001      	movs	r0, #1
 80008cc:	f000 fcdc 	bl	8001288 <setTimer>
		setTimer(2, 250);			// Set timer for 7SEG LED
 80008d0:	21fa      	movs	r1, #250	; 0xfa
 80008d2:	2002      	movs	r0, #2
 80008d4:	f000 fcd8 	bl	8001288 <setTimer>
		clearTimer(3);				// Clear timer for blinking LED
 80008d8:	2003      	movs	r0, #3
 80008da:	f000 fcf5 	bl	80012c8 <clearTimer>

		break;
 80008de:	e3c2      	b.n	8001066 <fsm_traffic_light+0x8ee>

	case RED_GREEN:
		//Set up LED
		HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin, RESET);
 80008e0:	2200      	movs	r2, #0
 80008e2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80008e6:	486b      	ldr	r0, [pc, #428]	; (8000a94 <fsm_traffic_light+0x31c>)
 80008e8:	f001 f8db 	bl	8001aa2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(A1_GPIO_Port, A1_Pin, SET);
 80008ec:	2201      	movs	r2, #1
 80008ee:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80008f2:	4868      	ldr	r0, [pc, #416]	; (8000a94 <fsm_traffic_light+0x31c>)
 80008f4:	f001 f8d5 	bl	8001aa2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(R2_GPIO_Port, R2_Pin, SET);
 80008f8:	2201      	movs	r2, #1
 80008fa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008fe:	4865      	ldr	r0, [pc, #404]	; (8000a94 <fsm_traffic_light+0x31c>)
 8000900:	f001 f8cf 	bl	8001aa2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(G2_GPIO_Port, G2_Pin, RESET);
 8000904:	2200      	movs	r2, #0
 8000906:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800090a:	4862      	ldr	r0, [pc, #392]	; (8000a94 <fsm_traffic_light+0x31c>)
 800090c:	f001 f8c9 	bl	8001aa2 <HAL_GPIO_WritePin>

		if (timer_flag[0] == 1){
 8000910:	4b65      	ldr	r3, [pc, #404]	; (8000aa8 <fsm_traffic_light+0x330>)
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	2b01      	cmp	r3, #1
 8000916:	d10c      	bne.n	8000932 <fsm_traffic_light+0x1ba>
			status = RED_AMBER;
 8000918:	4b5d      	ldr	r3, [pc, #372]	; (8000a90 <fsm_traffic_light+0x318>)
 800091a:	220c      	movs	r2, #12
 800091c:	601a      	str	r2, [r3, #0]
			setTimer(0, AMBER * 1000);
 800091e:	4b63      	ldr	r3, [pc, #396]	; (8000aac <fsm_traffic_light+0x334>)
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000926:	fb02 f303 	mul.w	r3, r2, r3
 800092a:	4619      	mov	r1, r3
 800092c:	2000      	movs	r0, #0
 800092e:	f000 fcab 	bl	8001288 <setTimer>
		}

		if (timer_flag[1] == 1){
 8000932:	4b5d      	ldr	r3, [pc, #372]	; (8000aa8 <fsm_traffic_light+0x330>)
 8000934:	685b      	ldr	r3, [r3, #4]
 8000936:	2b01      	cmp	r3, #1
 8000938:	d106      	bne.n	8000948 <fsm_traffic_light+0x1d0>
			updateLedBufferMode1();
 800093a:	f7ff fd51 	bl	80003e0 <updateLedBufferMode1>
			setTimer(1, 1000);
 800093e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000942:	2001      	movs	r0, #1
 8000944:	f000 fca0 	bl	8001288 <setTimer>
		}

		if (timer_flag[2] == 1){
 8000948:	4b57      	ldr	r3, [pc, #348]	; (8000aa8 <fsm_traffic_light+0x330>)
 800094a:	689b      	ldr	r3, [r3, #8]
 800094c:	2b01      	cmp	r3, #1
 800094e:	d108      	bne.n	8000962 <fsm_traffic_light+0x1ea>
			update7SEGPortrait(index_led);
 8000950:	4b53      	ldr	r3, [pc, #332]	; (8000aa0 <fsm_traffic_light+0x328>)
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	4618      	mov	r0, r3
 8000956:	f7ff fd07 	bl	8000368 <update7SEGPortrait>
			setTimer(2, 250);
 800095a:	21fa      	movs	r1, #250	; 0xfa
 800095c:	2002      	movs	r0, #2
 800095e:	f000 fc93 	bl	8001288 <setTimer>
		}
		// If button 1 is pressed, come to MODE2
		if (isButtonPressed(0) == 1){
 8000962:	2000      	movs	r0, #0
 8000964:	f7ff fbf2 	bl	800014c <isButtonPressed>
 8000968:	4603      	mov	r3, r0
 800096a:	2b01      	cmp	r3, #1
 800096c:	f040 8359 	bne.w	8001022 <fsm_traffic_light+0x8aa>
			status = MODE2;
 8000970:	4b47      	ldr	r3, [pc, #284]	; (8000a90 <fsm_traffic_light+0x318>)
 8000972:	2202      	movs	r2, #2
 8000974:	601a      	str	r2, [r3, #0]
		}
		break;
 8000976:	e354      	b.n	8001022 <fsm_traffic_light+0x8aa>

	case RED_AMBER:
		//Set up LED
		HAL_GPIO_WritePin(G2_GPIO_Port, G2_Pin, SET);
 8000978:	2201      	movs	r2, #1
 800097a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800097e:	4845      	ldr	r0, [pc, #276]	; (8000a94 <fsm_traffic_light+0x31c>)
 8000980:	f001 f88f 	bl	8001aa2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(A2_GPIO_Port, A2_Pin, RESET);
 8000984:	2200      	movs	r2, #0
 8000986:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800098a:	4842      	ldr	r0, [pc, #264]	; (8000a94 <fsm_traffic_light+0x31c>)
 800098c:	f001 f889 	bl	8001aa2 <HAL_GPIO_WritePin>

		if (timer_flag[0] == 1){
 8000990:	4b45      	ldr	r3, [pc, #276]	; (8000aa8 <fsm_traffic_light+0x330>)
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	2b01      	cmp	r3, #1
 8000996:	d10c      	bne.n	80009b2 <fsm_traffic_light+0x23a>
			status = GREEN_RED;
 8000998:	4b3d      	ldr	r3, [pc, #244]	; (8000a90 <fsm_traffic_light+0x318>)
 800099a:	220d      	movs	r2, #13
 800099c:	601a      	str	r2, [r3, #0]
			setTimer(0, GREEN * 1000);
 800099e:	4b41      	ldr	r3, [pc, #260]	; (8000aa4 <fsm_traffic_light+0x32c>)
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80009a6:	fb02 f303 	mul.w	r3, r2, r3
 80009aa:	4619      	mov	r1, r3
 80009ac:	2000      	movs	r0, #0
 80009ae:	f000 fc6b 	bl	8001288 <setTimer>
		}

		if (timer_flag[1] == 1){
 80009b2:	4b3d      	ldr	r3, [pc, #244]	; (8000aa8 <fsm_traffic_light+0x330>)
 80009b4:	685b      	ldr	r3, [r3, #4]
 80009b6:	2b01      	cmp	r3, #1
 80009b8:	d106      	bne.n	80009c8 <fsm_traffic_light+0x250>
			updateLedBufferMode1();
 80009ba:	f7ff fd11 	bl	80003e0 <updateLedBufferMode1>
			setTimer(1, 1000);
 80009be:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80009c2:	2001      	movs	r0, #1
 80009c4:	f000 fc60 	bl	8001288 <setTimer>
		}

		if (timer_flag[2] == 1){
 80009c8:	4b37      	ldr	r3, [pc, #220]	; (8000aa8 <fsm_traffic_light+0x330>)
 80009ca:	689b      	ldr	r3, [r3, #8]
 80009cc:	2b01      	cmp	r3, #1
 80009ce:	d108      	bne.n	80009e2 <fsm_traffic_light+0x26a>
			update7SEGPortrait(index_led);
 80009d0:	4b33      	ldr	r3, [pc, #204]	; (8000aa0 <fsm_traffic_light+0x328>)
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	4618      	mov	r0, r3
 80009d6:	f7ff fcc7 	bl	8000368 <update7SEGPortrait>
			setTimer(2, 250);
 80009da:	21fa      	movs	r1, #250	; 0xfa
 80009dc:	2002      	movs	r0, #2
 80009de:	f000 fc53 	bl	8001288 <setTimer>
		}
		// If button 1 is pressed, come to MODE2
		if (isButtonPressed(0) == 1){
 80009e2:	2000      	movs	r0, #0
 80009e4:	f7ff fbb2 	bl	800014c <isButtonPressed>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b01      	cmp	r3, #1
 80009ec:	f040 831b 	bne.w	8001026 <fsm_traffic_light+0x8ae>
			status = MODE2;
 80009f0:	4b27      	ldr	r3, [pc, #156]	; (8000a90 <fsm_traffic_light+0x318>)
 80009f2:	2202      	movs	r2, #2
 80009f4:	601a      	str	r2, [r3, #0]
		}
		break;
 80009f6:	e316      	b.n	8001026 <fsm_traffic_light+0x8ae>

	case GREEN_RED:
		//Set up LED
		HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin, SET);
 80009f8:	2201      	movs	r2, #1
 80009fa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80009fe:	4825      	ldr	r0, [pc, #148]	; (8000a94 <fsm_traffic_light+0x31c>)
 8000a00:	f001 f84f 	bl	8001aa2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(G1_GPIO_Port, G1_Pin, RESET);
 8000a04:	2200      	movs	r2, #0
 8000a06:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a0a:	4822      	ldr	r0, [pc, #136]	; (8000a94 <fsm_traffic_light+0x31c>)
 8000a0c:	f001 f849 	bl	8001aa2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(A2_GPIO_Port, A2_Pin, SET);
 8000a10:	2201      	movs	r2, #1
 8000a12:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a16:	481f      	ldr	r0, [pc, #124]	; (8000a94 <fsm_traffic_light+0x31c>)
 8000a18:	f001 f843 	bl	8001aa2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(R2_GPIO_Port, R2_Pin, RESET);
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a22:	481c      	ldr	r0, [pc, #112]	; (8000a94 <fsm_traffic_light+0x31c>)
 8000a24:	f001 f83d 	bl	8001aa2 <HAL_GPIO_WritePin>

		if (timer_flag[0] == 1){
 8000a28:	4b1f      	ldr	r3, [pc, #124]	; (8000aa8 <fsm_traffic_light+0x330>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	2b01      	cmp	r3, #1
 8000a2e:	d10c      	bne.n	8000a4a <fsm_traffic_light+0x2d2>
			status = AMBER_RED;
 8000a30:	4b17      	ldr	r3, [pc, #92]	; (8000a90 <fsm_traffic_light+0x318>)
 8000a32:	220e      	movs	r2, #14
 8000a34:	601a      	str	r2, [r3, #0]
			setTimer(0, AMBER * 1000);
 8000a36:	4b1d      	ldr	r3, [pc, #116]	; (8000aac <fsm_traffic_light+0x334>)
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000a3e:	fb02 f303 	mul.w	r3, r2, r3
 8000a42:	4619      	mov	r1, r3
 8000a44:	2000      	movs	r0, #0
 8000a46:	f000 fc1f 	bl	8001288 <setTimer>
		}

		if (timer_flag[1] == 1){
 8000a4a:	4b17      	ldr	r3, [pc, #92]	; (8000aa8 <fsm_traffic_light+0x330>)
 8000a4c:	685b      	ldr	r3, [r3, #4]
 8000a4e:	2b01      	cmp	r3, #1
 8000a50:	d106      	bne.n	8000a60 <fsm_traffic_light+0x2e8>
			updateLedBufferMode1();
 8000a52:	f7ff fcc5 	bl	80003e0 <updateLedBufferMode1>
			setTimer(1, 1000);
 8000a56:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000a5a:	2001      	movs	r0, #1
 8000a5c:	f000 fc14 	bl	8001288 <setTimer>
		}

		if (timer_flag[2] == 1){
 8000a60:	4b11      	ldr	r3, [pc, #68]	; (8000aa8 <fsm_traffic_light+0x330>)
 8000a62:	689b      	ldr	r3, [r3, #8]
 8000a64:	2b01      	cmp	r3, #1
 8000a66:	d108      	bne.n	8000a7a <fsm_traffic_light+0x302>
			update7SEGPortrait(index_led);
 8000a68:	4b0d      	ldr	r3, [pc, #52]	; (8000aa0 <fsm_traffic_light+0x328>)
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	f7ff fc7b 	bl	8000368 <update7SEGPortrait>
			setTimer(2, 250);
 8000a72:	21fa      	movs	r1, #250	; 0xfa
 8000a74:	2002      	movs	r0, #2
 8000a76:	f000 fc07 	bl	8001288 <setTimer>
		}
		// If button 1 is pressed, come to MODE2
		if (isButtonPressed(0) == 1){
 8000a7a:	2000      	movs	r0, #0
 8000a7c:	f7ff fb66 	bl	800014c <isButtonPressed>
 8000a80:	4603      	mov	r3, r0
 8000a82:	2b01      	cmp	r3, #1
 8000a84:	f040 82d1 	bne.w	800102a <fsm_traffic_light+0x8b2>
			status = MODE2;
 8000a88:	4b01      	ldr	r3, [pc, #4]	; (8000a90 <fsm_traffic_light+0x318>)
 8000a8a:	2202      	movs	r2, #2
 8000a8c:	601a      	str	r2, [r3, #0]
		}
		break;
 8000a8e:	e2cc      	b.n	800102a <fsm_traffic_light+0x8b2>
 8000a90:	200000b0 	.word	0x200000b0
 8000a94:	40010800 	.word	0x40010800
 8000a98:	20000044 	.word	0x20000044
 8000a9c:	20000040 	.word	0x20000040
 8000aa0:	2000009c 	.word	0x2000009c
 8000aa4:	20000050 	.word	0x20000050
 8000aa8:	200000dc 	.word	0x200000dc
 8000aac:	2000004c 	.word	0x2000004c

	case AMBER_RED:
		//Set up LED
		HAL_GPIO_WritePin(A1_GPIO_Port, A1_Pin, RESET);
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ab6:	48a3      	ldr	r0, [pc, #652]	; (8000d44 <fsm_traffic_light+0x5cc>)
 8000ab8:	f000 fff3 	bl	8001aa2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(G1_GPIO_Port, G1_Pin, SET);
 8000abc:	2201      	movs	r2, #1
 8000abe:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ac2:	48a0      	ldr	r0, [pc, #640]	; (8000d44 <fsm_traffic_light+0x5cc>)
 8000ac4:	f000 ffed 	bl	8001aa2 <HAL_GPIO_WritePin>

		if (timer_flag[0] == 1){
 8000ac8:	4b9f      	ldr	r3, [pc, #636]	; (8000d48 <fsm_traffic_light+0x5d0>)
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	2b01      	cmp	r3, #1
 8000ace:	d10c      	bne.n	8000aea <fsm_traffic_light+0x372>
			status = RED_GREEN;
 8000ad0:	4b9e      	ldr	r3, [pc, #632]	; (8000d4c <fsm_traffic_light+0x5d4>)
 8000ad2:	220b      	movs	r2, #11
 8000ad4:	601a      	str	r2, [r3, #0]
			setTimer(0, GREEN * 1000);
 8000ad6:	4b9e      	ldr	r3, [pc, #632]	; (8000d50 <fsm_traffic_light+0x5d8>)
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000ade:	fb02 f303 	mul.w	r3, r2, r3
 8000ae2:	4619      	mov	r1, r3
 8000ae4:	2000      	movs	r0, #0
 8000ae6:	f000 fbcf 	bl	8001288 <setTimer>
		}

		if (timer_flag[1] == 1){
 8000aea:	4b97      	ldr	r3, [pc, #604]	; (8000d48 <fsm_traffic_light+0x5d0>)
 8000aec:	685b      	ldr	r3, [r3, #4]
 8000aee:	2b01      	cmp	r3, #1
 8000af0:	d106      	bne.n	8000b00 <fsm_traffic_light+0x388>
			updateLedBufferMode1();
 8000af2:	f7ff fc75 	bl	80003e0 <updateLedBufferMode1>
			setTimer(1, 1000);
 8000af6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000afa:	2001      	movs	r0, #1
 8000afc:	f000 fbc4 	bl	8001288 <setTimer>
		}

		if (timer_flag[2] == 1){
 8000b00:	4b91      	ldr	r3, [pc, #580]	; (8000d48 <fsm_traffic_light+0x5d0>)
 8000b02:	689b      	ldr	r3, [r3, #8]
 8000b04:	2b01      	cmp	r3, #1
 8000b06:	d108      	bne.n	8000b1a <fsm_traffic_light+0x3a2>
			update7SEGPortrait(index_led);
 8000b08:	4b92      	ldr	r3, [pc, #584]	; (8000d54 <fsm_traffic_light+0x5dc>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	f7ff fc2b 	bl	8000368 <update7SEGPortrait>
			setTimer(2, 250);
 8000b12:	21fa      	movs	r1, #250	; 0xfa
 8000b14:	2002      	movs	r0, #2
 8000b16:	f000 fbb7 	bl	8001288 <setTimer>
		}
		// If button 1 is pressed, come to MODE2
		if (isButtonPressed(0) == 1){
 8000b1a:	2000      	movs	r0, #0
 8000b1c:	f7ff fb16 	bl	800014c <isButtonPressed>
 8000b20:	4603      	mov	r3, r0
 8000b22:	2b01      	cmp	r3, #1
 8000b24:	f040 8292 	bne.w	800104c <fsm_traffic_light+0x8d4>
			status = MODE2;
 8000b28:	4b88      	ldr	r3, [pc, #544]	; (8000d4c <fsm_traffic_light+0x5d4>)
 8000b2a:	2202      	movs	r2, #2
 8000b2c:	601a      	str	r2, [r3, #0]
		}
		break;
 8000b2e:	e28d      	b.n	800104c <fsm_traffic_light+0x8d4>

	//MODE2
	case MODE2:
		status = AUTO_RED;
 8000b30:	4b86      	ldr	r3, [pc, #536]	; (8000d4c <fsm_traffic_light+0x5d4>)
 8000b32:	2215      	movs	r2, #21
 8000b34:	601a      	str	r2, [r3, #0]
		//Set up RED LED
		HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin, RESET);
 8000b36:	2200      	movs	r2, #0
 8000b38:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b3c:	4881      	ldr	r0, [pc, #516]	; (8000d44 <fsm_traffic_light+0x5cc>)
 8000b3e:	f000 ffb0 	bl	8001aa2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(A1_GPIO_Port, A1_Pin, SET);
 8000b42:	2201      	movs	r2, #1
 8000b44:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b48:	487e      	ldr	r0, [pc, #504]	; (8000d44 <fsm_traffic_light+0x5cc>)
 8000b4a:	f000 ffaa 	bl	8001aa2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(G1_GPIO_Port, G1_Pin, SET);
 8000b4e:	2201      	movs	r2, #1
 8000b50:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b54:	487b      	ldr	r0, [pc, #492]	; (8000d44 <fsm_traffic_light+0x5cc>)
 8000b56:	f000 ffa4 	bl	8001aa2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin, RESET);
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b60:	4878      	ldr	r0, [pc, #480]	; (8000d44 <fsm_traffic_light+0x5cc>)
 8000b62:	f000 ff9e 	bl	8001aa2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(A2_GPIO_Port, A2_Pin, SET);
 8000b66:	2201      	movs	r2, #1
 8000b68:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b6c:	4875      	ldr	r0, [pc, #468]	; (8000d44 <fsm_traffic_light+0x5cc>)
 8000b6e:	f000 ff98 	bl	8001aa2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(G2_GPIO_Port, G2_Pin, SET);
 8000b72:	2201      	movs	r2, #1
 8000b74:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b78:	4872      	ldr	r0, [pc, #456]	; (8000d44 <fsm_traffic_light+0x5cc>)
 8000b7a:	f000 ff92 	bl	8001aa2 <HAL_GPIO_WritePin>

		index_led = 0;
 8000b7e:	4b75      	ldr	r3, [pc, #468]	; (8000d54 <fsm_traffic_light+0x5dc>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	601a      	str	r2, [r3, #0]
		updateLedBufferMode2();
 8000b84:	f7ff fd74 	bl	8000670 <updateLedBufferMode2>
		update7SEGPortrait(index_led);
 8000b88:	4b72      	ldr	r3, [pc, #456]	; (8000d54 <fsm_traffic_light+0x5dc>)
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	f7ff fbeb 	bl	8000368 <update7SEGPortrait>

		setTimer(2, 250);			// Set timer for 7SEG LED
 8000b92:	21fa      	movs	r1, #250	; 0xfa
 8000b94:	2002      	movs	r0, #2
 8000b96:	f000 fb77 	bl	8001288 <setTimer>
		setTimer(3, 500);			// Set timer for blinking LED
 8000b9a:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000b9e:	2003      	movs	r0, #3
 8000ba0:	f000 fb72 	bl	8001288 <setTimer>
		clearTimer(0);				// Clear timer display LED in MODE1
 8000ba4:	2000      	movs	r0, #0
 8000ba6:	f000 fb8f 	bl	80012c8 <clearTimer>
		clearTimer(1);				// Clear timer update buffer
 8000baa:	2001      	movs	r0, #1
 8000bac:	f000 fb8c 	bl	80012c8 <clearTimer>
		break;
 8000bb0:	e259      	b.n	8001066 <fsm_traffic_light+0x8ee>


	case AUTO_RED:
		if (timer_flag[2] == 1){
 8000bb2:	4b65      	ldr	r3, [pc, #404]	; (8000d48 <fsm_traffic_light+0x5d0>)
 8000bb4:	689b      	ldr	r3, [r3, #8]
 8000bb6:	2b01      	cmp	r3, #1
 8000bb8:	d10a      	bne.n	8000bd0 <fsm_traffic_light+0x458>
			updateLedBufferMode2();
 8000bba:	f7ff fd59 	bl	8000670 <updateLedBufferMode2>
			update7SEGPortrait(index_led);
 8000bbe:	4b65      	ldr	r3, [pc, #404]	; (8000d54 <fsm_traffic_light+0x5dc>)
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	f7ff fbd0 	bl	8000368 <update7SEGPortrait>
			setTimer(2, 250);
 8000bc8:	21fa      	movs	r1, #250	; 0xfa
 8000bca:	2002      	movs	r0, #2
 8000bcc:	f000 fb5c 	bl	8001288 <setTimer>
		}
		if (timer_flag[3] == 1){
 8000bd0:	4b5d      	ldr	r3, [pc, #372]	; (8000d48 <fsm_traffic_light+0x5d0>)
 8000bd2:	68db      	ldr	r3, [r3, #12]
 8000bd4:	2b01      	cmp	r3, #1
 8000bd6:	d10d      	bne.n	8000bf4 <fsm_traffic_light+0x47c>
			HAL_GPIO_TogglePin(R1_GPIO_Port, R1_Pin);
 8000bd8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000bdc:	4859      	ldr	r0, [pc, #356]	; (8000d44 <fsm_traffic_light+0x5cc>)
 8000bde:	f000 ff78 	bl	8001ad2 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(R2_GPIO_Port, R2_Pin);
 8000be2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000be6:	4857      	ldr	r0, [pc, #348]	; (8000d44 <fsm_traffic_light+0x5cc>)
 8000be8:	f000 ff73 	bl	8001ad2 <HAL_GPIO_TogglePin>
			setTimer(3, 250);
 8000bec:	21fa      	movs	r1, #250	; 0xfa
 8000bee:	2003      	movs	r0, #3
 8000bf0:	f000 fb4a 	bl	8001288 <setTimer>
		}
		if (isButtonPressed(0) == 1){
 8000bf4:	2000      	movs	r0, #0
 8000bf6:	f7ff faa9 	bl	800014c <isButtonPressed>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	2b01      	cmp	r3, #1
 8000bfe:	d102      	bne.n	8000c06 <fsm_traffic_light+0x48e>
			status = MODE3;
 8000c00:	4b52      	ldr	r3, [pc, #328]	; (8000d4c <fsm_traffic_light+0x5d4>)
 8000c02:	2203      	movs	r2, #3
 8000c04:	601a      	str	r2, [r3, #0]
		}
		if (isButtonPressed(1) == 1){
 8000c06:	2001      	movs	r0, #1
 8000c08:	f7ff faa0 	bl	800014c <isButtonPressed>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	2b01      	cmp	r3, #1
 8000c10:	f040 821e 	bne.w	8001050 <fsm_traffic_light+0x8d8>
			status = INC_RED;
 8000c14:	4b4d      	ldr	r3, [pc, #308]	; (8000d4c <fsm_traffic_light+0x5d4>)
 8000c16:	2216      	movs	r2, #22
 8000c18:	601a      	str	r2, [r3, #0]
			if (RED >= 99) RED = GREEN + 1;
 8000c1a:	4b4f      	ldr	r3, [pc, #316]	; (8000d58 <fsm_traffic_light+0x5e0>)
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	2b62      	cmp	r3, #98	; 0x62
 8000c20:	dd05      	ble.n	8000c2e <fsm_traffic_light+0x4b6>
 8000c22:	4b4b      	ldr	r3, [pc, #300]	; (8000d50 <fsm_traffic_light+0x5d8>)
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	3301      	adds	r3, #1
 8000c28:	4a4b      	ldr	r2, [pc, #300]	; (8000d58 <fsm_traffic_light+0x5e0>)
 8000c2a:	6013      	str	r3, [r2, #0]
			else RED++;
		}
		break;
 8000c2c:	e210      	b.n	8001050 <fsm_traffic_light+0x8d8>
			else RED++;
 8000c2e:	4b4a      	ldr	r3, [pc, #296]	; (8000d58 <fsm_traffic_light+0x5e0>)
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	3301      	adds	r3, #1
 8000c34:	4a48      	ldr	r2, [pc, #288]	; (8000d58 <fsm_traffic_light+0x5e0>)
 8000c36:	6013      	str	r3, [r2, #0]
		break;
 8000c38:	e20a      	b.n	8001050 <fsm_traffic_light+0x8d8>

	case INC_RED:
		if (timer_flag[2] == 1){
 8000c3a:	4b43      	ldr	r3, [pc, #268]	; (8000d48 <fsm_traffic_light+0x5d0>)
 8000c3c:	689b      	ldr	r3, [r3, #8]
 8000c3e:	2b01      	cmp	r3, #1
 8000c40:	d10a      	bne.n	8000c58 <fsm_traffic_light+0x4e0>
			updateLedBufferMode2();
 8000c42:	f7ff fd15 	bl	8000670 <updateLedBufferMode2>
			update7SEGPortrait(index_led);
 8000c46:	4b43      	ldr	r3, [pc, #268]	; (8000d54 <fsm_traffic_light+0x5dc>)
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	f7ff fb8c 	bl	8000368 <update7SEGPortrait>
			setTimer(2, 250);
 8000c50:	21fa      	movs	r1, #250	; 0xfa
 8000c52:	2002      	movs	r0, #2
 8000c54:	f000 fb18 	bl	8001288 <setTimer>
		}
		if (timer_flag[3] == 1){
 8000c58:	4b3b      	ldr	r3, [pc, #236]	; (8000d48 <fsm_traffic_light+0x5d0>)
 8000c5a:	68db      	ldr	r3, [r3, #12]
 8000c5c:	2b01      	cmp	r3, #1
 8000c5e:	d10d      	bne.n	8000c7c <fsm_traffic_light+0x504>
			HAL_GPIO_TogglePin(R1_GPIO_Port, R1_Pin);
 8000c60:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c64:	4837      	ldr	r0, [pc, #220]	; (8000d44 <fsm_traffic_light+0x5cc>)
 8000c66:	f000 ff34 	bl	8001ad2 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(R2_GPIO_Port, R2_Pin);
 8000c6a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c6e:	4835      	ldr	r0, [pc, #212]	; (8000d44 <fsm_traffic_light+0x5cc>)
 8000c70:	f000 ff2f 	bl	8001ad2 <HAL_GPIO_TogglePin>
			setTimer(3, 250);
 8000c74:	21fa      	movs	r1, #250	; 0xfa
 8000c76:	2003      	movs	r0, #3
 8000c78:	f000 fb06 	bl	8001288 <setTimer>
		}
		if (isButtonPressed(1) == 1){
 8000c7c:	2001      	movs	r0, #1
 8000c7e:	f7ff fa65 	bl	800014c <isButtonPressed>
 8000c82:	4603      	mov	r3, r0
 8000c84:	2b01      	cmp	r3, #1
 8000c86:	d111      	bne.n	8000cac <fsm_traffic_light+0x534>
			status = INC_RED;
 8000c88:	4b30      	ldr	r3, [pc, #192]	; (8000d4c <fsm_traffic_light+0x5d4>)
 8000c8a:	2216      	movs	r2, #22
 8000c8c:	601a      	str	r2, [r3, #0]
			if (RED >= 99) RED = GREEN + 1;
 8000c8e:	4b32      	ldr	r3, [pc, #200]	; (8000d58 <fsm_traffic_light+0x5e0>)
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	2b62      	cmp	r3, #98	; 0x62
 8000c94:	dd05      	ble.n	8000ca2 <fsm_traffic_light+0x52a>
 8000c96:	4b2e      	ldr	r3, [pc, #184]	; (8000d50 <fsm_traffic_light+0x5d8>)
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	3301      	adds	r3, #1
 8000c9c:	4a2e      	ldr	r2, [pc, #184]	; (8000d58 <fsm_traffic_light+0x5e0>)
 8000c9e:	6013      	str	r3, [r2, #0]
 8000ca0:	e004      	b.n	8000cac <fsm_traffic_light+0x534>
			else RED++;
 8000ca2:	4b2d      	ldr	r3, [pc, #180]	; (8000d58 <fsm_traffic_light+0x5e0>)
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	3301      	adds	r3, #1
 8000ca8:	4a2b      	ldr	r2, [pc, #172]	; (8000d58 <fsm_traffic_light+0x5e0>)
 8000caa:	6013      	str	r3, [r2, #0]
		}
		if (isButtonPressed(2) == 1){
 8000cac:	2002      	movs	r0, #2
 8000cae:	f7ff fa4d 	bl	800014c <isButtonPressed>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	2b01      	cmp	r3, #1
 8000cb6:	f040 81cd 	bne.w	8001054 <fsm_traffic_light+0x8dc>
			status = AUTO_RED;
 8000cba:	4b24      	ldr	r3, [pc, #144]	; (8000d4c <fsm_traffic_light+0x5d4>)
 8000cbc:	2215      	movs	r2, #21
 8000cbe:	601a      	str	r2, [r3, #0]
//			GREEN = RED - AMBER;
		}
		break;
 8000cc0:	e1c8      	b.n	8001054 <fsm_traffic_light+0x8dc>


	//MODE3
	case MODE3:
		status = AUTO_AMBER;
 8000cc2:	4b22      	ldr	r3, [pc, #136]	; (8000d4c <fsm_traffic_light+0x5d4>)
 8000cc4:	221f      	movs	r2, #31
 8000cc6:	601a      	str	r2, [r3, #0]
		//Set up AMBER LED
		HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin, SET);
 8000cc8:	2201      	movs	r2, #1
 8000cca:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000cce:	481d      	ldr	r0, [pc, #116]	; (8000d44 <fsm_traffic_light+0x5cc>)
 8000cd0:	f000 fee7 	bl	8001aa2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(A1_GPIO_Port, A1_Pin, RESET);
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000cda:	481a      	ldr	r0, [pc, #104]	; (8000d44 <fsm_traffic_light+0x5cc>)
 8000cdc:	f000 fee1 	bl	8001aa2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(G1_GPIO_Port, G1_Pin, SET);
 8000ce0:	2201      	movs	r2, #1
 8000ce2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ce6:	4817      	ldr	r0, [pc, #92]	; (8000d44 <fsm_traffic_light+0x5cc>)
 8000ce8:	f000 fedb 	bl	8001aa2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(R2_GPIO_Port, R2_Pin, SET);
 8000cec:	2201      	movs	r2, #1
 8000cee:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000cf2:	4814      	ldr	r0, [pc, #80]	; (8000d44 <fsm_traffic_light+0x5cc>)
 8000cf4:	f000 fed5 	bl	8001aa2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(A2_GPIO_Port, A2_Pin, RESET);
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000cfe:	4811      	ldr	r0, [pc, #68]	; (8000d44 <fsm_traffic_light+0x5cc>)
 8000d00:	f000 fecf 	bl	8001aa2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(G2_GPIO_Port, G2_Pin, SET);
 8000d04:	2201      	movs	r2, #1
 8000d06:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d0a:	480e      	ldr	r0, [pc, #56]	; (8000d44 <fsm_traffic_light+0x5cc>)
 8000d0c:	f000 fec9 	bl	8001aa2 <HAL_GPIO_WritePin>

		index_led = 0;
 8000d10:	4b10      	ldr	r3, [pc, #64]	; (8000d54 <fsm_traffic_light+0x5dc>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	601a      	str	r2, [r3, #0]
		updateLedBufferMode3();
 8000d16:	f7ff fcd7 	bl	80006c8 <updateLedBufferMode3>
		update7SEGPortrait(index_led);
 8000d1a:	4b0e      	ldr	r3, [pc, #56]	; (8000d54 <fsm_traffic_light+0x5dc>)
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	4618      	mov	r0, r3
 8000d20:	f7ff fb22 	bl	8000368 <update7SEGPortrait>

		setTimer(2, 250);			// Set timer for 7SEG LED
 8000d24:	21fa      	movs	r1, #250	; 0xfa
 8000d26:	2002      	movs	r0, #2
 8000d28:	f000 faae 	bl	8001288 <setTimer>
		setTimer(3, 500);			// Set timer for blinking LED
 8000d2c:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000d30:	2003      	movs	r0, #3
 8000d32:	f000 faa9 	bl	8001288 <setTimer>
		clearTimer(0);				// Clear timer display LED in MODE1
 8000d36:	2000      	movs	r0, #0
 8000d38:	f000 fac6 	bl	80012c8 <clearTimer>
		clearTimer(1);				// Clear timer update buffer
 8000d3c:	2001      	movs	r0, #1
 8000d3e:	f000 fac3 	bl	80012c8 <clearTimer>
		break;
 8000d42:	e190      	b.n	8001066 <fsm_traffic_light+0x8ee>
 8000d44:	40010800 	.word	0x40010800
 8000d48:	200000dc 	.word	0x200000dc
 8000d4c:	200000b0 	.word	0x200000b0
 8000d50:	20000050 	.word	0x20000050
 8000d54:	2000009c 	.word	0x2000009c
 8000d58:	20000048 	.word	0x20000048

	case AUTO_AMBER:
		if (timer_flag[2] == 1){
 8000d5c:	4bb4      	ldr	r3, [pc, #720]	; (8001030 <fsm_traffic_light+0x8b8>)
 8000d5e:	689b      	ldr	r3, [r3, #8]
 8000d60:	2b01      	cmp	r3, #1
 8000d62:	d10a      	bne.n	8000d7a <fsm_traffic_light+0x602>
			updateLedBufferMode3();
 8000d64:	f7ff fcb0 	bl	80006c8 <updateLedBufferMode3>
			update7SEGPortrait(index_led);
 8000d68:	4bb2      	ldr	r3, [pc, #712]	; (8001034 <fsm_traffic_light+0x8bc>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	f7ff fafb 	bl	8000368 <update7SEGPortrait>
			setTimer(2, 250);
 8000d72:	21fa      	movs	r1, #250	; 0xfa
 8000d74:	2002      	movs	r0, #2
 8000d76:	f000 fa87 	bl	8001288 <setTimer>
		}
		if (timer_flag[3] == 1){
 8000d7a:	4bad      	ldr	r3, [pc, #692]	; (8001030 <fsm_traffic_light+0x8b8>)
 8000d7c:	68db      	ldr	r3, [r3, #12]
 8000d7e:	2b01      	cmp	r3, #1
 8000d80:	d10d      	bne.n	8000d9e <fsm_traffic_light+0x626>
			HAL_GPIO_TogglePin(A1_GPIO_Port, A1_Pin);
 8000d82:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d86:	48ac      	ldr	r0, [pc, #688]	; (8001038 <fsm_traffic_light+0x8c0>)
 8000d88:	f000 fea3 	bl	8001ad2 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(A2_GPIO_Port, A2_Pin);
 8000d8c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d90:	48a9      	ldr	r0, [pc, #676]	; (8001038 <fsm_traffic_light+0x8c0>)
 8000d92:	f000 fe9e 	bl	8001ad2 <HAL_GPIO_TogglePin>
			setTimer(3, 250);
 8000d96:	21fa      	movs	r1, #250	; 0xfa
 8000d98:	2003      	movs	r0, #3
 8000d9a:	f000 fa75 	bl	8001288 <setTimer>
		}
		if (isButtonPressed(0) == 1){
 8000d9e:	2000      	movs	r0, #0
 8000da0:	f7ff f9d4 	bl	800014c <isButtonPressed>
 8000da4:	4603      	mov	r3, r0
 8000da6:	2b01      	cmp	r3, #1
 8000da8:	d102      	bne.n	8000db0 <fsm_traffic_light+0x638>
			status = MODE4;
 8000daa:	4ba4      	ldr	r3, [pc, #656]	; (800103c <fsm_traffic_light+0x8c4>)
 8000dac:	2204      	movs	r2, #4
 8000dae:	601a      	str	r2, [r3, #0]
		}
		if (isButtonPressed(1) == 1){
 8000db0:	2001      	movs	r0, #1
 8000db2:	f7ff f9cb 	bl	800014c <isButtonPressed>
 8000db6:	4603      	mov	r3, r0
 8000db8:	2b01      	cmp	r3, #1
 8000dba:	f040 814d 	bne.w	8001058 <fsm_traffic_light+0x8e0>
			status = INC_AMBER;
 8000dbe:	4b9f      	ldr	r3, [pc, #636]	; (800103c <fsm_traffic_light+0x8c4>)
 8000dc0:	2220      	movs	r2, #32
 8000dc2:	601a      	str	r2, [r3, #0]
			if (AMBER >= 4) AMBER = 1;
 8000dc4:	4b9e      	ldr	r3, [pc, #632]	; (8001040 <fsm_traffic_light+0x8c8>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	2b03      	cmp	r3, #3
 8000dca:	dd03      	ble.n	8000dd4 <fsm_traffic_light+0x65c>
 8000dcc:	4b9c      	ldr	r3, [pc, #624]	; (8001040 <fsm_traffic_light+0x8c8>)
 8000dce:	2201      	movs	r2, #1
 8000dd0:	601a      	str	r2, [r3, #0]
			else AMBER++;
		}
		break;
 8000dd2:	e141      	b.n	8001058 <fsm_traffic_light+0x8e0>
			else AMBER++;
 8000dd4:	4b9a      	ldr	r3, [pc, #616]	; (8001040 <fsm_traffic_light+0x8c8>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	3301      	adds	r3, #1
 8000dda:	4a99      	ldr	r2, [pc, #612]	; (8001040 <fsm_traffic_light+0x8c8>)
 8000ddc:	6013      	str	r3, [r2, #0]
		break;
 8000dde:	e13b      	b.n	8001058 <fsm_traffic_light+0x8e0>

	case INC_AMBER:
		if (timer_flag[2] == 1){
 8000de0:	4b93      	ldr	r3, [pc, #588]	; (8001030 <fsm_traffic_light+0x8b8>)
 8000de2:	689b      	ldr	r3, [r3, #8]
 8000de4:	2b01      	cmp	r3, #1
 8000de6:	d10a      	bne.n	8000dfe <fsm_traffic_light+0x686>
			updateLedBufferMode3();
 8000de8:	f7ff fc6e 	bl	80006c8 <updateLedBufferMode3>
			update7SEGPortrait(index_led);
 8000dec:	4b91      	ldr	r3, [pc, #580]	; (8001034 <fsm_traffic_light+0x8bc>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	4618      	mov	r0, r3
 8000df2:	f7ff fab9 	bl	8000368 <update7SEGPortrait>
			setTimer(2, 250);
 8000df6:	21fa      	movs	r1, #250	; 0xfa
 8000df8:	2002      	movs	r0, #2
 8000dfa:	f000 fa45 	bl	8001288 <setTimer>
		}
		if (timer_flag[3] == 1){
 8000dfe:	4b8c      	ldr	r3, [pc, #560]	; (8001030 <fsm_traffic_light+0x8b8>)
 8000e00:	68db      	ldr	r3, [r3, #12]
 8000e02:	2b01      	cmp	r3, #1
 8000e04:	d10d      	bne.n	8000e22 <fsm_traffic_light+0x6aa>
			HAL_GPIO_TogglePin(A1_GPIO_Port, A1_Pin);
 8000e06:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e0a:	488b      	ldr	r0, [pc, #556]	; (8001038 <fsm_traffic_light+0x8c0>)
 8000e0c:	f000 fe61 	bl	8001ad2 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(A2_GPIO_Port, A2_Pin);
 8000e10:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e14:	4888      	ldr	r0, [pc, #544]	; (8001038 <fsm_traffic_light+0x8c0>)
 8000e16:	f000 fe5c 	bl	8001ad2 <HAL_GPIO_TogglePin>
			setTimer(3, 250);
 8000e1a:	21fa      	movs	r1, #250	; 0xfa
 8000e1c:	2003      	movs	r0, #3
 8000e1e:	f000 fa33 	bl	8001288 <setTimer>
		}
		if (isButtonPressed(1) == 1){
 8000e22:	2001      	movs	r0, #1
 8000e24:	f7ff f992 	bl	800014c <isButtonPressed>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b01      	cmp	r3, #1
 8000e2c:	d10f      	bne.n	8000e4e <fsm_traffic_light+0x6d6>
			status = INC_AMBER;
 8000e2e:	4b83      	ldr	r3, [pc, #524]	; (800103c <fsm_traffic_light+0x8c4>)
 8000e30:	2220      	movs	r2, #32
 8000e32:	601a      	str	r2, [r3, #0]
			if (AMBER >= 4) AMBER = 1;
 8000e34:	4b82      	ldr	r3, [pc, #520]	; (8001040 <fsm_traffic_light+0x8c8>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	2b03      	cmp	r3, #3
 8000e3a:	dd03      	ble.n	8000e44 <fsm_traffic_light+0x6cc>
 8000e3c:	4b80      	ldr	r3, [pc, #512]	; (8001040 <fsm_traffic_light+0x8c8>)
 8000e3e:	2201      	movs	r2, #1
 8000e40:	601a      	str	r2, [r3, #0]
 8000e42:	e004      	b.n	8000e4e <fsm_traffic_light+0x6d6>
			else AMBER++;
 8000e44:	4b7e      	ldr	r3, [pc, #504]	; (8001040 <fsm_traffic_light+0x8c8>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	3301      	adds	r3, #1
 8000e4a:	4a7d      	ldr	r2, [pc, #500]	; (8001040 <fsm_traffic_light+0x8c8>)
 8000e4c:	6013      	str	r3, [r2, #0]
		}
		if (isButtonPressed(2) == 1){
 8000e4e:	2002      	movs	r0, #2
 8000e50:	f7ff f97c 	bl	800014c <isButtonPressed>
 8000e54:	4603      	mov	r3, r0
 8000e56:	2b01      	cmp	r3, #1
 8000e58:	f040 8100 	bne.w	800105c <fsm_traffic_light+0x8e4>
			status = AUTO_AMBER;
 8000e5c:	4b77      	ldr	r3, [pc, #476]	; (800103c <fsm_traffic_light+0x8c4>)
 8000e5e:	221f      	movs	r2, #31
 8000e60:	601a      	str	r2, [r3, #0]
//			if (RED <= AMBER) RED = AMBER + 1;
//			GREEN = RED - AMBER;
		}
		break;
 8000e62:	e0fb      	b.n	800105c <fsm_traffic_light+0x8e4>

	//MODE4
	case MODE4:
		status = AUTO_GREEN;
 8000e64:	4b75      	ldr	r3, [pc, #468]	; (800103c <fsm_traffic_light+0x8c4>)
 8000e66:	2229      	movs	r2, #41	; 0x29
 8000e68:	601a      	str	r2, [r3, #0]
		//Set up GREEN LED
		HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin, SET);
 8000e6a:	2201      	movs	r2, #1
 8000e6c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e70:	4871      	ldr	r0, [pc, #452]	; (8001038 <fsm_traffic_light+0x8c0>)
 8000e72:	f000 fe16 	bl	8001aa2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(A1_GPIO_Port, A1_Pin, SET);
 8000e76:	2201      	movs	r2, #1
 8000e78:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e7c:	486e      	ldr	r0, [pc, #440]	; (8001038 <fsm_traffic_light+0x8c0>)
 8000e7e:	f000 fe10 	bl	8001aa2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(G1_GPIO_Port, G1_Pin, RESET);
 8000e82:	2200      	movs	r2, #0
 8000e84:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e88:	486b      	ldr	r0, [pc, #428]	; (8001038 <fsm_traffic_light+0x8c0>)
 8000e8a:	f000 fe0a 	bl	8001aa2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(R2_GPIO_Port, R2_Pin, SET);
 8000e8e:	2201      	movs	r2, #1
 8000e90:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e94:	4868      	ldr	r0, [pc, #416]	; (8001038 <fsm_traffic_light+0x8c0>)
 8000e96:	f000 fe04 	bl	8001aa2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(A2_GPIO_Port, A2_Pin, SET);
 8000e9a:	2201      	movs	r2, #1
 8000e9c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ea0:	4865      	ldr	r0, [pc, #404]	; (8001038 <fsm_traffic_light+0x8c0>)
 8000ea2:	f000 fdfe 	bl	8001aa2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(G2_GPIO_Port, G2_Pin, RESET);
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000eac:	4862      	ldr	r0, [pc, #392]	; (8001038 <fsm_traffic_light+0x8c0>)
 8000eae:	f000 fdf8 	bl	8001aa2 <HAL_GPIO_WritePin>

		index_led = 0;
 8000eb2:	4b60      	ldr	r3, [pc, #384]	; (8001034 <fsm_traffic_light+0x8bc>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	601a      	str	r2, [r3, #0]
		updateLedBufferMode4();
 8000eb8:	f7ff fc32 	bl	8000720 <updateLedBufferMode4>
		update7SEGPortrait(index_led);
 8000ebc:	4b5d      	ldr	r3, [pc, #372]	; (8001034 <fsm_traffic_light+0x8bc>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	f7ff fa51 	bl	8000368 <update7SEGPortrait>

		setTimer(2, 250);			// Set timer for 7SEG LED
 8000ec6:	21fa      	movs	r1, #250	; 0xfa
 8000ec8:	2002      	movs	r0, #2
 8000eca:	f000 f9dd 	bl	8001288 <setTimer>
		setTimer(3, 500);			// Set timer for blinking LED
 8000ece:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000ed2:	2003      	movs	r0, #3
 8000ed4:	f000 f9d8 	bl	8001288 <setTimer>
		clearTimer(0);				// Clear timer display LED in MODE1
 8000ed8:	2000      	movs	r0, #0
 8000eda:	f000 f9f5 	bl	80012c8 <clearTimer>
		clearTimer(1);				// Clear timer update buffer
 8000ede:	2001      	movs	r0, #1
 8000ee0:	f000 f9f2 	bl	80012c8 <clearTimer>
		break;
 8000ee4:	e0bf      	b.n	8001066 <fsm_traffic_light+0x8ee>

	case AUTO_GREEN:
		if (timer_flag[2] == 1){
 8000ee6:	4b52      	ldr	r3, [pc, #328]	; (8001030 <fsm_traffic_light+0x8b8>)
 8000ee8:	689b      	ldr	r3, [r3, #8]
 8000eea:	2b01      	cmp	r3, #1
 8000eec:	d10a      	bne.n	8000f04 <fsm_traffic_light+0x78c>
			updateLedBufferMode4();
 8000eee:	f7ff fc17 	bl	8000720 <updateLedBufferMode4>
			update7SEGPortrait(index_led);
 8000ef2:	4b50      	ldr	r3, [pc, #320]	; (8001034 <fsm_traffic_light+0x8bc>)
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	f7ff fa36 	bl	8000368 <update7SEGPortrait>
			setTimer(2, 250);
 8000efc:	21fa      	movs	r1, #250	; 0xfa
 8000efe:	2002      	movs	r0, #2
 8000f00:	f000 f9c2 	bl	8001288 <setTimer>
		}
		if (timer_flag[3] == 1){
 8000f04:	4b4a      	ldr	r3, [pc, #296]	; (8001030 <fsm_traffic_light+0x8b8>)
 8000f06:	68db      	ldr	r3, [r3, #12]
 8000f08:	2b01      	cmp	r3, #1
 8000f0a:	d10d      	bne.n	8000f28 <fsm_traffic_light+0x7b0>
			HAL_GPIO_TogglePin(G1_GPIO_Port, G1_Pin);
 8000f0c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f10:	4849      	ldr	r0, [pc, #292]	; (8001038 <fsm_traffic_light+0x8c0>)
 8000f12:	f000 fdde 	bl	8001ad2 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(G2_GPIO_Port, G2_Pin);
 8000f16:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f1a:	4847      	ldr	r0, [pc, #284]	; (8001038 <fsm_traffic_light+0x8c0>)
 8000f1c:	f000 fdd9 	bl	8001ad2 <HAL_GPIO_TogglePin>
			setTimer(3, 250);
 8000f20:	21fa      	movs	r1, #250	; 0xfa
 8000f22:	2003      	movs	r0, #3
 8000f24:	f000 f9b0 	bl	8001288 <setTimer>
		}
		if (isButtonPressed(0) == 1){
 8000f28:	2000      	movs	r0, #0
 8000f2a:	f7ff f90f 	bl	800014c <isButtonPressed>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	2b01      	cmp	r3, #1
 8000f32:	d114      	bne.n	8000f5e <fsm_traffic_light+0x7e6>
			status = MODE1;
 8000f34:	4b41      	ldr	r3, [pc, #260]	; (800103c <fsm_traffic_light+0x8c4>)
 8000f36:	2201      	movs	r2, #1
 8000f38:	601a      	str	r2, [r3, #0]
			if (GREEN <= AMBER) GREEN = AMBER + 1;
 8000f3a:	4b42      	ldr	r3, [pc, #264]	; (8001044 <fsm_traffic_light+0x8cc>)
 8000f3c:	681a      	ldr	r2, [r3, #0]
 8000f3e:	4b40      	ldr	r3, [pc, #256]	; (8001040 <fsm_traffic_light+0x8c8>)
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	429a      	cmp	r2, r3
 8000f44:	dc04      	bgt.n	8000f50 <fsm_traffic_light+0x7d8>
 8000f46:	4b3e      	ldr	r3, [pc, #248]	; (8001040 <fsm_traffic_light+0x8c8>)
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	3301      	adds	r3, #1
 8000f4c:	4a3d      	ldr	r2, [pc, #244]	; (8001044 <fsm_traffic_light+0x8cc>)
 8000f4e:	6013      	str	r3, [r2, #0]
			RED = GREEN + AMBER;
 8000f50:	4b3c      	ldr	r3, [pc, #240]	; (8001044 <fsm_traffic_light+0x8cc>)
 8000f52:	681a      	ldr	r2, [r3, #0]
 8000f54:	4b3a      	ldr	r3, [pc, #232]	; (8001040 <fsm_traffic_light+0x8c8>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	4413      	add	r3, r2
 8000f5a:	4a3b      	ldr	r2, [pc, #236]	; (8001048 <fsm_traffic_light+0x8d0>)
 8000f5c:	6013      	str	r3, [r2, #0]
		}
		if (isButtonPressed(1) == 1){
 8000f5e:	2001      	movs	r0, #1
 8000f60:	f7ff f8f4 	bl	800014c <isButtonPressed>
 8000f64:	4603      	mov	r3, r0
 8000f66:	2b01      	cmp	r3, #1
 8000f68:	d17a      	bne.n	8001060 <fsm_traffic_light+0x8e8>
			status = INC_GREEN;
 8000f6a:	4b34      	ldr	r3, [pc, #208]	; (800103c <fsm_traffic_light+0x8c4>)
 8000f6c:	222a      	movs	r2, #42	; 0x2a
 8000f6e:	601a      	str	r2, [r3, #0]
			if (GREEN >= 99) GREEN = RED - AMBER;
 8000f70:	4b34      	ldr	r3, [pc, #208]	; (8001044 <fsm_traffic_light+0x8cc>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	2b62      	cmp	r3, #98	; 0x62
 8000f76:	dd07      	ble.n	8000f88 <fsm_traffic_light+0x810>
 8000f78:	4b33      	ldr	r3, [pc, #204]	; (8001048 <fsm_traffic_light+0x8d0>)
 8000f7a:	681a      	ldr	r2, [r3, #0]
 8000f7c:	4b30      	ldr	r3, [pc, #192]	; (8001040 <fsm_traffic_light+0x8c8>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	1ad3      	subs	r3, r2, r3
 8000f82:	4a30      	ldr	r2, [pc, #192]	; (8001044 <fsm_traffic_light+0x8cc>)
 8000f84:	6013      	str	r3, [r2, #0]
			else GREEN++;
		}
		break;
 8000f86:	e06b      	b.n	8001060 <fsm_traffic_light+0x8e8>
			else GREEN++;
 8000f88:	4b2e      	ldr	r3, [pc, #184]	; (8001044 <fsm_traffic_light+0x8cc>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	3301      	adds	r3, #1
 8000f8e:	4a2d      	ldr	r2, [pc, #180]	; (8001044 <fsm_traffic_light+0x8cc>)
 8000f90:	6013      	str	r3, [r2, #0]
		break;
 8000f92:	e065      	b.n	8001060 <fsm_traffic_light+0x8e8>

	case INC_GREEN:
		if (timer_flag[2] == 1){
 8000f94:	4b26      	ldr	r3, [pc, #152]	; (8001030 <fsm_traffic_light+0x8b8>)
 8000f96:	689b      	ldr	r3, [r3, #8]
 8000f98:	2b01      	cmp	r3, #1
 8000f9a:	d10a      	bne.n	8000fb2 <fsm_traffic_light+0x83a>
			updateLedBufferMode4();
 8000f9c:	f7ff fbc0 	bl	8000720 <updateLedBufferMode4>
			update7SEGPortrait(index_led);
 8000fa0:	4b24      	ldr	r3, [pc, #144]	; (8001034 <fsm_traffic_light+0x8bc>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	f7ff f9df 	bl	8000368 <update7SEGPortrait>
			setTimer(2, 250);
 8000faa:	21fa      	movs	r1, #250	; 0xfa
 8000fac:	2002      	movs	r0, #2
 8000fae:	f000 f96b 	bl	8001288 <setTimer>
		}
		if (timer_flag[3] == 1){
 8000fb2:	4b1f      	ldr	r3, [pc, #124]	; (8001030 <fsm_traffic_light+0x8b8>)
 8000fb4:	68db      	ldr	r3, [r3, #12]
 8000fb6:	2b01      	cmp	r3, #1
 8000fb8:	d10d      	bne.n	8000fd6 <fsm_traffic_light+0x85e>
			HAL_GPIO_TogglePin(G1_GPIO_Port, G1_Pin);
 8000fba:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000fbe:	481e      	ldr	r0, [pc, #120]	; (8001038 <fsm_traffic_light+0x8c0>)
 8000fc0:	f000 fd87 	bl	8001ad2 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(G2_GPIO_Port, G2_Pin);
 8000fc4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000fc8:	481b      	ldr	r0, [pc, #108]	; (8001038 <fsm_traffic_light+0x8c0>)
 8000fca:	f000 fd82 	bl	8001ad2 <HAL_GPIO_TogglePin>
			setTimer(3, 250);
 8000fce:	21fa      	movs	r1, #250	; 0xfa
 8000fd0:	2003      	movs	r0, #3
 8000fd2:	f000 f959 	bl	8001288 <setTimer>
		}
		if (isButtonPressed(1) == 1){
 8000fd6:	2001      	movs	r0, #1
 8000fd8:	f7ff f8b8 	bl	800014c <isButtonPressed>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	2b01      	cmp	r3, #1
 8000fe0:	d113      	bne.n	800100a <fsm_traffic_light+0x892>
			status = INC_GREEN;
 8000fe2:	4b16      	ldr	r3, [pc, #88]	; (800103c <fsm_traffic_light+0x8c4>)
 8000fe4:	222a      	movs	r2, #42	; 0x2a
 8000fe6:	601a      	str	r2, [r3, #0]
			if (GREEN >= 99) GREEN = RED - AMBER;
 8000fe8:	4b16      	ldr	r3, [pc, #88]	; (8001044 <fsm_traffic_light+0x8cc>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	2b62      	cmp	r3, #98	; 0x62
 8000fee:	dd07      	ble.n	8001000 <fsm_traffic_light+0x888>
 8000ff0:	4b15      	ldr	r3, [pc, #84]	; (8001048 <fsm_traffic_light+0x8d0>)
 8000ff2:	681a      	ldr	r2, [r3, #0]
 8000ff4:	4b12      	ldr	r3, [pc, #72]	; (8001040 <fsm_traffic_light+0x8c8>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	1ad3      	subs	r3, r2, r3
 8000ffa:	4a12      	ldr	r2, [pc, #72]	; (8001044 <fsm_traffic_light+0x8cc>)
 8000ffc:	6013      	str	r3, [r2, #0]
 8000ffe:	e004      	b.n	800100a <fsm_traffic_light+0x892>
			else GREEN++;
 8001000:	4b10      	ldr	r3, [pc, #64]	; (8001044 <fsm_traffic_light+0x8cc>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	3301      	adds	r3, #1
 8001006:	4a0f      	ldr	r2, [pc, #60]	; (8001044 <fsm_traffic_light+0x8cc>)
 8001008:	6013      	str	r3, [r2, #0]
		}
		if (isButtonPressed(2) == 1){
 800100a:	2002      	movs	r0, #2
 800100c:	f7ff f89e 	bl	800014c <isButtonPressed>
 8001010:	4603      	mov	r3, r0
 8001012:	2b01      	cmp	r3, #1
 8001014:	d126      	bne.n	8001064 <fsm_traffic_light+0x8ec>
			status = AUTO_GREEN;
 8001016:	4b09      	ldr	r3, [pc, #36]	; (800103c <fsm_traffic_light+0x8c4>)
 8001018:	2229      	movs	r2, #41	; 0x29
 800101a:	601a      	str	r2, [r3, #0]
//			RED = GREEN + AMBER;
		}
		break;
 800101c:	e022      	b.n	8001064 <fsm_traffic_light+0x8ec>

	default:
		break;
 800101e:	bf00      	nop
 8001020:	e021      	b.n	8001066 <fsm_traffic_light+0x8ee>
		break;
 8001022:	bf00      	nop
 8001024:	e01f      	b.n	8001066 <fsm_traffic_light+0x8ee>
		break;
 8001026:	bf00      	nop
 8001028:	e01d      	b.n	8001066 <fsm_traffic_light+0x8ee>
		break;
 800102a:	bf00      	nop
 800102c:	e01b      	b.n	8001066 <fsm_traffic_light+0x8ee>
 800102e:	bf00      	nop
 8001030:	200000dc 	.word	0x200000dc
 8001034:	2000009c 	.word	0x2000009c
 8001038:	40010800 	.word	0x40010800
 800103c:	200000b0 	.word	0x200000b0
 8001040:	2000004c 	.word	0x2000004c
 8001044:	20000050 	.word	0x20000050
 8001048:	20000048 	.word	0x20000048
		break;
 800104c:	bf00      	nop
 800104e:	e00a      	b.n	8001066 <fsm_traffic_light+0x8ee>
		break;
 8001050:	bf00      	nop
 8001052:	e008      	b.n	8001066 <fsm_traffic_light+0x8ee>
		break;
 8001054:	bf00      	nop
 8001056:	e006      	b.n	8001066 <fsm_traffic_light+0x8ee>
		break;
 8001058:	bf00      	nop
 800105a:	e004      	b.n	8001066 <fsm_traffic_light+0x8ee>
		break;
 800105c:	bf00      	nop
 800105e:	e002      	b.n	8001066 <fsm_traffic_light+0x8ee>
		break;
 8001060:	bf00      	nop
 8001062:	e000      	b.n	8001066 <fsm_traffic_light+0x8ee>
		break;
 8001064:	bf00      	nop

	}
}
 8001066:	bf00      	nop
 8001068:	bd80      	pop	{r7, pc}
 800106a:	bf00      	nop

0800106c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001070:	f000 fa86 	bl	8001580 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001074:	f000 f80c 	bl	8001090 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_TIM2_Init();
 8001078:	f000 f846 	bl	8001108 <MX_TIM2_Init>
  MX_GPIO_Init();
 800107c:	f000 f890 	bl	80011a0 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8001080:	4802      	ldr	r0, [pc, #8]	; (800108c <main+0x20>)
 8001082:	f001 f9b9 	bl	80023f8 <HAL_TIM_Base_Start_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  fsm_traffic_light();
 8001086:	f7ff fb77 	bl	8000778 <fsm_traffic_light>
 800108a:	e7fc      	b.n	8001086 <main+0x1a>
 800108c:	20000104 	.word	0x20000104

08001090 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b090      	sub	sp, #64	; 0x40
 8001094:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001096:	f107 0318 	add.w	r3, r7, #24
 800109a:	2228      	movs	r2, #40	; 0x28
 800109c:	2100      	movs	r1, #0
 800109e:	4618      	mov	r0, r3
 80010a0:	f001 fd66 	bl	8002b70 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010a4:	1d3b      	adds	r3, r7, #4
 80010a6:	2200      	movs	r2, #0
 80010a8:	601a      	str	r2, [r3, #0]
 80010aa:	605a      	str	r2, [r3, #4]
 80010ac:	609a      	str	r2, [r3, #8]
 80010ae:	60da      	str	r2, [r3, #12]
 80010b0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80010b2:	2302      	movs	r3, #2
 80010b4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010b6:	2301      	movs	r3, #1
 80010b8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010ba:	2310      	movs	r3, #16
 80010bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80010be:	2300      	movs	r3, #0
 80010c0:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010c2:	f107 0318 	add.w	r3, r7, #24
 80010c6:	4618      	mov	r0, r3
 80010c8:	f000 fd1c 	bl	8001b04 <HAL_RCC_OscConfig>
 80010cc:	4603      	mov	r3, r0
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d001      	beq.n	80010d6 <SystemClock_Config+0x46>
  {
    Error_Handler();
 80010d2:	f000 f8d3 	bl	800127c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010d6:	230f      	movs	r3, #15
 80010d8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80010da:	2300      	movs	r3, #0
 80010dc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010de:	2300      	movs	r3, #0
 80010e0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80010e2:	2300      	movs	r3, #0
 80010e4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010e6:	2300      	movs	r3, #0
 80010e8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80010ea:	1d3b      	adds	r3, r7, #4
 80010ec:	2100      	movs	r1, #0
 80010ee:	4618      	mov	r0, r3
 80010f0:	f000 ff88 	bl	8002004 <HAL_RCC_ClockConfig>
 80010f4:	4603      	mov	r3, r0
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d001      	beq.n	80010fe <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80010fa:	f000 f8bf 	bl	800127c <Error_Handler>
  }
}
 80010fe:	bf00      	nop
 8001100:	3740      	adds	r7, #64	; 0x40
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}
	...

08001108 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b086      	sub	sp, #24
 800110c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800110e:	f107 0308 	add.w	r3, r7, #8
 8001112:	2200      	movs	r2, #0
 8001114:	601a      	str	r2, [r3, #0]
 8001116:	605a      	str	r2, [r3, #4]
 8001118:	609a      	str	r2, [r3, #8]
 800111a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800111c:	463b      	mov	r3, r7
 800111e:	2200      	movs	r2, #0
 8001120:	601a      	str	r2, [r3, #0]
 8001122:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001124:	4b1d      	ldr	r3, [pc, #116]	; (800119c <MX_TIM2_Init+0x94>)
 8001126:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800112a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 800112c:	4b1b      	ldr	r3, [pc, #108]	; (800119c <MX_TIM2_Init+0x94>)
 800112e:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8001132:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001134:	4b19      	ldr	r3, [pc, #100]	; (800119c <MX_TIM2_Init+0x94>)
 8001136:	2200      	movs	r2, #0
 8001138:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 800113a:	4b18      	ldr	r3, [pc, #96]	; (800119c <MX_TIM2_Init+0x94>)
 800113c:	2209      	movs	r2, #9
 800113e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001140:	4b16      	ldr	r3, [pc, #88]	; (800119c <MX_TIM2_Init+0x94>)
 8001142:	2200      	movs	r2, #0
 8001144:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001146:	4b15      	ldr	r3, [pc, #84]	; (800119c <MX_TIM2_Init+0x94>)
 8001148:	2200      	movs	r2, #0
 800114a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800114c:	4813      	ldr	r0, [pc, #76]	; (800119c <MX_TIM2_Init+0x94>)
 800114e:	f001 f903 	bl	8002358 <HAL_TIM_Base_Init>
 8001152:	4603      	mov	r3, r0
 8001154:	2b00      	cmp	r3, #0
 8001156:	d001      	beq.n	800115c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001158:	f000 f890 	bl	800127c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800115c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001160:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001162:	f107 0308 	add.w	r3, r7, #8
 8001166:	4619      	mov	r1, r3
 8001168:	480c      	ldr	r0, [pc, #48]	; (800119c <MX_TIM2_Init+0x94>)
 800116a:	f001 fa99 	bl	80026a0 <HAL_TIM_ConfigClockSource>
 800116e:	4603      	mov	r3, r0
 8001170:	2b00      	cmp	r3, #0
 8001172:	d001      	beq.n	8001178 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001174:	f000 f882 	bl	800127c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001178:	2300      	movs	r3, #0
 800117a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800117c:	2300      	movs	r3, #0
 800117e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001180:	463b      	mov	r3, r7
 8001182:	4619      	mov	r1, r3
 8001184:	4805      	ldr	r0, [pc, #20]	; (800119c <MX_TIM2_Init+0x94>)
 8001186:	f001 fc65 	bl	8002a54 <HAL_TIMEx_MasterConfigSynchronization>
 800118a:	4603      	mov	r3, r0
 800118c:	2b00      	cmp	r3, #0
 800118e:	d001      	beq.n	8001194 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001190:	f000 f874 	bl	800127c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001194:	bf00      	nop
 8001196:	3718      	adds	r7, #24
 8001198:	46bd      	mov	sp, r7
 800119a:	bd80      	pop	{r7, pc}
 800119c:	20000104 	.word	0x20000104

080011a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b086      	sub	sp, #24
 80011a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011a6:	f107 0308 	add.w	r3, r7, #8
 80011aa:	2200      	movs	r2, #0
 80011ac:	601a      	str	r2, [r3, #0]
 80011ae:	605a      	str	r2, [r3, #4]
 80011b0:	609a      	str	r2, [r3, #8]
 80011b2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011b4:	4b28      	ldr	r3, [pc, #160]	; (8001258 <MX_GPIO_Init+0xb8>)
 80011b6:	699b      	ldr	r3, [r3, #24]
 80011b8:	4a27      	ldr	r2, [pc, #156]	; (8001258 <MX_GPIO_Init+0xb8>)
 80011ba:	f043 0304 	orr.w	r3, r3, #4
 80011be:	6193      	str	r3, [r2, #24]
 80011c0:	4b25      	ldr	r3, [pc, #148]	; (8001258 <MX_GPIO_Init+0xb8>)
 80011c2:	699b      	ldr	r3, [r3, #24]
 80011c4:	f003 0304 	and.w	r3, r3, #4
 80011c8:	607b      	str	r3, [r7, #4]
 80011ca:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011cc:	4b22      	ldr	r3, [pc, #136]	; (8001258 <MX_GPIO_Init+0xb8>)
 80011ce:	699b      	ldr	r3, [r3, #24]
 80011d0:	4a21      	ldr	r2, [pc, #132]	; (8001258 <MX_GPIO_Init+0xb8>)
 80011d2:	f043 0308 	orr.w	r3, r3, #8
 80011d6:	6193      	str	r3, [r2, #24]
 80011d8:	4b1f      	ldr	r3, [pc, #124]	; (8001258 <MX_GPIO_Init+0xb8>)
 80011da:	699b      	ldr	r3, [r3, #24]
 80011dc:	f003 0308 	and.w	r3, r3, #8
 80011e0:	603b      	str	r3, [r7, #0]
 80011e2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, EN0_Pin|EN1_Pin|EN2_Pin|EN3_Pin
 80011e4:	2200      	movs	r2, #0
 80011e6:	f64f 71c0 	movw	r1, #65472	; 0xffc0
 80011ea:	481c      	ldr	r0, [pc, #112]	; (800125c <MX_GPIO_Init+0xbc>)
 80011ec:	f000 fc59 	bl	8001aa2 <HAL_GPIO_WritePin>
                          |R1_Pin|A1_Pin|G1_Pin|R2_Pin
                          |A2_Pin|G2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SEG0_Pin|SEG1_Pin|SEG2_Pin|D0_Pin
 80011f0:	2200      	movs	r2, #0
 80011f2:	f643 71ff 	movw	r1, #16383	; 0x3fff
 80011f6:	481a      	ldr	r0, [pc, #104]	; (8001260 <MX_GPIO_Init+0xc0>)
 80011f8:	f000 fc53 	bl	8001aa2 <HAL_GPIO_WritePin>
                          |E0_Pin|F0_Pin|G0_Pin|SEG3_Pin
                          |SEG4_Pin|SEG5_Pin|SEG6_Pin|A0_Pin
                          |B0_Pin|C0_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : BTN1_Pin BTN2_Pin BTN3_Pin */
  GPIO_InitStruct.Pin = BTN1_Pin|BTN2_Pin|BTN3_Pin;
 80011fc:	2338      	movs	r3, #56	; 0x38
 80011fe:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001200:	2300      	movs	r3, #0
 8001202:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001204:	2300      	movs	r3, #0
 8001206:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001208:	f107 0308 	add.w	r3, r7, #8
 800120c:	4619      	mov	r1, r3
 800120e:	4813      	ldr	r0, [pc, #76]	; (800125c <MX_GPIO_Init+0xbc>)
 8001210:	f000 fab6 	bl	8001780 <HAL_GPIO_Init>

  /*Configure GPIO pins : EN0_Pin EN1_Pin EN2_Pin EN3_Pin
                           R1_Pin A1_Pin G1_Pin R2_Pin
                           A2_Pin G2_Pin */
  GPIO_InitStruct.Pin = EN0_Pin|EN1_Pin|EN2_Pin|EN3_Pin
 8001214:	f64f 73c0 	movw	r3, #65472	; 0xffc0
 8001218:	60bb      	str	r3, [r7, #8]
                          |R1_Pin|A1_Pin|G1_Pin|R2_Pin
                          |A2_Pin|G2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800121a:	2301      	movs	r3, #1
 800121c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800121e:	2300      	movs	r3, #0
 8001220:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001222:	2302      	movs	r3, #2
 8001224:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001226:	f107 0308 	add.w	r3, r7, #8
 800122a:	4619      	mov	r1, r3
 800122c:	480b      	ldr	r0, [pc, #44]	; (800125c <MX_GPIO_Init+0xbc>)
 800122e:	f000 faa7 	bl	8001780 <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG0_Pin SEG1_Pin SEG2_Pin D0_Pin
                           E0_Pin F0_Pin G0_Pin SEG3_Pin
                           SEG4_Pin SEG5_Pin SEG6_Pin A0_Pin
                           B0_Pin C0_Pin */
  GPIO_InitStruct.Pin = SEG0_Pin|SEG1_Pin|SEG2_Pin|D0_Pin
 8001232:	f643 73ff 	movw	r3, #16383	; 0x3fff
 8001236:	60bb      	str	r3, [r7, #8]
                          |E0_Pin|F0_Pin|G0_Pin|SEG3_Pin
                          |SEG4_Pin|SEG5_Pin|SEG6_Pin|A0_Pin
                          |B0_Pin|C0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001238:	2301      	movs	r3, #1
 800123a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800123c:	2300      	movs	r3, #0
 800123e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001240:	2302      	movs	r3, #2
 8001242:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001244:	f107 0308 	add.w	r3, r7, #8
 8001248:	4619      	mov	r1, r3
 800124a:	4805      	ldr	r0, [pc, #20]	; (8001260 <MX_GPIO_Init+0xc0>)
 800124c:	f000 fa98 	bl	8001780 <HAL_GPIO_Init>

}
 8001250:	bf00      	nop
 8001252:	3718      	adds	r7, #24
 8001254:	46bd      	mov	sp, r7
 8001256:	bd80      	pop	{r7, pc}
 8001258:	40021000 	.word	0x40021000
 800125c:	40010800 	.word	0x40010800
 8001260:	40010c00 	.word	0x40010c00

08001264 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b082      	sub	sp, #8
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
  timerRun();
 800126c:	f000 f844 	bl	80012f8 <timerRun>
  getKeyInput();
 8001270:	f7fe ff96 	bl	80001a0 <getKeyInput>
  /* USER CODE END Callback 0 */
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001274:	bf00      	nop
 8001276:	3708      	adds	r7, #8
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}

0800127c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800127c:	b480      	push	{r7}
 800127e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001280:	b672      	cpsid	i
}
 8001282:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001284:	e7fe      	b.n	8001284 <Error_Handler+0x8>
	...

08001288 <setTimer>:
#include "software_timer.h"

int timer_counter[NUM_OF_TIMERS] = {0};
int timer_flag[NUM_OF_TIMERS] = {0};

void setTimer(int index, int duration){
 8001288:	b480      	push	{r7}
 800128a:	b083      	sub	sp, #12
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
 8001290:	6039      	str	r1, [r7, #0]
	timer_counter[index] = duration / TIME_CYCLE;
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	4a09      	ldr	r2, [pc, #36]	; (80012bc <setTimer+0x34>)
 8001296:	fb82 1203 	smull	r1, r2, r2, r3
 800129a:	1092      	asrs	r2, r2, #2
 800129c:	17db      	asrs	r3, r3, #31
 800129e:	1ad2      	subs	r2, r2, r3
 80012a0:	4907      	ldr	r1, [pc, #28]	; (80012c0 <setTimer+0x38>)
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	timer_flag[index] = 0;
 80012a8:	4a06      	ldr	r2, [pc, #24]	; (80012c4 <setTimer+0x3c>)
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	2100      	movs	r1, #0
 80012ae:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 80012b2:	bf00      	nop
 80012b4:	370c      	adds	r7, #12
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bc80      	pop	{r7}
 80012ba:	4770      	bx	lr
 80012bc:	66666667 	.word	0x66666667
 80012c0:	200000b4 	.word	0x200000b4
 80012c4:	200000dc 	.word	0x200000dc

080012c8 <clearTimer>:

void clearTimer(int index){
 80012c8:	b480      	push	{r7}
 80012ca:	b083      	sub	sp, #12
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
	timer_counter[index] = 0;
 80012d0:	4a07      	ldr	r2, [pc, #28]	; (80012f0 <clearTimer+0x28>)
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	2100      	movs	r1, #0
 80012d6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	timer_flag[index] = 0;
 80012da:	4a06      	ldr	r2, [pc, #24]	; (80012f4 <clearTimer+0x2c>)
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	2100      	movs	r1, #0
 80012e0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 80012e4:	bf00      	nop
 80012e6:	370c      	adds	r7, #12
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bc80      	pop	{r7}
 80012ec:	4770      	bx	lr
 80012ee:	bf00      	nop
 80012f0:	200000b4 	.word	0x200000b4
 80012f4:	200000dc 	.word	0x200000dc

080012f8 <timerRun>:

void timerRun(){
 80012f8:	b480      	push	{r7}
 80012fa:	b083      	sub	sp, #12
 80012fc:	af00      	add	r7, sp, #0
	for (int i = 0; i < NUM_OF_TIMERS; i++){
 80012fe:	2300      	movs	r3, #0
 8001300:	607b      	str	r3, [r7, #4]
 8001302:	e01c      	b.n	800133e <timerRun+0x46>
		if (timer_counter[i] > 0){
 8001304:	4a12      	ldr	r2, [pc, #72]	; (8001350 <timerRun+0x58>)
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800130c:	2b00      	cmp	r3, #0
 800130e:	dd13      	ble.n	8001338 <timerRun+0x40>
			timer_counter[i]--;
 8001310:	4a0f      	ldr	r2, [pc, #60]	; (8001350 <timerRun+0x58>)
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001318:	1e5a      	subs	r2, r3, #1
 800131a:	490d      	ldr	r1, [pc, #52]	; (8001350 <timerRun+0x58>)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if (timer_counter[i] <= 0){
 8001322:	4a0b      	ldr	r2, [pc, #44]	; (8001350 <timerRun+0x58>)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800132a:	2b00      	cmp	r3, #0
 800132c:	dc04      	bgt.n	8001338 <timerRun+0x40>
				timer_flag[i] = 1;
 800132e:	4a09      	ldr	r2, [pc, #36]	; (8001354 <timerRun+0x5c>)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	2101      	movs	r1, #1
 8001334:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < NUM_OF_TIMERS; i++){
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	3301      	adds	r3, #1
 800133c:	607b      	str	r3, [r7, #4]
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	2b09      	cmp	r3, #9
 8001342:	dddf      	ble.n	8001304 <timerRun+0xc>
			}
		}
	}
}
 8001344:	bf00      	nop
 8001346:	bf00      	nop
 8001348:	370c      	adds	r7, #12
 800134a:	46bd      	mov	sp, r7
 800134c:	bc80      	pop	{r7}
 800134e:	4770      	bx	lr
 8001350:	200000b4 	.word	0x200000b4
 8001354:	200000dc 	.word	0x200000dc

08001358 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001358:	b480      	push	{r7}
 800135a:	b085      	sub	sp, #20
 800135c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800135e:	4b15      	ldr	r3, [pc, #84]	; (80013b4 <HAL_MspInit+0x5c>)
 8001360:	699b      	ldr	r3, [r3, #24]
 8001362:	4a14      	ldr	r2, [pc, #80]	; (80013b4 <HAL_MspInit+0x5c>)
 8001364:	f043 0301 	orr.w	r3, r3, #1
 8001368:	6193      	str	r3, [r2, #24]
 800136a:	4b12      	ldr	r3, [pc, #72]	; (80013b4 <HAL_MspInit+0x5c>)
 800136c:	699b      	ldr	r3, [r3, #24]
 800136e:	f003 0301 	and.w	r3, r3, #1
 8001372:	60bb      	str	r3, [r7, #8]
 8001374:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001376:	4b0f      	ldr	r3, [pc, #60]	; (80013b4 <HAL_MspInit+0x5c>)
 8001378:	69db      	ldr	r3, [r3, #28]
 800137a:	4a0e      	ldr	r2, [pc, #56]	; (80013b4 <HAL_MspInit+0x5c>)
 800137c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001380:	61d3      	str	r3, [r2, #28]
 8001382:	4b0c      	ldr	r3, [pc, #48]	; (80013b4 <HAL_MspInit+0x5c>)
 8001384:	69db      	ldr	r3, [r3, #28]
 8001386:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800138a:	607b      	str	r3, [r7, #4]
 800138c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 800138e:	4b0a      	ldr	r3, [pc, #40]	; (80013b8 <HAL_MspInit+0x60>)
 8001390:	685b      	ldr	r3, [r3, #4]
 8001392:	60fb      	str	r3, [r7, #12]
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800139a:	60fb      	str	r3, [r7, #12]
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80013a2:	60fb      	str	r3, [r7, #12]
 80013a4:	4a04      	ldr	r2, [pc, #16]	; (80013b8 <HAL_MspInit+0x60>)
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013aa:	bf00      	nop
 80013ac:	3714      	adds	r7, #20
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bc80      	pop	{r7}
 80013b2:	4770      	bx	lr
 80013b4:	40021000 	.word	0x40021000
 80013b8:	40010000 	.word	0x40010000

080013bc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b084      	sub	sp, #16
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80013cc:	d113      	bne.n	80013f6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80013ce:	4b0c      	ldr	r3, [pc, #48]	; (8001400 <HAL_TIM_Base_MspInit+0x44>)
 80013d0:	69db      	ldr	r3, [r3, #28]
 80013d2:	4a0b      	ldr	r2, [pc, #44]	; (8001400 <HAL_TIM_Base_MspInit+0x44>)
 80013d4:	f043 0301 	orr.w	r3, r3, #1
 80013d8:	61d3      	str	r3, [r2, #28]
 80013da:	4b09      	ldr	r3, [pc, #36]	; (8001400 <HAL_TIM_Base_MspInit+0x44>)
 80013dc:	69db      	ldr	r3, [r3, #28]
 80013de:	f003 0301 	and.w	r3, r3, #1
 80013e2:	60fb      	str	r3, [r7, #12]
 80013e4:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80013e6:	2200      	movs	r2, #0
 80013e8:	2100      	movs	r1, #0
 80013ea:	201c      	movs	r0, #28
 80013ec:	f000 f99d 	bl	800172a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80013f0:	201c      	movs	r0, #28
 80013f2:	f000 f9b6 	bl	8001762 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80013f6:	bf00      	nop
 80013f8:	3710      	adds	r7, #16
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	bf00      	nop
 8001400:	40021000 	.word	0x40021000

08001404 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b08c      	sub	sp, #48	; 0x30
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800140c:	2300      	movs	r3, #0
 800140e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001410:	2300      	movs	r3, #0
 8001412:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0);
 8001414:	2200      	movs	r2, #0
 8001416:	6879      	ldr	r1, [r7, #4]
 8001418:	2019      	movs	r0, #25
 800141a:	f000 f986 	bl	800172a <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 800141e:	2019      	movs	r0, #25
 8001420:	f000 f99f 	bl	8001762 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001424:	4b1e      	ldr	r3, [pc, #120]	; (80014a0 <HAL_InitTick+0x9c>)
 8001426:	699b      	ldr	r3, [r3, #24]
 8001428:	4a1d      	ldr	r2, [pc, #116]	; (80014a0 <HAL_InitTick+0x9c>)
 800142a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800142e:	6193      	str	r3, [r2, #24]
 8001430:	4b1b      	ldr	r3, [pc, #108]	; (80014a0 <HAL_InitTick+0x9c>)
 8001432:	699b      	ldr	r3, [r3, #24]
 8001434:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001438:	60fb      	str	r3, [r7, #12]
 800143a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800143c:	f107 0210 	add.w	r2, r7, #16
 8001440:	f107 0314 	add.w	r3, r7, #20
 8001444:	4611      	mov	r1, r2
 8001446:	4618      	mov	r0, r3
 8001448:	f000 ff38 	bl	80022bc <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 800144c:	f000 ff22 	bl	8002294 <HAL_RCC_GetPCLK2Freq>
 8001450:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001452:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001454:	4a13      	ldr	r2, [pc, #76]	; (80014a4 <HAL_InitTick+0xa0>)
 8001456:	fba2 2303 	umull	r2, r3, r2, r3
 800145a:	0c9b      	lsrs	r3, r3, #18
 800145c:	3b01      	subs	r3, #1
 800145e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001460:	4b11      	ldr	r3, [pc, #68]	; (80014a8 <HAL_InitTick+0xa4>)
 8001462:	4a12      	ldr	r2, [pc, #72]	; (80014ac <HAL_InitTick+0xa8>)
 8001464:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001466:	4b10      	ldr	r3, [pc, #64]	; (80014a8 <HAL_InitTick+0xa4>)
 8001468:	f240 32e7 	movw	r2, #999	; 0x3e7
 800146c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800146e:	4a0e      	ldr	r2, [pc, #56]	; (80014a8 <HAL_InitTick+0xa4>)
 8001470:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001472:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001474:	4b0c      	ldr	r3, [pc, #48]	; (80014a8 <HAL_InitTick+0xa4>)
 8001476:	2200      	movs	r2, #0
 8001478:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800147a:	4b0b      	ldr	r3, [pc, #44]	; (80014a8 <HAL_InitTick+0xa4>)
 800147c:	2200      	movs	r2, #0
 800147e:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8001480:	4809      	ldr	r0, [pc, #36]	; (80014a8 <HAL_InitTick+0xa4>)
 8001482:	f000 ff69 	bl	8002358 <HAL_TIM_Base_Init>
 8001486:	4603      	mov	r3, r0
 8001488:	2b00      	cmp	r3, #0
 800148a:	d104      	bne.n	8001496 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 800148c:	4806      	ldr	r0, [pc, #24]	; (80014a8 <HAL_InitTick+0xa4>)
 800148e:	f000 ffb3 	bl	80023f8 <HAL_TIM_Base_Start_IT>
 8001492:	4603      	mov	r3, r0
 8001494:	e000      	b.n	8001498 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8001496:	2301      	movs	r3, #1
}
 8001498:	4618      	mov	r0, r3
 800149a:	3730      	adds	r7, #48	; 0x30
 800149c:	46bd      	mov	sp, r7
 800149e:	bd80      	pop	{r7, pc}
 80014a0:	40021000 	.word	0x40021000
 80014a4:	431bde83 	.word	0x431bde83
 80014a8:	2000014c 	.word	0x2000014c
 80014ac:	40012c00 	.word	0x40012c00

080014b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014b0:	b480      	push	{r7}
 80014b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80014b4:	e7fe      	b.n	80014b4 <NMI_Handler+0x4>

080014b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014b6:	b480      	push	{r7}
 80014b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014ba:	e7fe      	b.n	80014ba <HardFault_Handler+0x4>

080014bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014bc:	b480      	push	{r7}
 80014be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014c0:	e7fe      	b.n	80014c0 <MemManage_Handler+0x4>

080014c2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014c2:	b480      	push	{r7}
 80014c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014c6:	e7fe      	b.n	80014c6 <BusFault_Handler+0x4>

080014c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014c8:	b480      	push	{r7}
 80014ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014cc:	e7fe      	b.n	80014cc <UsageFault_Handler+0x4>

080014ce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014ce:	b480      	push	{r7}
 80014d0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014d2:	bf00      	nop
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bc80      	pop	{r7}
 80014d8:	4770      	bx	lr

080014da <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014da:	b480      	push	{r7}
 80014dc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014de:	bf00      	nop
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bc80      	pop	{r7}
 80014e4:	4770      	bx	lr

080014e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014e6:	b480      	push	{r7}
 80014e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014ea:	bf00      	nop
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bc80      	pop	{r7}
 80014f0:	4770      	bx	lr

080014f2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014f2:	b480      	push	{r7}
 80014f4:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014f6:	bf00      	nop
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bc80      	pop	{r7}
 80014fc:	4770      	bx	lr
	...

08001500 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001504:	4802      	ldr	r0, [pc, #8]	; (8001510 <TIM1_UP_IRQHandler+0x10>)
 8001506:	f000 ffc3 	bl	8002490 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800150a:	bf00      	nop
 800150c:	bd80      	pop	{r7, pc}
 800150e:	bf00      	nop
 8001510:	2000014c 	.word	0x2000014c

08001514 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001518:	4802      	ldr	r0, [pc, #8]	; (8001524 <TIM2_IRQHandler+0x10>)
 800151a:	f000 ffb9 	bl	8002490 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800151e:	bf00      	nop
 8001520:	bd80      	pop	{r7, pc}
 8001522:	bf00      	nop
 8001524:	20000104 	.word	0x20000104

08001528 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001528:	b480      	push	{r7}
 800152a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800152c:	bf00      	nop
 800152e:	46bd      	mov	sp, r7
 8001530:	bc80      	pop	{r7}
 8001532:	4770      	bx	lr

08001534 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001534:	f7ff fff8 	bl	8001528 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001538:	480b      	ldr	r0, [pc, #44]	; (8001568 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800153a:	490c      	ldr	r1, [pc, #48]	; (800156c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800153c:	4a0c      	ldr	r2, [pc, #48]	; (8001570 <LoopFillZerobss+0x16>)
  movs r3, #0
 800153e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001540:	e002      	b.n	8001548 <LoopCopyDataInit>

08001542 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001542:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001544:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001546:	3304      	adds	r3, #4

08001548 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001548:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800154a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800154c:	d3f9      	bcc.n	8001542 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800154e:	4a09      	ldr	r2, [pc, #36]	; (8001574 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001550:	4c09      	ldr	r4, [pc, #36]	; (8001578 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001552:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001554:	e001      	b.n	800155a <LoopFillZerobss>

08001556 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001556:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001558:	3204      	adds	r2, #4

0800155a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800155a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800155c:	d3fb      	bcc.n	8001556 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800155e:	f001 fae3 	bl	8002b28 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001562:	f7ff fd83 	bl	800106c <main>
  bx lr
 8001566:	4770      	bx	lr
  ldr r0, =_sdata
 8001568:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800156c:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001570:	08002bcc 	.word	0x08002bcc
  ldr r2, =_sbss
 8001574:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001578:	20000198 	.word	0x20000198

0800157c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800157c:	e7fe      	b.n	800157c <ADC1_2_IRQHandler>
	...

08001580 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001584:	4b08      	ldr	r3, [pc, #32]	; (80015a8 <HAL_Init+0x28>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	4a07      	ldr	r2, [pc, #28]	; (80015a8 <HAL_Init+0x28>)
 800158a:	f043 0310 	orr.w	r3, r3, #16
 800158e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001590:	2003      	movs	r0, #3
 8001592:	f000 f8bf 	bl	8001714 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001596:	200f      	movs	r0, #15
 8001598:	f7ff ff34 	bl	8001404 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800159c:	f7ff fedc 	bl	8001358 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015a0:	2300      	movs	r3, #0
}
 80015a2:	4618      	mov	r0, r3
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	bf00      	nop
 80015a8:	40022000 	.word	0x40022000

080015ac <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015ac:	b480      	push	{r7}
 80015ae:	af00      	add	r7, sp, #0
  return uwTick;
 80015b0:	4b02      	ldr	r3, [pc, #8]	; (80015bc <HAL_GetTick+0x10>)
 80015b2:	681b      	ldr	r3, [r3, #0]
}
 80015b4:	4618      	mov	r0, r3
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bc80      	pop	{r7}
 80015ba:	4770      	bx	lr
 80015bc:	20000194 	.word	0x20000194

080015c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015c0:	b480      	push	{r7}
 80015c2:	b085      	sub	sp, #20
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	f003 0307 	and.w	r3, r3, #7
 80015ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015d0:	4b0c      	ldr	r3, [pc, #48]	; (8001604 <__NVIC_SetPriorityGrouping+0x44>)
 80015d2:	68db      	ldr	r3, [r3, #12]
 80015d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015d6:	68ba      	ldr	r2, [r7, #8]
 80015d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80015dc:	4013      	ands	r3, r2
 80015de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015e4:	68bb      	ldr	r3, [r7, #8]
 80015e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80015ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015f2:	4a04      	ldr	r2, [pc, #16]	; (8001604 <__NVIC_SetPriorityGrouping+0x44>)
 80015f4:	68bb      	ldr	r3, [r7, #8]
 80015f6:	60d3      	str	r3, [r2, #12]
}
 80015f8:	bf00      	nop
 80015fa:	3714      	adds	r7, #20
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bc80      	pop	{r7}
 8001600:	4770      	bx	lr
 8001602:	bf00      	nop
 8001604:	e000ed00 	.word	0xe000ed00

08001608 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001608:	b480      	push	{r7}
 800160a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800160c:	4b04      	ldr	r3, [pc, #16]	; (8001620 <__NVIC_GetPriorityGrouping+0x18>)
 800160e:	68db      	ldr	r3, [r3, #12]
 8001610:	0a1b      	lsrs	r3, r3, #8
 8001612:	f003 0307 	and.w	r3, r3, #7
}
 8001616:	4618      	mov	r0, r3
 8001618:	46bd      	mov	sp, r7
 800161a:	bc80      	pop	{r7}
 800161c:	4770      	bx	lr
 800161e:	bf00      	nop
 8001620:	e000ed00 	.word	0xe000ed00

08001624 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001624:	b480      	push	{r7}
 8001626:	b083      	sub	sp, #12
 8001628:	af00      	add	r7, sp, #0
 800162a:	4603      	mov	r3, r0
 800162c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800162e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001632:	2b00      	cmp	r3, #0
 8001634:	db0b      	blt.n	800164e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001636:	79fb      	ldrb	r3, [r7, #7]
 8001638:	f003 021f 	and.w	r2, r3, #31
 800163c:	4906      	ldr	r1, [pc, #24]	; (8001658 <__NVIC_EnableIRQ+0x34>)
 800163e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001642:	095b      	lsrs	r3, r3, #5
 8001644:	2001      	movs	r0, #1
 8001646:	fa00 f202 	lsl.w	r2, r0, r2
 800164a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800164e:	bf00      	nop
 8001650:	370c      	adds	r7, #12
 8001652:	46bd      	mov	sp, r7
 8001654:	bc80      	pop	{r7}
 8001656:	4770      	bx	lr
 8001658:	e000e100 	.word	0xe000e100

0800165c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800165c:	b480      	push	{r7}
 800165e:	b083      	sub	sp, #12
 8001660:	af00      	add	r7, sp, #0
 8001662:	4603      	mov	r3, r0
 8001664:	6039      	str	r1, [r7, #0]
 8001666:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001668:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800166c:	2b00      	cmp	r3, #0
 800166e:	db0a      	blt.n	8001686 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	b2da      	uxtb	r2, r3
 8001674:	490c      	ldr	r1, [pc, #48]	; (80016a8 <__NVIC_SetPriority+0x4c>)
 8001676:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800167a:	0112      	lsls	r2, r2, #4
 800167c:	b2d2      	uxtb	r2, r2
 800167e:	440b      	add	r3, r1
 8001680:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001684:	e00a      	b.n	800169c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	b2da      	uxtb	r2, r3
 800168a:	4908      	ldr	r1, [pc, #32]	; (80016ac <__NVIC_SetPriority+0x50>)
 800168c:	79fb      	ldrb	r3, [r7, #7]
 800168e:	f003 030f 	and.w	r3, r3, #15
 8001692:	3b04      	subs	r3, #4
 8001694:	0112      	lsls	r2, r2, #4
 8001696:	b2d2      	uxtb	r2, r2
 8001698:	440b      	add	r3, r1
 800169a:	761a      	strb	r2, [r3, #24]
}
 800169c:	bf00      	nop
 800169e:	370c      	adds	r7, #12
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bc80      	pop	{r7}
 80016a4:	4770      	bx	lr
 80016a6:	bf00      	nop
 80016a8:	e000e100 	.word	0xe000e100
 80016ac:	e000ed00 	.word	0xe000ed00

080016b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016b0:	b480      	push	{r7}
 80016b2:	b089      	sub	sp, #36	; 0x24
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	60f8      	str	r0, [r7, #12]
 80016b8:	60b9      	str	r1, [r7, #8]
 80016ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	f003 0307 	and.w	r3, r3, #7
 80016c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016c4:	69fb      	ldr	r3, [r7, #28]
 80016c6:	f1c3 0307 	rsb	r3, r3, #7
 80016ca:	2b04      	cmp	r3, #4
 80016cc:	bf28      	it	cs
 80016ce:	2304      	movcs	r3, #4
 80016d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016d2:	69fb      	ldr	r3, [r7, #28]
 80016d4:	3304      	adds	r3, #4
 80016d6:	2b06      	cmp	r3, #6
 80016d8:	d902      	bls.n	80016e0 <NVIC_EncodePriority+0x30>
 80016da:	69fb      	ldr	r3, [r7, #28]
 80016dc:	3b03      	subs	r3, #3
 80016de:	e000      	b.n	80016e2 <NVIC_EncodePriority+0x32>
 80016e0:	2300      	movs	r3, #0
 80016e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016e4:	f04f 32ff 	mov.w	r2, #4294967295
 80016e8:	69bb      	ldr	r3, [r7, #24]
 80016ea:	fa02 f303 	lsl.w	r3, r2, r3
 80016ee:	43da      	mvns	r2, r3
 80016f0:	68bb      	ldr	r3, [r7, #8]
 80016f2:	401a      	ands	r2, r3
 80016f4:	697b      	ldr	r3, [r7, #20]
 80016f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016f8:	f04f 31ff 	mov.w	r1, #4294967295
 80016fc:	697b      	ldr	r3, [r7, #20]
 80016fe:	fa01 f303 	lsl.w	r3, r1, r3
 8001702:	43d9      	mvns	r1, r3
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001708:	4313      	orrs	r3, r2
         );
}
 800170a:	4618      	mov	r0, r3
 800170c:	3724      	adds	r7, #36	; 0x24
 800170e:	46bd      	mov	sp, r7
 8001710:	bc80      	pop	{r7}
 8001712:	4770      	bx	lr

08001714 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b082      	sub	sp, #8
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800171c:	6878      	ldr	r0, [r7, #4]
 800171e:	f7ff ff4f 	bl	80015c0 <__NVIC_SetPriorityGrouping>
}
 8001722:	bf00      	nop
 8001724:	3708      	adds	r7, #8
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}

0800172a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800172a:	b580      	push	{r7, lr}
 800172c:	b086      	sub	sp, #24
 800172e:	af00      	add	r7, sp, #0
 8001730:	4603      	mov	r3, r0
 8001732:	60b9      	str	r1, [r7, #8]
 8001734:	607a      	str	r2, [r7, #4]
 8001736:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001738:	2300      	movs	r3, #0
 800173a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800173c:	f7ff ff64 	bl	8001608 <__NVIC_GetPriorityGrouping>
 8001740:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001742:	687a      	ldr	r2, [r7, #4]
 8001744:	68b9      	ldr	r1, [r7, #8]
 8001746:	6978      	ldr	r0, [r7, #20]
 8001748:	f7ff ffb2 	bl	80016b0 <NVIC_EncodePriority>
 800174c:	4602      	mov	r2, r0
 800174e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001752:	4611      	mov	r1, r2
 8001754:	4618      	mov	r0, r3
 8001756:	f7ff ff81 	bl	800165c <__NVIC_SetPriority>
}
 800175a:	bf00      	nop
 800175c:	3718      	adds	r7, #24
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}

08001762 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001762:	b580      	push	{r7, lr}
 8001764:	b082      	sub	sp, #8
 8001766:	af00      	add	r7, sp, #0
 8001768:	4603      	mov	r3, r0
 800176a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800176c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001770:	4618      	mov	r0, r3
 8001772:	f7ff ff57 	bl	8001624 <__NVIC_EnableIRQ>
}
 8001776:	bf00      	nop
 8001778:	3708      	adds	r7, #8
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}
	...

08001780 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001780:	b480      	push	{r7}
 8001782:	b08b      	sub	sp, #44	; 0x2c
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
 8001788:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800178a:	2300      	movs	r3, #0
 800178c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800178e:	2300      	movs	r3, #0
 8001790:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001792:	e148      	b.n	8001a26 <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001794:	2201      	movs	r2, #1
 8001796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001798:	fa02 f303 	lsl.w	r3, r2, r3
 800179c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	69fa      	ldr	r2, [r7, #28]
 80017a4:	4013      	ands	r3, r2
 80017a6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80017a8:	69ba      	ldr	r2, [r7, #24]
 80017aa:	69fb      	ldr	r3, [r7, #28]
 80017ac:	429a      	cmp	r2, r3
 80017ae:	f040 8137 	bne.w	8001a20 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	685b      	ldr	r3, [r3, #4]
 80017b6:	4aa3      	ldr	r2, [pc, #652]	; (8001a44 <HAL_GPIO_Init+0x2c4>)
 80017b8:	4293      	cmp	r3, r2
 80017ba:	d05e      	beq.n	800187a <HAL_GPIO_Init+0xfa>
 80017bc:	4aa1      	ldr	r2, [pc, #644]	; (8001a44 <HAL_GPIO_Init+0x2c4>)
 80017be:	4293      	cmp	r3, r2
 80017c0:	d875      	bhi.n	80018ae <HAL_GPIO_Init+0x12e>
 80017c2:	4aa1      	ldr	r2, [pc, #644]	; (8001a48 <HAL_GPIO_Init+0x2c8>)
 80017c4:	4293      	cmp	r3, r2
 80017c6:	d058      	beq.n	800187a <HAL_GPIO_Init+0xfa>
 80017c8:	4a9f      	ldr	r2, [pc, #636]	; (8001a48 <HAL_GPIO_Init+0x2c8>)
 80017ca:	4293      	cmp	r3, r2
 80017cc:	d86f      	bhi.n	80018ae <HAL_GPIO_Init+0x12e>
 80017ce:	4a9f      	ldr	r2, [pc, #636]	; (8001a4c <HAL_GPIO_Init+0x2cc>)
 80017d0:	4293      	cmp	r3, r2
 80017d2:	d052      	beq.n	800187a <HAL_GPIO_Init+0xfa>
 80017d4:	4a9d      	ldr	r2, [pc, #628]	; (8001a4c <HAL_GPIO_Init+0x2cc>)
 80017d6:	4293      	cmp	r3, r2
 80017d8:	d869      	bhi.n	80018ae <HAL_GPIO_Init+0x12e>
 80017da:	4a9d      	ldr	r2, [pc, #628]	; (8001a50 <HAL_GPIO_Init+0x2d0>)
 80017dc:	4293      	cmp	r3, r2
 80017de:	d04c      	beq.n	800187a <HAL_GPIO_Init+0xfa>
 80017e0:	4a9b      	ldr	r2, [pc, #620]	; (8001a50 <HAL_GPIO_Init+0x2d0>)
 80017e2:	4293      	cmp	r3, r2
 80017e4:	d863      	bhi.n	80018ae <HAL_GPIO_Init+0x12e>
 80017e6:	4a9b      	ldr	r2, [pc, #620]	; (8001a54 <HAL_GPIO_Init+0x2d4>)
 80017e8:	4293      	cmp	r3, r2
 80017ea:	d046      	beq.n	800187a <HAL_GPIO_Init+0xfa>
 80017ec:	4a99      	ldr	r2, [pc, #612]	; (8001a54 <HAL_GPIO_Init+0x2d4>)
 80017ee:	4293      	cmp	r3, r2
 80017f0:	d85d      	bhi.n	80018ae <HAL_GPIO_Init+0x12e>
 80017f2:	2b12      	cmp	r3, #18
 80017f4:	d82a      	bhi.n	800184c <HAL_GPIO_Init+0xcc>
 80017f6:	2b12      	cmp	r3, #18
 80017f8:	d859      	bhi.n	80018ae <HAL_GPIO_Init+0x12e>
 80017fa:	a201      	add	r2, pc, #4	; (adr r2, 8001800 <HAL_GPIO_Init+0x80>)
 80017fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001800:	0800187b 	.word	0x0800187b
 8001804:	08001855 	.word	0x08001855
 8001808:	08001867 	.word	0x08001867
 800180c:	080018a9 	.word	0x080018a9
 8001810:	080018af 	.word	0x080018af
 8001814:	080018af 	.word	0x080018af
 8001818:	080018af 	.word	0x080018af
 800181c:	080018af 	.word	0x080018af
 8001820:	080018af 	.word	0x080018af
 8001824:	080018af 	.word	0x080018af
 8001828:	080018af 	.word	0x080018af
 800182c:	080018af 	.word	0x080018af
 8001830:	080018af 	.word	0x080018af
 8001834:	080018af 	.word	0x080018af
 8001838:	080018af 	.word	0x080018af
 800183c:	080018af 	.word	0x080018af
 8001840:	080018af 	.word	0x080018af
 8001844:	0800185d 	.word	0x0800185d
 8001848:	08001871 	.word	0x08001871
 800184c:	4a82      	ldr	r2, [pc, #520]	; (8001a58 <HAL_GPIO_Init+0x2d8>)
 800184e:	4293      	cmp	r3, r2
 8001850:	d013      	beq.n	800187a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001852:	e02c      	b.n	80018ae <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	68db      	ldr	r3, [r3, #12]
 8001858:	623b      	str	r3, [r7, #32]
          break;
 800185a:	e029      	b.n	80018b0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	68db      	ldr	r3, [r3, #12]
 8001860:	3304      	adds	r3, #4
 8001862:	623b      	str	r3, [r7, #32]
          break;
 8001864:	e024      	b.n	80018b0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	68db      	ldr	r3, [r3, #12]
 800186a:	3308      	adds	r3, #8
 800186c:	623b      	str	r3, [r7, #32]
          break;
 800186e:	e01f      	b.n	80018b0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	68db      	ldr	r3, [r3, #12]
 8001874:	330c      	adds	r3, #12
 8001876:	623b      	str	r3, [r7, #32]
          break;
 8001878:	e01a      	b.n	80018b0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	689b      	ldr	r3, [r3, #8]
 800187e:	2b00      	cmp	r3, #0
 8001880:	d102      	bne.n	8001888 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001882:	2304      	movs	r3, #4
 8001884:	623b      	str	r3, [r7, #32]
          break;
 8001886:	e013      	b.n	80018b0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	689b      	ldr	r3, [r3, #8]
 800188c:	2b01      	cmp	r3, #1
 800188e:	d105      	bne.n	800189c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001890:	2308      	movs	r3, #8
 8001892:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	69fa      	ldr	r2, [r7, #28]
 8001898:	611a      	str	r2, [r3, #16]
          break;
 800189a:	e009      	b.n	80018b0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800189c:	2308      	movs	r3, #8
 800189e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	69fa      	ldr	r2, [r7, #28]
 80018a4:	615a      	str	r2, [r3, #20]
          break;
 80018a6:	e003      	b.n	80018b0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80018a8:	2300      	movs	r3, #0
 80018aa:	623b      	str	r3, [r7, #32]
          break;
 80018ac:	e000      	b.n	80018b0 <HAL_GPIO_Init+0x130>
          break;
 80018ae:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80018b0:	69bb      	ldr	r3, [r7, #24]
 80018b2:	2bff      	cmp	r3, #255	; 0xff
 80018b4:	d801      	bhi.n	80018ba <HAL_GPIO_Init+0x13a>
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	e001      	b.n	80018be <HAL_GPIO_Init+0x13e>
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	3304      	adds	r3, #4
 80018be:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80018c0:	69bb      	ldr	r3, [r7, #24]
 80018c2:	2bff      	cmp	r3, #255	; 0xff
 80018c4:	d802      	bhi.n	80018cc <HAL_GPIO_Init+0x14c>
 80018c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018c8:	009b      	lsls	r3, r3, #2
 80018ca:	e002      	b.n	80018d2 <HAL_GPIO_Init+0x152>
 80018cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ce:	3b08      	subs	r3, #8
 80018d0:	009b      	lsls	r3, r3, #2
 80018d2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80018d4:	697b      	ldr	r3, [r7, #20]
 80018d6:	681a      	ldr	r2, [r3, #0]
 80018d8:	210f      	movs	r1, #15
 80018da:	693b      	ldr	r3, [r7, #16]
 80018dc:	fa01 f303 	lsl.w	r3, r1, r3
 80018e0:	43db      	mvns	r3, r3
 80018e2:	401a      	ands	r2, r3
 80018e4:	6a39      	ldr	r1, [r7, #32]
 80018e6:	693b      	ldr	r3, [r7, #16]
 80018e8:	fa01 f303 	lsl.w	r3, r1, r3
 80018ec:	431a      	orrs	r2, r3
 80018ee:	697b      	ldr	r3, [r7, #20]
 80018f0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	685b      	ldr	r3, [r3, #4]
 80018f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	f000 8090 	beq.w	8001a20 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001900:	4b56      	ldr	r3, [pc, #344]	; (8001a5c <HAL_GPIO_Init+0x2dc>)
 8001902:	699b      	ldr	r3, [r3, #24]
 8001904:	4a55      	ldr	r2, [pc, #340]	; (8001a5c <HAL_GPIO_Init+0x2dc>)
 8001906:	f043 0301 	orr.w	r3, r3, #1
 800190a:	6193      	str	r3, [r2, #24]
 800190c:	4b53      	ldr	r3, [pc, #332]	; (8001a5c <HAL_GPIO_Init+0x2dc>)
 800190e:	699b      	ldr	r3, [r3, #24]
 8001910:	f003 0301 	and.w	r3, r3, #1
 8001914:	60bb      	str	r3, [r7, #8]
 8001916:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001918:	4a51      	ldr	r2, [pc, #324]	; (8001a60 <HAL_GPIO_Init+0x2e0>)
 800191a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800191c:	089b      	lsrs	r3, r3, #2
 800191e:	3302      	adds	r3, #2
 8001920:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001924:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001928:	f003 0303 	and.w	r3, r3, #3
 800192c:	009b      	lsls	r3, r3, #2
 800192e:	220f      	movs	r2, #15
 8001930:	fa02 f303 	lsl.w	r3, r2, r3
 8001934:	43db      	mvns	r3, r3
 8001936:	68fa      	ldr	r2, [r7, #12]
 8001938:	4013      	ands	r3, r2
 800193a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	4a49      	ldr	r2, [pc, #292]	; (8001a64 <HAL_GPIO_Init+0x2e4>)
 8001940:	4293      	cmp	r3, r2
 8001942:	d00d      	beq.n	8001960 <HAL_GPIO_Init+0x1e0>
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	4a48      	ldr	r2, [pc, #288]	; (8001a68 <HAL_GPIO_Init+0x2e8>)
 8001948:	4293      	cmp	r3, r2
 800194a:	d007      	beq.n	800195c <HAL_GPIO_Init+0x1dc>
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	4a47      	ldr	r2, [pc, #284]	; (8001a6c <HAL_GPIO_Init+0x2ec>)
 8001950:	4293      	cmp	r3, r2
 8001952:	d101      	bne.n	8001958 <HAL_GPIO_Init+0x1d8>
 8001954:	2302      	movs	r3, #2
 8001956:	e004      	b.n	8001962 <HAL_GPIO_Init+0x1e2>
 8001958:	2303      	movs	r3, #3
 800195a:	e002      	b.n	8001962 <HAL_GPIO_Init+0x1e2>
 800195c:	2301      	movs	r3, #1
 800195e:	e000      	b.n	8001962 <HAL_GPIO_Init+0x1e2>
 8001960:	2300      	movs	r3, #0
 8001962:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001964:	f002 0203 	and.w	r2, r2, #3
 8001968:	0092      	lsls	r2, r2, #2
 800196a:	4093      	lsls	r3, r2
 800196c:	68fa      	ldr	r2, [r7, #12]
 800196e:	4313      	orrs	r3, r2
 8001970:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001972:	493b      	ldr	r1, [pc, #236]	; (8001a60 <HAL_GPIO_Init+0x2e0>)
 8001974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001976:	089b      	lsrs	r3, r3, #2
 8001978:	3302      	adds	r3, #2
 800197a:	68fa      	ldr	r2, [r7, #12]
 800197c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001988:	2b00      	cmp	r3, #0
 800198a:	d006      	beq.n	800199a <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800198c:	4b38      	ldr	r3, [pc, #224]	; (8001a70 <HAL_GPIO_Init+0x2f0>)
 800198e:	689a      	ldr	r2, [r3, #8]
 8001990:	4937      	ldr	r1, [pc, #220]	; (8001a70 <HAL_GPIO_Init+0x2f0>)
 8001992:	69bb      	ldr	r3, [r7, #24]
 8001994:	4313      	orrs	r3, r2
 8001996:	608b      	str	r3, [r1, #8]
 8001998:	e006      	b.n	80019a8 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800199a:	4b35      	ldr	r3, [pc, #212]	; (8001a70 <HAL_GPIO_Init+0x2f0>)
 800199c:	689a      	ldr	r2, [r3, #8]
 800199e:	69bb      	ldr	r3, [r7, #24]
 80019a0:	43db      	mvns	r3, r3
 80019a2:	4933      	ldr	r1, [pc, #204]	; (8001a70 <HAL_GPIO_Init+0x2f0>)
 80019a4:	4013      	ands	r3, r2
 80019a6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d006      	beq.n	80019c2 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80019b4:	4b2e      	ldr	r3, [pc, #184]	; (8001a70 <HAL_GPIO_Init+0x2f0>)
 80019b6:	68da      	ldr	r2, [r3, #12]
 80019b8:	492d      	ldr	r1, [pc, #180]	; (8001a70 <HAL_GPIO_Init+0x2f0>)
 80019ba:	69bb      	ldr	r3, [r7, #24]
 80019bc:	4313      	orrs	r3, r2
 80019be:	60cb      	str	r3, [r1, #12]
 80019c0:	e006      	b.n	80019d0 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80019c2:	4b2b      	ldr	r3, [pc, #172]	; (8001a70 <HAL_GPIO_Init+0x2f0>)
 80019c4:	68da      	ldr	r2, [r3, #12]
 80019c6:	69bb      	ldr	r3, [r7, #24]
 80019c8:	43db      	mvns	r3, r3
 80019ca:	4929      	ldr	r1, [pc, #164]	; (8001a70 <HAL_GPIO_Init+0x2f0>)
 80019cc:	4013      	ands	r3, r2
 80019ce:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d006      	beq.n	80019ea <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80019dc:	4b24      	ldr	r3, [pc, #144]	; (8001a70 <HAL_GPIO_Init+0x2f0>)
 80019de:	685a      	ldr	r2, [r3, #4]
 80019e0:	4923      	ldr	r1, [pc, #140]	; (8001a70 <HAL_GPIO_Init+0x2f0>)
 80019e2:	69bb      	ldr	r3, [r7, #24]
 80019e4:	4313      	orrs	r3, r2
 80019e6:	604b      	str	r3, [r1, #4]
 80019e8:	e006      	b.n	80019f8 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80019ea:	4b21      	ldr	r3, [pc, #132]	; (8001a70 <HAL_GPIO_Init+0x2f0>)
 80019ec:	685a      	ldr	r2, [r3, #4]
 80019ee:	69bb      	ldr	r3, [r7, #24]
 80019f0:	43db      	mvns	r3, r3
 80019f2:	491f      	ldr	r1, [pc, #124]	; (8001a70 <HAL_GPIO_Init+0x2f0>)
 80019f4:	4013      	ands	r3, r2
 80019f6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d006      	beq.n	8001a12 <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001a04:	4b1a      	ldr	r3, [pc, #104]	; (8001a70 <HAL_GPIO_Init+0x2f0>)
 8001a06:	681a      	ldr	r2, [r3, #0]
 8001a08:	4919      	ldr	r1, [pc, #100]	; (8001a70 <HAL_GPIO_Init+0x2f0>)
 8001a0a:	69bb      	ldr	r3, [r7, #24]
 8001a0c:	4313      	orrs	r3, r2
 8001a0e:	600b      	str	r3, [r1, #0]
 8001a10:	e006      	b.n	8001a20 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001a12:	4b17      	ldr	r3, [pc, #92]	; (8001a70 <HAL_GPIO_Init+0x2f0>)
 8001a14:	681a      	ldr	r2, [r3, #0]
 8001a16:	69bb      	ldr	r3, [r7, #24]
 8001a18:	43db      	mvns	r3, r3
 8001a1a:	4915      	ldr	r1, [pc, #84]	; (8001a70 <HAL_GPIO_Init+0x2f0>)
 8001a1c:	4013      	ands	r3, r2
 8001a1e:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a22:	3301      	adds	r3, #1
 8001a24:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	681a      	ldr	r2, [r3, #0]
 8001a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a2c:	fa22 f303 	lsr.w	r3, r2, r3
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	f47f aeaf 	bne.w	8001794 <HAL_GPIO_Init+0x14>
  }
}
 8001a36:	bf00      	nop
 8001a38:	bf00      	nop
 8001a3a:	372c      	adds	r7, #44	; 0x2c
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bc80      	pop	{r7}
 8001a40:	4770      	bx	lr
 8001a42:	bf00      	nop
 8001a44:	10320000 	.word	0x10320000
 8001a48:	10310000 	.word	0x10310000
 8001a4c:	10220000 	.word	0x10220000
 8001a50:	10210000 	.word	0x10210000
 8001a54:	10120000 	.word	0x10120000
 8001a58:	10110000 	.word	0x10110000
 8001a5c:	40021000 	.word	0x40021000
 8001a60:	40010000 	.word	0x40010000
 8001a64:	40010800 	.word	0x40010800
 8001a68:	40010c00 	.word	0x40010c00
 8001a6c:	40011000 	.word	0x40011000
 8001a70:	40010400 	.word	0x40010400

08001a74 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001a74:	b480      	push	{r7}
 8001a76:	b085      	sub	sp, #20
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
 8001a7c:	460b      	mov	r3, r1
 8001a7e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	689a      	ldr	r2, [r3, #8]
 8001a84:	887b      	ldrh	r3, [r7, #2]
 8001a86:	4013      	ands	r3, r2
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d002      	beq.n	8001a92 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001a8c:	2301      	movs	r3, #1
 8001a8e:	73fb      	strb	r3, [r7, #15]
 8001a90:	e001      	b.n	8001a96 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001a92:	2300      	movs	r3, #0
 8001a94:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001a96:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a98:	4618      	mov	r0, r3
 8001a9a:	3714      	adds	r7, #20
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	bc80      	pop	{r7}
 8001aa0:	4770      	bx	lr

08001aa2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001aa2:	b480      	push	{r7}
 8001aa4:	b083      	sub	sp, #12
 8001aa6:	af00      	add	r7, sp, #0
 8001aa8:	6078      	str	r0, [r7, #4]
 8001aaa:	460b      	mov	r3, r1
 8001aac:	807b      	strh	r3, [r7, #2]
 8001aae:	4613      	mov	r3, r2
 8001ab0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001ab2:	787b      	ldrb	r3, [r7, #1]
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d003      	beq.n	8001ac0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ab8:	887a      	ldrh	r2, [r7, #2]
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001abe:	e003      	b.n	8001ac8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001ac0:	887b      	ldrh	r3, [r7, #2]
 8001ac2:	041a      	lsls	r2, r3, #16
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	611a      	str	r2, [r3, #16]
}
 8001ac8:	bf00      	nop
 8001aca:	370c      	adds	r7, #12
 8001acc:	46bd      	mov	sp, r7
 8001ace:	bc80      	pop	{r7}
 8001ad0:	4770      	bx	lr

08001ad2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001ad2:	b480      	push	{r7}
 8001ad4:	b085      	sub	sp, #20
 8001ad6:	af00      	add	r7, sp, #0
 8001ad8:	6078      	str	r0, [r7, #4]
 8001ada:	460b      	mov	r3, r1
 8001adc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	68db      	ldr	r3, [r3, #12]
 8001ae2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001ae4:	887a      	ldrh	r2, [r7, #2]
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	4013      	ands	r3, r2
 8001aea:	041a      	lsls	r2, r3, #16
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	43d9      	mvns	r1, r3
 8001af0:	887b      	ldrh	r3, [r7, #2]
 8001af2:	400b      	ands	r3, r1
 8001af4:	431a      	orrs	r2, r3
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	611a      	str	r2, [r3, #16]
}
 8001afa:	bf00      	nop
 8001afc:	3714      	adds	r7, #20
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bc80      	pop	{r7}
 8001b02:	4770      	bx	lr

08001b04 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b086      	sub	sp, #24
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d101      	bne.n	8001b16 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b12:	2301      	movs	r3, #1
 8001b14:	e26c      	b.n	8001ff0 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f003 0301 	and.w	r3, r3, #1
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	f000 8087 	beq.w	8001c32 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001b24:	4b92      	ldr	r3, [pc, #584]	; (8001d70 <HAL_RCC_OscConfig+0x26c>)
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	f003 030c 	and.w	r3, r3, #12
 8001b2c:	2b04      	cmp	r3, #4
 8001b2e:	d00c      	beq.n	8001b4a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001b30:	4b8f      	ldr	r3, [pc, #572]	; (8001d70 <HAL_RCC_OscConfig+0x26c>)
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	f003 030c 	and.w	r3, r3, #12
 8001b38:	2b08      	cmp	r3, #8
 8001b3a:	d112      	bne.n	8001b62 <HAL_RCC_OscConfig+0x5e>
 8001b3c:	4b8c      	ldr	r3, [pc, #560]	; (8001d70 <HAL_RCC_OscConfig+0x26c>)
 8001b3e:	685b      	ldr	r3, [r3, #4]
 8001b40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b48:	d10b      	bne.n	8001b62 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b4a:	4b89      	ldr	r3, [pc, #548]	; (8001d70 <HAL_RCC_OscConfig+0x26c>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d06c      	beq.n	8001c30 <HAL_RCC_OscConfig+0x12c>
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	685b      	ldr	r3, [r3, #4]
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d168      	bne.n	8001c30 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001b5e:	2301      	movs	r3, #1
 8001b60:	e246      	b.n	8001ff0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	685b      	ldr	r3, [r3, #4]
 8001b66:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b6a:	d106      	bne.n	8001b7a <HAL_RCC_OscConfig+0x76>
 8001b6c:	4b80      	ldr	r3, [pc, #512]	; (8001d70 <HAL_RCC_OscConfig+0x26c>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	4a7f      	ldr	r2, [pc, #508]	; (8001d70 <HAL_RCC_OscConfig+0x26c>)
 8001b72:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b76:	6013      	str	r3, [r2, #0]
 8001b78:	e02e      	b.n	8001bd8 <HAL_RCC_OscConfig+0xd4>
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	685b      	ldr	r3, [r3, #4]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d10c      	bne.n	8001b9c <HAL_RCC_OscConfig+0x98>
 8001b82:	4b7b      	ldr	r3, [pc, #492]	; (8001d70 <HAL_RCC_OscConfig+0x26c>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4a7a      	ldr	r2, [pc, #488]	; (8001d70 <HAL_RCC_OscConfig+0x26c>)
 8001b88:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b8c:	6013      	str	r3, [r2, #0]
 8001b8e:	4b78      	ldr	r3, [pc, #480]	; (8001d70 <HAL_RCC_OscConfig+0x26c>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	4a77      	ldr	r2, [pc, #476]	; (8001d70 <HAL_RCC_OscConfig+0x26c>)
 8001b94:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b98:	6013      	str	r3, [r2, #0]
 8001b9a:	e01d      	b.n	8001bd8 <HAL_RCC_OscConfig+0xd4>
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ba4:	d10c      	bne.n	8001bc0 <HAL_RCC_OscConfig+0xbc>
 8001ba6:	4b72      	ldr	r3, [pc, #456]	; (8001d70 <HAL_RCC_OscConfig+0x26c>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	4a71      	ldr	r2, [pc, #452]	; (8001d70 <HAL_RCC_OscConfig+0x26c>)
 8001bac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001bb0:	6013      	str	r3, [r2, #0]
 8001bb2:	4b6f      	ldr	r3, [pc, #444]	; (8001d70 <HAL_RCC_OscConfig+0x26c>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	4a6e      	ldr	r2, [pc, #440]	; (8001d70 <HAL_RCC_OscConfig+0x26c>)
 8001bb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bbc:	6013      	str	r3, [r2, #0]
 8001bbe:	e00b      	b.n	8001bd8 <HAL_RCC_OscConfig+0xd4>
 8001bc0:	4b6b      	ldr	r3, [pc, #428]	; (8001d70 <HAL_RCC_OscConfig+0x26c>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4a6a      	ldr	r2, [pc, #424]	; (8001d70 <HAL_RCC_OscConfig+0x26c>)
 8001bc6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001bca:	6013      	str	r3, [r2, #0]
 8001bcc:	4b68      	ldr	r3, [pc, #416]	; (8001d70 <HAL_RCC_OscConfig+0x26c>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4a67      	ldr	r2, [pc, #412]	; (8001d70 <HAL_RCC_OscConfig+0x26c>)
 8001bd2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001bd6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	685b      	ldr	r3, [r3, #4]
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d013      	beq.n	8001c08 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001be0:	f7ff fce4 	bl	80015ac <HAL_GetTick>
 8001be4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001be6:	e008      	b.n	8001bfa <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001be8:	f7ff fce0 	bl	80015ac <HAL_GetTick>
 8001bec:	4602      	mov	r2, r0
 8001bee:	693b      	ldr	r3, [r7, #16]
 8001bf0:	1ad3      	subs	r3, r2, r3
 8001bf2:	2b64      	cmp	r3, #100	; 0x64
 8001bf4:	d901      	bls.n	8001bfa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001bf6:	2303      	movs	r3, #3
 8001bf8:	e1fa      	b.n	8001ff0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bfa:	4b5d      	ldr	r3, [pc, #372]	; (8001d70 <HAL_RCC_OscConfig+0x26c>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d0f0      	beq.n	8001be8 <HAL_RCC_OscConfig+0xe4>
 8001c06:	e014      	b.n	8001c32 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c08:	f7ff fcd0 	bl	80015ac <HAL_GetTick>
 8001c0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c0e:	e008      	b.n	8001c22 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c10:	f7ff fccc 	bl	80015ac <HAL_GetTick>
 8001c14:	4602      	mov	r2, r0
 8001c16:	693b      	ldr	r3, [r7, #16]
 8001c18:	1ad3      	subs	r3, r2, r3
 8001c1a:	2b64      	cmp	r3, #100	; 0x64
 8001c1c:	d901      	bls.n	8001c22 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001c1e:	2303      	movs	r3, #3
 8001c20:	e1e6      	b.n	8001ff0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c22:	4b53      	ldr	r3, [pc, #332]	; (8001d70 <HAL_RCC_OscConfig+0x26c>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d1f0      	bne.n	8001c10 <HAL_RCC_OscConfig+0x10c>
 8001c2e:	e000      	b.n	8001c32 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c30:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f003 0302 	and.w	r3, r3, #2
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d063      	beq.n	8001d06 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001c3e:	4b4c      	ldr	r3, [pc, #304]	; (8001d70 <HAL_RCC_OscConfig+0x26c>)
 8001c40:	685b      	ldr	r3, [r3, #4]
 8001c42:	f003 030c 	and.w	r3, r3, #12
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d00b      	beq.n	8001c62 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001c4a:	4b49      	ldr	r3, [pc, #292]	; (8001d70 <HAL_RCC_OscConfig+0x26c>)
 8001c4c:	685b      	ldr	r3, [r3, #4]
 8001c4e:	f003 030c 	and.w	r3, r3, #12
 8001c52:	2b08      	cmp	r3, #8
 8001c54:	d11c      	bne.n	8001c90 <HAL_RCC_OscConfig+0x18c>
 8001c56:	4b46      	ldr	r3, [pc, #280]	; (8001d70 <HAL_RCC_OscConfig+0x26c>)
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d116      	bne.n	8001c90 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c62:	4b43      	ldr	r3, [pc, #268]	; (8001d70 <HAL_RCC_OscConfig+0x26c>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f003 0302 	and.w	r3, r3, #2
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d005      	beq.n	8001c7a <HAL_RCC_OscConfig+0x176>
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	691b      	ldr	r3, [r3, #16]
 8001c72:	2b01      	cmp	r3, #1
 8001c74:	d001      	beq.n	8001c7a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001c76:	2301      	movs	r3, #1
 8001c78:	e1ba      	b.n	8001ff0 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c7a:	4b3d      	ldr	r3, [pc, #244]	; (8001d70 <HAL_RCC_OscConfig+0x26c>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	695b      	ldr	r3, [r3, #20]
 8001c86:	00db      	lsls	r3, r3, #3
 8001c88:	4939      	ldr	r1, [pc, #228]	; (8001d70 <HAL_RCC_OscConfig+0x26c>)
 8001c8a:	4313      	orrs	r3, r2
 8001c8c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c8e:	e03a      	b.n	8001d06 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	691b      	ldr	r3, [r3, #16]
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d020      	beq.n	8001cda <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c98:	4b36      	ldr	r3, [pc, #216]	; (8001d74 <HAL_RCC_OscConfig+0x270>)
 8001c9a:	2201      	movs	r2, #1
 8001c9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c9e:	f7ff fc85 	bl	80015ac <HAL_GetTick>
 8001ca2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ca4:	e008      	b.n	8001cb8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ca6:	f7ff fc81 	bl	80015ac <HAL_GetTick>
 8001caa:	4602      	mov	r2, r0
 8001cac:	693b      	ldr	r3, [r7, #16]
 8001cae:	1ad3      	subs	r3, r2, r3
 8001cb0:	2b02      	cmp	r3, #2
 8001cb2:	d901      	bls.n	8001cb8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001cb4:	2303      	movs	r3, #3
 8001cb6:	e19b      	b.n	8001ff0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cb8:	4b2d      	ldr	r3, [pc, #180]	; (8001d70 <HAL_RCC_OscConfig+0x26c>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f003 0302 	and.w	r3, r3, #2
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d0f0      	beq.n	8001ca6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cc4:	4b2a      	ldr	r3, [pc, #168]	; (8001d70 <HAL_RCC_OscConfig+0x26c>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	695b      	ldr	r3, [r3, #20]
 8001cd0:	00db      	lsls	r3, r3, #3
 8001cd2:	4927      	ldr	r1, [pc, #156]	; (8001d70 <HAL_RCC_OscConfig+0x26c>)
 8001cd4:	4313      	orrs	r3, r2
 8001cd6:	600b      	str	r3, [r1, #0]
 8001cd8:	e015      	b.n	8001d06 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001cda:	4b26      	ldr	r3, [pc, #152]	; (8001d74 <HAL_RCC_OscConfig+0x270>)
 8001cdc:	2200      	movs	r2, #0
 8001cde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ce0:	f7ff fc64 	bl	80015ac <HAL_GetTick>
 8001ce4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ce6:	e008      	b.n	8001cfa <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ce8:	f7ff fc60 	bl	80015ac <HAL_GetTick>
 8001cec:	4602      	mov	r2, r0
 8001cee:	693b      	ldr	r3, [r7, #16]
 8001cf0:	1ad3      	subs	r3, r2, r3
 8001cf2:	2b02      	cmp	r3, #2
 8001cf4:	d901      	bls.n	8001cfa <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001cf6:	2303      	movs	r3, #3
 8001cf8:	e17a      	b.n	8001ff0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cfa:	4b1d      	ldr	r3, [pc, #116]	; (8001d70 <HAL_RCC_OscConfig+0x26c>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f003 0302 	and.w	r3, r3, #2
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d1f0      	bne.n	8001ce8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f003 0308 	and.w	r3, r3, #8
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d03a      	beq.n	8001d88 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	699b      	ldr	r3, [r3, #24]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d019      	beq.n	8001d4e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d1a:	4b17      	ldr	r3, [pc, #92]	; (8001d78 <HAL_RCC_OscConfig+0x274>)
 8001d1c:	2201      	movs	r2, #1
 8001d1e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d20:	f7ff fc44 	bl	80015ac <HAL_GetTick>
 8001d24:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d26:	e008      	b.n	8001d3a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d28:	f7ff fc40 	bl	80015ac <HAL_GetTick>
 8001d2c:	4602      	mov	r2, r0
 8001d2e:	693b      	ldr	r3, [r7, #16]
 8001d30:	1ad3      	subs	r3, r2, r3
 8001d32:	2b02      	cmp	r3, #2
 8001d34:	d901      	bls.n	8001d3a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001d36:	2303      	movs	r3, #3
 8001d38:	e15a      	b.n	8001ff0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d3a:	4b0d      	ldr	r3, [pc, #52]	; (8001d70 <HAL_RCC_OscConfig+0x26c>)
 8001d3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d3e:	f003 0302 	and.w	r3, r3, #2
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d0f0      	beq.n	8001d28 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001d46:	2001      	movs	r0, #1
 8001d48:	f000 fae8 	bl	800231c <RCC_Delay>
 8001d4c:	e01c      	b.n	8001d88 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d4e:	4b0a      	ldr	r3, [pc, #40]	; (8001d78 <HAL_RCC_OscConfig+0x274>)
 8001d50:	2200      	movs	r2, #0
 8001d52:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d54:	f7ff fc2a 	bl	80015ac <HAL_GetTick>
 8001d58:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d5a:	e00f      	b.n	8001d7c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d5c:	f7ff fc26 	bl	80015ac <HAL_GetTick>
 8001d60:	4602      	mov	r2, r0
 8001d62:	693b      	ldr	r3, [r7, #16]
 8001d64:	1ad3      	subs	r3, r2, r3
 8001d66:	2b02      	cmp	r3, #2
 8001d68:	d908      	bls.n	8001d7c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001d6a:	2303      	movs	r3, #3
 8001d6c:	e140      	b.n	8001ff0 <HAL_RCC_OscConfig+0x4ec>
 8001d6e:	bf00      	nop
 8001d70:	40021000 	.word	0x40021000
 8001d74:	42420000 	.word	0x42420000
 8001d78:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d7c:	4b9e      	ldr	r3, [pc, #632]	; (8001ff8 <HAL_RCC_OscConfig+0x4f4>)
 8001d7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d80:	f003 0302 	and.w	r3, r3, #2
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d1e9      	bne.n	8001d5c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f003 0304 	and.w	r3, r3, #4
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	f000 80a6 	beq.w	8001ee2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d96:	2300      	movs	r3, #0
 8001d98:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d9a:	4b97      	ldr	r3, [pc, #604]	; (8001ff8 <HAL_RCC_OscConfig+0x4f4>)
 8001d9c:	69db      	ldr	r3, [r3, #28]
 8001d9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d10d      	bne.n	8001dc2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001da6:	4b94      	ldr	r3, [pc, #592]	; (8001ff8 <HAL_RCC_OscConfig+0x4f4>)
 8001da8:	69db      	ldr	r3, [r3, #28]
 8001daa:	4a93      	ldr	r2, [pc, #588]	; (8001ff8 <HAL_RCC_OscConfig+0x4f4>)
 8001dac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001db0:	61d3      	str	r3, [r2, #28]
 8001db2:	4b91      	ldr	r3, [pc, #580]	; (8001ff8 <HAL_RCC_OscConfig+0x4f4>)
 8001db4:	69db      	ldr	r3, [r3, #28]
 8001db6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dba:	60bb      	str	r3, [r7, #8]
 8001dbc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dc2:	4b8e      	ldr	r3, [pc, #568]	; (8001ffc <HAL_RCC_OscConfig+0x4f8>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d118      	bne.n	8001e00 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001dce:	4b8b      	ldr	r3, [pc, #556]	; (8001ffc <HAL_RCC_OscConfig+0x4f8>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	4a8a      	ldr	r2, [pc, #552]	; (8001ffc <HAL_RCC_OscConfig+0x4f8>)
 8001dd4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dd8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001dda:	f7ff fbe7 	bl	80015ac <HAL_GetTick>
 8001dde:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001de0:	e008      	b.n	8001df4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001de2:	f7ff fbe3 	bl	80015ac <HAL_GetTick>
 8001de6:	4602      	mov	r2, r0
 8001de8:	693b      	ldr	r3, [r7, #16]
 8001dea:	1ad3      	subs	r3, r2, r3
 8001dec:	2b64      	cmp	r3, #100	; 0x64
 8001dee:	d901      	bls.n	8001df4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001df0:	2303      	movs	r3, #3
 8001df2:	e0fd      	b.n	8001ff0 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001df4:	4b81      	ldr	r3, [pc, #516]	; (8001ffc <HAL_RCC_OscConfig+0x4f8>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d0f0      	beq.n	8001de2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	68db      	ldr	r3, [r3, #12]
 8001e04:	2b01      	cmp	r3, #1
 8001e06:	d106      	bne.n	8001e16 <HAL_RCC_OscConfig+0x312>
 8001e08:	4b7b      	ldr	r3, [pc, #492]	; (8001ff8 <HAL_RCC_OscConfig+0x4f4>)
 8001e0a:	6a1b      	ldr	r3, [r3, #32]
 8001e0c:	4a7a      	ldr	r2, [pc, #488]	; (8001ff8 <HAL_RCC_OscConfig+0x4f4>)
 8001e0e:	f043 0301 	orr.w	r3, r3, #1
 8001e12:	6213      	str	r3, [r2, #32]
 8001e14:	e02d      	b.n	8001e72 <HAL_RCC_OscConfig+0x36e>
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	68db      	ldr	r3, [r3, #12]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d10c      	bne.n	8001e38 <HAL_RCC_OscConfig+0x334>
 8001e1e:	4b76      	ldr	r3, [pc, #472]	; (8001ff8 <HAL_RCC_OscConfig+0x4f4>)
 8001e20:	6a1b      	ldr	r3, [r3, #32]
 8001e22:	4a75      	ldr	r2, [pc, #468]	; (8001ff8 <HAL_RCC_OscConfig+0x4f4>)
 8001e24:	f023 0301 	bic.w	r3, r3, #1
 8001e28:	6213      	str	r3, [r2, #32]
 8001e2a:	4b73      	ldr	r3, [pc, #460]	; (8001ff8 <HAL_RCC_OscConfig+0x4f4>)
 8001e2c:	6a1b      	ldr	r3, [r3, #32]
 8001e2e:	4a72      	ldr	r2, [pc, #456]	; (8001ff8 <HAL_RCC_OscConfig+0x4f4>)
 8001e30:	f023 0304 	bic.w	r3, r3, #4
 8001e34:	6213      	str	r3, [r2, #32]
 8001e36:	e01c      	b.n	8001e72 <HAL_RCC_OscConfig+0x36e>
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	68db      	ldr	r3, [r3, #12]
 8001e3c:	2b05      	cmp	r3, #5
 8001e3e:	d10c      	bne.n	8001e5a <HAL_RCC_OscConfig+0x356>
 8001e40:	4b6d      	ldr	r3, [pc, #436]	; (8001ff8 <HAL_RCC_OscConfig+0x4f4>)
 8001e42:	6a1b      	ldr	r3, [r3, #32]
 8001e44:	4a6c      	ldr	r2, [pc, #432]	; (8001ff8 <HAL_RCC_OscConfig+0x4f4>)
 8001e46:	f043 0304 	orr.w	r3, r3, #4
 8001e4a:	6213      	str	r3, [r2, #32]
 8001e4c:	4b6a      	ldr	r3, [pc, #424]	; (8001ff8 <HAL_RCC_OscConfig+0x4f4>)
 8001e4e:	6a1b      	ldr	r3, [r3, #32]
 8001e50:	4a69      	ldr	r2, [pc, #420]	; (8001ff8 <HAL_RCC_OscConfig+0x4f4>)
 8001e52:	f043 0301 	orr.w	r3, r3, #1
 8001e56:	6213      	str	r3, [r2, #32]
 8001e58:	e00b      	b.n	8001e72 <HAL_RCC_OscConfig+0x36e>
 8001e5a:	4b67      	ldr	r3, [pc, #412]	; (8001ff8 <HAL_RCC_OscConfig+0x4f4>)
 8001e5c:	6a1b      	ldr	r3, [r3, #32]
 8001e5e:	4a66      	ldr	r2, [pc, #408]	; (8001ff8 <HAL_RCC_OscConfig+0x4f4>)
 8001e60:	f023 0301 	bic.w	r3, r3, #1
 8001e64:	6213      	str	r3, [r2, #32]
 8001e66:	4b64      	ldr	r3, [pc, #400]	; (8001ff8 <HAL_RCC_OscConfig+0x4f4>)
 8001e68:	6a1b      	ldr	r3, [r3, #32]
 8001e6a:	4a63      	ldr	r2, [pc, #396]	; (8001ff8 <HAL_RCC_OscConfig+0x4f4>)
 8001e6c:	f023 0304 	bic.w	r3, r3, #4
 8001e70:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	68db      	ldr	r3, [r3, #12]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d015      	beq.n	8001ea6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e7a:	f7ff fb97 	bl	80015ac <HAL_GetTick>
 8001e7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e80:	e00a      	b.n	8001e98 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e82:	f7ff fb93 	bl	80015ac <HAL_GetTick>
 8001e86:	4602      	mov	r2, r0
 8001e88:	693b      	ldr	r3, [r7, #16]
 8001e8a:	1ad3      	subs	r3, r2, r3
 8001e8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e90:	4293      	cmp	r3, r2
 8001e92:	d901      	bls.n	8001e98 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001e94:	2303      	movs	r3, #3
 8001e96:	e0ab      	b.n	8001ff0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e98:	4b57      	ldr	r3, [pc, #348]	; (8001ff8 <HAL_RCC_OscConfig+0x4f4>)
 8001e9a:	6a1b      	ldr	r3, [r3, #32]
 8001e9c:	f003 0302 	and.w	r3, r3, #2
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d0ee      	beq.n	8001e82 <HAL_RCC_OscConfig+0x37e>
 8001ea4:	e014      	b.n	8001ed0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ea6:	f7ff fb81 	bl	80015ac <HAL_GetTick>
 8001eaa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001eac:	e00a      	b.n	8001ec4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001eae:	f7ff fb7d 	bl	80015ac <HAL_GetTick>
 8001eb2:	4602      	mov	r2, r0
 8001eb4:	693b      	ldr	r3, [r7, #16]
 8001eb6:	1ad3      	subs	r3, r2, r3
 8001eb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ebc:	4293      	cmp	r3, r2
 8001ebe:	d901      	bls.n	8001ec4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001ec0:	2303      	movs	r3, #3
 8001ec2:	e095      	b.n	8001ff0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ec4:	4b4c      	ldr	r3, [pc, #304]	; (8001ff8 <HAL_RCC_OscConfig+0x4f4>)
 8001ec6:	6a1b      	ldr	r3, [r3, #32]
 8001ec8:	f003 0302 	and.w	r3, r3, #2
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d1ee      	bne.n	8001eae <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001ed0:	7dfb      	ldrb	r3, [r7, #23]
 8001ed2:	2b01      	cmp	r3, #1
 8001ed4:	d105      	bne.n	8001ee2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ed6:	4b48      	ldr	r3, [pc, #288]	; (8001ff8 <HAL_RCC_OscConfig+0x4f4>)
 8001ed8:	69db      	ldr	r3, [r3, #28]
 8001eda:	4a47      	ldr	r2, [pc, #284]	; (8001ff8 <HAL_RCC_OscConfig+0x4f4>)
 8001edc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ee0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	69db      	ldr	r3, [r3, #28]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	f000 8081 	beq.w	8001fee <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001eec:	4b42      	ldr	r3, [pc, #264]	; (8001ff8 <HAL_RCC_OscConfig+0x4f4>)
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	f003 030c 	and.w	r3, r3, #12
 8001ef4:	2b08      	cmp	r3, #8
 8001ef6:	d061      	beq.n	8001fbc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	69db      	ldr	r3, [r3, #28]
 8001efc:	2b02      	cmp	r3, #2
 8001efe:	d146      	bne.n	8001f8e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f00:	4b3f      	ldr	r3, [pc, #252]	; (8002000 <HAL_RCC_OscConfig+0x4fc>)
 8001f02:	2200      	movs	r2, #0
 8001f04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f06:	f7ff fb51 	bl	80015ac <HAL_GetTick>
 8001f0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f0c:	e008      	b.n	8001f20 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f0e:	f7ff fb4d 	bl	80015ac <HAL_GetTick>
 8001f12:	4602      	mov	r2, r0
 8001f14:	693b      	ldr	r3, [r7, #16]
 8001f16:	1ad3      	subs	r3, r2, r3
 8001f18:	2b02      	cmp	r3, #2
 8001f1a:	d901      	bls.n	8001f20 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001f1c:	2303      	movs	r3, #3
 8001f1e:	e067      	b.n	8001ff0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f20:	4b35      	ldr	r3, [pc, #212]	; (8001ff8 <HAL_RCC_OscConfig+0x4f4>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d1f0      	bne.n	8001f0e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6a1b      	ldr	r3, [r3, #32]
 8001f30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f34:	d108      	bne.n	8001f48 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001f36:	4b30      	ldr	r3, [pc, #192]	; (8001ff8 <HAL_RCC_OscConfig+0x4f4>)
 8001f38:	685b      	ldr	r3, [r3, #4]
 8001f3a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	689b      	ldr	r3, [r3, #8]
 8001f42:	492d      	ldr	r1, [pc, #180]	; (8001ff8 <HAL_RCC_OscConfig+0x4f4>)
 8001f44:	4313      	orrs	r3, r2
 8001f46:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f48:	4b2b      	ldr	r3, [pc, #172]	; (8001ff8 <HAL_RCC_OscConfig+0x4f4>)
 8001f4a:	685b      	ldr	r3, [r3, #4]
 8001f4c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6a19      	ldr	r1, [r3, #32]
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f58:	430b      	orrs	r3, r1
 8001f5a:	4927      	ldr	r1, [pc, #156]	; (8001ff8 <HAL_RCC_OscConfig+0x4f4>)
 8001f5c:	4313      	orrs	r3, r2
 8001f5e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f60:	4b27      	ldr	r3, [pc, #156]	; (8002000 <HAL_RCC_OscConfig+0x4fc>)
 8001f62:	2201      	movs	r2, #1
 8001f64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f66:	f7ff fb21 	bl	80015ac <HAL_GetTick>
 8001f6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f6c:	e008      	b.n	8001f80 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f6e:	f7ff fb1d 	bl	80015ac <HAL_GetTick>
 8001f72:	4602      	mov	r2, r0
 8001f74:	693b      	ldr	r3, [r7, #16]
 8001f76:	1ad3      	subs	r3, r2, r3
 8001f78:	2b02      	cmp	r3, #2
 8001f7a:	d901      	bls.n	8001f80 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001f7c:	2303      	movs	r3, #3
 8001f7e:	e037      	b.n	8001ff0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f80:	4b1d      	ldr	r3, [pc, #116]	; (8001ff8 <HAL_RCC_OscConfig+0x4f4>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d0f0      	beq.n	8001f6e <HAL_RCC_OscConfig+0x46a>
 8001f8c:	e02f      	b.n	8001fee <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f8e:	4b1c      	ldr	r3, [pc, #112]	; (8002000 <HAL_RCC_OscConfig+0x4fc>)
 8001f90:	2200      	movs	r2, #0
 8001f92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f94:	f7ff fb0a 	bl	80015ac <HAL_GetTick>
 8001f98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f9a:	e008      	b.n	8001fae <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f9c:	f7ff fb06 	bl	80015ac <HAL_GetTick>
 8001fa0:	4602      	mov	r2, r0
 8001fa2:	693b      	ldr	r3, [r7, #16]
 8001fa4:	1ad3      	subs	r3, r2, r3
 8001fa6:	2b02      	cmp	r3, #2
 8001fa8:	d901      	bls.n	8001fae <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001faa:	2303      	movs	r3, #3
 8001fac:	e020      	b.n	8001ff0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fae:	4b12      	ldr	r3, [pc, #72]	; (8001ff8 <HAL_RCC_OscConfig+0x4f4>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d1f0      	bne.n	8001f9c <HAL_RCC_OscConfig+0x498>
 8001fba:	e018      	b.n	8001fee <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	69db      	ldr	r3, [r3, #28]
 8001fc0:	2b01      	cmp	r3, #1
 8001fc2:	d101      	bne.n	8001fc8 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	e013      	b.n	8001ff0 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001fc8:	4b0b      	ldr	r3, [pc, #44]	; (8001ff8 <HAL_RCC_OscConfig+0x4f4>)
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6a1b      	ldr	r3, [r3, #32]
 8001fd8:	429a      	cmp	r2, r3
 8001fda:	d106      	bne.n	8001fea <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fe6:	429a      	cmp	r2, r3
 8001fe8:	d001      	beq.n	8001fee <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001fea:	2301      	movs	r3, #1
 8001fec:	e000      	b.n	8001ff0 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001fee:	2300      	movs	r3, #0
}
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	3718      	adds	r7, #24
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bd80      	pop	{r7, pc}
 8001ff8:	40021000 	.word	0x40021000
 8001ffc:	40007000 	.word	0x40007000
 8002000:	42420060 	.word	0x42420060

08002004 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b084      	sub	sp, #16
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
 800200c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	2b00      	cmp	r3, #0
 8002012:	d101      	bne.n	8002018 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002014:	2301      	movs	r3, #1
 8002016:	e0d0      	b.n	80021ba <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002018:	4b6a      	ldr	r3, [pc, #424]	; (80021c4 <HAL_RCC_ClockConfig+0x1c0>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f003 0307 	and.w	r3, r3, #7
 8002020:	683a      	ldr	r2, [r7, #0]
 8002022:	429a      	cmp	r2, r3
 8002024:	d910      	bls.n	8002048 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002026:	4b67      	ldr	r3, [pc, #412]	; (80021c4 <HAL_RCC_ClockConfig+0x1c0>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f023 0207 	bic.w	r2, r3, #7
 800202e:	4965      	ldr	r1, [pc, #404]	; (80021c4 <HAL_RCC_ClockConfig+0x1c0>)
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	4313      	orrs	r3, r2
 8002034:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002036:	4b63      	ldr	r3, [pc, #396]	; (80021c4 <HAL_RCC_ClockConfig+0x1c0>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f003 0307 	and.w	r3, r3, #7
 800203e:	683a      	ldr	r2, [r7, #0]
 8002040:	429a      	cmp	r2, r3
 8002042:	d001      	beq.n	8002048 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002044:	2301      	movs	r3, #1
 8002046:	e0b8      	b.n	80021ba <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f003 0302 	and.w	r3, r3, #2
 8002050:	2b00      	cmp	r3, #0
 8002052:	d020      	beq.n	8002096 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f003 0304 	and.w	r3, r3, #4
 800205c:	2b00      	cmp	r3, #0
 800205e:	d005      	beq.n	800206c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002060:	4b59      	ldr	r3, [pc, #356]	; (80021c8 <HAL_RCC_ClockConfig+0x1c4>)
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	4a58      	ldr	r2, [pc, #352]	; (80021c8 <HAL_RCC_ClockConfig+0x1c4>)
 8002066:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800206a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f003 0308 	and.w	r3, r3, #8
 8002074:	2b00      	cmp	r3, #0
 8002076:	d005      	beq.n	8002084 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002078:	4b53      	ldr	r3, [pc, #332]	; (80021c8 <HAL_RCC_ClockConfig+0x1c4>)
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	4a52      	ldr	r2, [pc, #328]	; (80021c8 <HAL_RCC_ClockConfig+0x1c4>)
 800207e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002082:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002084:	4b50      	ldr	r3, [pc, #320]	; (80021c8 <HAL_RCC_ClockConfig+0x1c4>)
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	689b      	ldr	r3, [r3, #8]
 8002090:	494d      	ldr	r1, [pc, #308]	; (80021c8 <HAL_RCC_ClockConfig+0x1c4>)
 8002092:	4313      	orrs	r3, r2
 8002094:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f003 0301 	and.w	r3, r3, #1
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d040      	beq.n	8002124 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	685b      	ldr	r3, [r3, #4]
 80020a6:	2b01      	cmp	r3, #1
 80020a8:	d107      	bne.n	80020ba <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020aa:	4b47      	ldr	r3, [pc, #284]	; (80021c8 <HAL_RCC_ClockConfig+0x1c4>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d115      	bne.n	80020e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020b6:	2301      	movs	r3, #1
 80020b8:	e07f      	b.n	80021ba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	685b      	ldr	r3, [r3, #4]
 80020be:	2b02      	cmp	r3, #2
 80020c0:	d107      	bne.n	80020d2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020c2:	4b41      	ldr	r3, [pc, #260]	; (80021c8 <HAL_RCC_ClockConfig+0x1c4>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d109      	bne.n	80020e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020ce:	2301      	movs	r3, #1
 80020d0:	e073      	b.n	80021ba <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020d2:	4b3d      	ldr	r3, [pc, #244]	; (80021c8 <HAL_RCC_ClockConfig+0x1c4>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f003 0302 	and.w	r3, r3, #2
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d101      	bne.n	80020e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020de:	2301      	movs	r3, #1
 80020e0:	e06b      	b.n	80021ba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80020e2:	4b39      	ldr	r3, [pc, #228]	; (80021c8 <HAL_RCC_ClockConfig+0x1c4>)
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	f023 0203 	bic.w	r2, r3, #3
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	4936      	ldr	r1, [pc, #216]	; (80021c8 <HAL_RCC_ClockConfig+0x1c4>)
 80020f0:	4313      	orrs	r3, r2
 80020f2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80020f4:	f7ff fa5a 	bl	80015ac <HAL_GetTick>
 80020f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020fa:	e00a      	b.n	8002112 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020fc:	f7ff fa56 	bl	80015ac <HAL_GetTick>
 8002100:	4602      	mov	r2, r0
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	1ad3      	subs	r3, r2, r3
 8002106:	f241 3288 	movw	r2, #5000	; 0x1388
 800210a:	4293      	cmp	r3, r2
 800210c:	d901      	bls.n	8002112 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800210e:	2303      	movs	r3, #3
 8002110:	e053      	b.n	80021ba <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002112:	4b2d      	ldr	r3, [pc, #180]	; (80021c8 <HAL_RCC_ClockConfig+0x1c4>)
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	f003 020c 	and.w	r2, r3, #12
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	685b      	ldr	r3, [r3, #4]
 800211e:	009b      	lsls	r3, r3, #2
 8002120:	429a      	cmp	r2, r3
 8002122:	d1eb      	bne.n	80020fc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002124:	4b27      	ldr	r3, [pc, #156]	; (80021c4 <HAL_RCC_ClockConfig+0x1c0>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f003 0307 	and.w	r3, r3, #7
 800212c:	683a      	ldr	r2, [r7, #0]
 800212e:	429a      	cmp	r2, r3
 8002130:	d210      	bcs.n	8002154 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002132:	4b24      	ldr	r3, [pc, #144]	; (80021c4 <HAL_RCC_ClockConfig+0x1c0>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f023 0207 	bic.w	r2, r3, #7
 800213a:	4922      	ldr	r1, [pc, #136]	; (80021c4 <HAL_RCC_ClockConfig+0x1c0>)
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	4313      	orrs	r3, r2
 8002140:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002142:	4b20      	ldr	r3, [pc, #128]	; (80021c4 <HAL_RCC_ClockConfig+0x1c0>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f003 0307 	and.w	r3, r3, #7
 800214a:	683a      	ldr	r2, [r7, #0]
 800214c:	429a      	cmp	r2, r3
 800214e:	d001      	beq.n	8002154 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002150:	2301      	movs	r3, #1
 8002152:	e032      	b.n	80021ba <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f003 0304 	and.w	r3, r3, #4
 800215c:	2b00      	cmp	r3, #0
 800215e:	d008      	beq.n	8002172 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002160:	4b19      	ldr	r3, [pc, #100]	; (80021c8 <HAL_RCC_ClockConfig+0x1c4>)
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	68db      	ldr	r3, [r3, #12]
 800216c:	4916      	ldr	r1, [pc, #88]	; (80021c8 <HAL_RCC_ClockConfig+0x1c4>)
 800216e:	4313      	orrs	r3, r2
 8002170:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f003 0308 	and.w	r3, r3, #8
 800217a:	2b00      	cmp	r3, #0
 800217c:	d009      	beq.n	8002192 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800217e:	4b12      	ldr	r3, [pc, #72]	; (80021c8 <HAL_RCC_ClockConfig+0x1c4>)
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	691b      	ldr	r3, [r3, #16]
 800218a:	00db      	lsls	r3, r3, #3
 800218c:	490e      	ldr	r1, [pc, #56]	; (80021c8 <HAL_RCC_ClockConfig+0x1c4>)
 800218e:	4313      	orrs	r3, r2
 8002190:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002192:	f000 f821 	bl	80021d8 <HAL_RCC_GetSysClockFreq>
 8002196:	4602      	mov	r2, r0
 8002198:	4b0b      	ldr	r3, [pc, #44]	; (80021c8 <HAL_RCC_ClockConfig+0x1c4>)
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	091b      	lsrs	r3, r3, #4
 800219e:	f003 030f 	and.w	r3, r3, #15
 80021a2:	490a      	ldr	r1, [pc, #40]	; (80021cc <HAL_RCC_ClockConfig+0x1c8>)
 80021a4:	5ccb      	ldrb	r3, [r1, r3]
 80021a6:	fa22 f303 	lsr.w	r3, r2, r3
 80021aa:	4a09      	ldr	r2, [pc, #36]	; (80021d0 <HAL_RCC_ClockConfig+0x1cc>)
 80021ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80021ae:	4b09      	ldr	r3, [pc, #36]	; (80021d4 <HAL_RCC_ClockConfig+0x1d0>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	4618      	mov	r0, r3
 80021b4:	f7ff f926 	bl	8001404 <HAL_InitTick>

  return HAL_OK;
 80021b8:	2300      	movs	r3, #0
}
 80021ba:	4618      	mov	r0, r3
 80021bc:	3710      	adds	r7, #16
 80021be:	46bd      	mov	sp, r7
 80021c0:	bd80      	pop	{r7, pc}
 80021c2:	bf00      	nop
 80021c4:	40022000 	.word	0x40022000
 80021c8:	40021000 	.word	0x40021000
 80021cc:	08002b98 	.word	0x08002b98
 80021d0:	20000054 	.word	0x20000054
 80021d4:	20000058 	.word	0x20000058

080021d8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021d8:	b480      	push	{r7}
 80021da:	b087      	sub	sp, #28
 80021dc:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80021de:	2300      	movs	r3, #0
 80021e0:	60fb      	str	r3, [r7, #12]
 80021e2:	2300      	movs	r3, #0
 80021e4:	60bb      	str	r3, [r7, #8]
 80021e6:	2300      	movs	r3, #0
 80021e8:	617b      	str	r3, [r7, #20]
 80021ea:	2300      	movs	r3, #0
 80021ec:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80021ee:	2300      	movs	r3, #0
 80021f0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80021f2:	4b1e      	ldr	r3, [pc, #120]	; (800226c <HAL_RCC_GetSysClockFreq+0x94>)
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	f003 030c 	and.w	r3, r3, #12
 80021fe:	2b04      	cmp	r3, #4
 8002200:	d002      	beq.n	8002208 <HAL_RCC_GetSysClockFreq+0x30>
 8002202:	2b08      	cmp	r3, #8
 8002204:	d003      	beq.n	800220e <HAL_RCC_GetSysClockFreq+0x36>
 8002206:	e027      	b.n	8002258 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002208:	4b19      	ldr	r3, [pc, #100]	; (8002270 <HAL_RCC_GetSysClockFreq+0x98>)
 800220a:	613b      	str	r3, [r7, #16]
      break;
 800220c:	e027      	b.n	800225e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	0c9b      	lsrs	r3, r3, #18
 8002212:	f003 030f 	and.w	r3, r3, #15
 8002216:	4a17      	ldr	r2, [pc, #92]	; (8002274 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002218:	5cd3      	ldrb	r3, [r2, r3]
 800221a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002222:	2b00      	cmp	r3, #0
 8002224:	d010      	beq.n	8002248 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002226:	4b11      	ldr	r3, [pc, #68]	; (800226c <HAL_RCC_GetSysClockFreq+0x94>)
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	0c5b      	lsrs	r3, r3, #17
 800222c:	f003 0301 	and.w	r3, r3, #1
 8002230:	4a11      	ldr	r2, [pc, #68]	; (8002278 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002232:	5cd3      	ldrb	r3, [r2, r3]
 8002234:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	4a0d      	ldr	r2, [pc, #52]	; (8002270 <HAL_RCC_GetSysClockFreq+0x98>)
 800223a:	fb02 f203 	mul.w	r2, r2, r3
 800223e:	68bb      	ldr	r3, [r7, #8]
 8002240:	fbb2 f3f3 	udiv	r3, r2, r3
 8002244:	617b      	str	r3, [r7, #20]
 8002246:	e004      	b.n	8002252 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	4a0c      	ldr	r2, [pc, #48]	; (800227c <HAL_RCC_GetSysClockFreq+0xa4>)
 800224c:	fb02 f303 	mul.w	r3, r2, r3
 8002250:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002252:	697b      	ldr	r3, [r7, #20]
 8002254:	613b      	str	r3, [r7, #16]
      break;
 8002256:	e002      	b.n	800225e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002258:	4b05      	ldr	r3, [pc, #20]	; (8002270 <HAL_RCC_GetSysClockFreq+0x98>)
 800225a:	613b      	str	r3, [r7, #16]
      break;
 800225c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800225e:	693b      	ldr	r3, [r7, #16]
}
 8002260:	4618      	mov	r0, r3
 8002262:	371c      	adds	r7, #28
 8002264:	46bd      	mov	sp, r7
 8002266:	bc80      	pop	{r7}
 8002268:	4770      	bx	lr
 800226a:	bf00      	nop
 800226c:	40021000 	.word	0x40021000
 8002270:	007a1200 	.word	0x007a1200
 8002274:	08002bb0 	.word	0x08002bb0
 8002278:	08002bc0 	.word	0x08002bc0
 800227c:	003d0900 	.word	0x003d0900

08002280 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002280:	b480      	push	{r7}
 8002282:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002284:	4b02      	ldr	r3, [pc, #8]	; (8002290 <HAL_RCC_GetHCLKFreq+0x10>)
 8002286:	681b      	ldr	r3, [r3, #0]
}
 8002288:	4618      	mov	r0, r3
 800228a:	46bd      	mov	sp, r7
 800228c:	bc80      	pop	{r7}
 800228e:	4770      	bx	lr
 8002290:	20000054 	.word	0x20000054

08002294 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002298:	f7ff fff2 	bl	8002280 <HAL_RCC_GetHCLKFreq>
 800229c:	4602      	mov	r2, r0
 800229e:	4b05      	ldr	r3, [pc, #20]	; (80022b4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	0adb      	lsrs	r3, r3, #11
 80022a4:	f003 0307 	and.w	r3, r3, #7
 80022a8:	4903      	ldr	r1, [pc, #12]	; (80022b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80022aa:	5ccb      	ldrb	r3, [r1, r3]
 80022ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80022b0:	4618      	mov	r0, r3
 80022b2:	bd80      	pop	{r7, pc}
 80022b4:	40021000 	.word	0x40021000
 80022b8:	08002ba8 	.word	0x08002ba8

080022bc <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80022bc:	b480      	push	{r7}
 80022be:	b083      	sub	sp, #12
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
 80022c4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	220f      	movs	r2, #15
 80022ca:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80022cc:	4b11      	ldr	r3, [pc, #68]	; (8002314 <HAL_RCC_GetClockConfig+0x58>)
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	f003 0203 	and.w	r2, r3, #3
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80022d8:	4b0e      	ldr	r3, [pc, #56]	; (8002314 <HAL_RCC_GetClockConfig+0x58>)
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80022e4:	4b0b      	ldr	r3, [pc, #44]	; (8002314 <HAL_RCC_GetClockConfig+0x58>)
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80022f0:	4b08      	ldr	r3, [pc, #32]	; (8002314 <HAL_RCC_GetClockConfig+0x58>)
 80022f2:	685b      	ldr	r3, [r3, #4]
 80022f4:	08db      	lsrs	r3, r3, #3
 80022f6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80022fe:	4b06      	ldr	r3, [pc, #24]	; (8002318 <HAL_RCC_GetClockConfig+0x5c>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f003 0207 	and.w	r2, r3, #7
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 800230a:	bf00      	nop
 800230c:	370c      	adds	r7, #12
 800230e:	46bd      	mov	sp, r7
 8002310:	bc80      	pop	{r7}
 8002312:	4770      	bx	lr
 8002314:	40021000 	.word	0x40021000
 8002318:	40022000 	.word	0x40022000

0800231c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800231c:	b480      	push	{r7}
 800231e:	b085      	sub	sp, #20
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002324:	4b0a      	ldr	r3, [pc, #40]	; (8002350 <RCC_Delay+0x34>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	4a0a      	ldr	r2, [pc, #40]	; (8002354 <RCC_Delay+0x38>)
 800232a:	fba2 2303 	umull	r2, r3, r2, r3
 800232e:	0a5b      	lsrs	r3, r3, #9
 8002330:	687a      	ldr	r2, [r7, #4]
 8002332:	fb02 f303 	mul.w	r3, r2, r3
 8002336:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002338:	bf00      	nop
  }
  while (Delay --);
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	1e5a      	subs	r2, r3, #1
 800233e:	60fa      	str	r2, [r7, #12]
 8002340:	2b00      	cmp	r3, #0
 8002342:	d1f9      	bne.n	8002338 <RCC_Delay+0x1c>
}
 8002344:	bf00      	nop
 8002346:	bf00      	nop
 8002348:	3714      	adds	r7, #20
 800234a:	46bd      	mov	sp, r7
 800234c:	bc80      	pop	{r7}
 800234e:	4770      	bx	lr
 8002350:	20000054 	.word	0x20000054
 8002354:	10624dd3 	.word	0x10624dd3

08002358 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b082      	sub	sp, #8
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d101      	bne.n	800236a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002366:	2301      	movs	r3, #1
 8002368:	e041      	b.n	80023ee <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002370:	b2db      	uxtb	r3, r3
 8002372:	2b00      	cmp	r3, #0
 8002374:	d106      	bne.n	8002384 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	2200      	movs	r2, #0
 800237a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800237e:	6878      	ldr	r0, [r7, #4]
 8002380:	f7ff f81c 	bl	80013bc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2202      	movs	r2, #2
 8002388:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681a      	ldr	r2, [r3, #0]
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	3304      	adds	r3, #4
 8002394:	4619      	mov	r1, r3
 8002396:	4610      	mov	r0, r2
 8002398:	f000 fa6e 	bl	8002878 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2201      	movs	r2, #1
 80023a0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2201      	movs	r2, #1
 80023a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2201      	movs	r2, #1
 80023b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2201      	movs	r2, #1
 80023b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2201      	movs	r2, #1
 80023c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2201      	movs	r2, #1
 80023c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2201      	movs	r2, #1
 80023d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2201      	movs	r2, #1
 80023d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2201      	movs	r2, #1
 80023e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2201      	movs	r2, #1
 80023e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80023ec:	2300      	movs	r3, #0
}
 80023ee:	4618      	mov	r0, r3
 80023f0:	3708      	adds	r7, #8
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd80      	pop	{r7, pc}
	...

080023f8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80023f8:	b480      	push	{r7}
 80023fa:	b085      	sub	sp, #20
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002406:	b2db      	uxtb	r3, r3
 8002408:	2b01      	cmp	r3, #1
 800240a:	d001      	beq.n	8002410 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800240c:	2301      	movs	r3, #1
 800240e:	e035      	b.n	800247c <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2202      	movs	r2, #2
 8002414:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	68da      	ldr	r2, [r3, #12]
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f042 0201 	orr.w	r2, r2, #1
 8002426:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	4a16      	ldr	r2, [pc, #88]	; (8002488 <HAL_TIM_Base_Start_IT+0x90>)
 800242e:	4293      	cmp	r3, r2
 8002430:	d009      	beq.n	8002446 <HAL_TIM_Base_Start_IT+0x4e>
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800243a:	d004      	beq.n	8002446 <HAL_TIM_Base_Start_IT+0x4e>
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4a12      	ldr	r2, [pc, #72]	; (800248c <HAL_TIM_Base_Start_IT+0x94>)
 8002442:	4293      	cmp	r3, r2
 8002444:	d111      	bne.n	800246a <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	689b      	ldr	r3, [r3, #8]
 800244c:	f003 0307 	and.w	r3, r3, #7
 8002450:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	2b06      	cmp	r3, #6
 8002456:	d010      	beq.n	800247a <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	681a      	ldr	r2, [r3, #0]
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f042 0201 	orr.w	r2, r2, #1
 8002466:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002468:	e007      	b.n	800247a <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	681a      	ldr	r2, [r3, #0]
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f042 0201 	orr.w	r2, r2, #1
 8002478:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800247a:	2300      	movs	r3, #0
}
 800247c:	4618      	mov	r0, r3
 800247e:	3714      	adds	r7, #20
 8002480:	46bd      	mov	sp, r7
 8002482:	bc80      	pop	{r7}
 8002484:	4770      	bx	lr
 8002486:	bf00      	nop
 8002488:	40012c00 	.word	0x40012c00
 800248c:	40000400 	.word	0x40000400

08002490 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b082      	sub	sp, #8
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	691b      	ldr	r3, [r3, #16]
 800249e:	f003 0302 	and.w	r3, r3, #2
 80024a2:	2b02      	cmp	r3, #2
 80024a4:	d122      	bne.n	80024ec <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	68db      	ldr	r3, [r3, #12]
 80024ac:	f003 0302 	and.w	r3, r3, #2
 80024b0:	2b02      	cmp	r3, #2
 80024b2:	d11b      	bne.n	80024ec <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f06f 0202 	mvn.w	r2, #2
 80024bc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	2201      	movs	r2, #1
 80024c2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	699b      	ldr	r3, [r3, #24]
 80024ca:	f003 0303 	and.w	r3, r3, #3
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d003      	beq.n	80024da <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80024d2:	6878      	ldr	r0, [r7, #4]
 80024d4:	f000 f9b4 	bl	8002840 <HAL_TIM_IC_CaptureCallback>
 80024d8:	e005      	b.n	80024e6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80024da:	6878      	ldr	r0, [r7, #4]
 80024dc:	f000 f9a7 	bl	800282e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024e0:	6878      	ldr	r0, [r7, #4]
 80024e2:	f000 f9b6 	bl	8002852 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	2200      	movs	r2, #0
 80024ea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	691b      	ldr	r3, [r3, #16]
 80024f2:	f003 0304 	and.w	r3, r3, #4
 80024f6:	2b04      	cmp	r3, #4
 80024f8:	d122      	bne.n	8002540 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	68db      	ldr	r3, [r3, #12]
 8002500:	f003 0304 	and.w	r3, r3, #4
 8002504:	2b04      	cmp	r3, #4
 8002506:	d11b      	bne.n	8002540 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f06f 0204 	mvn.w	r2, #4
 8002510:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	2202      	movs	r2, #2
 8002516:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	699b      	ldr	r3, [r3, #24]
 800251e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002522:	2b00      	cmp	r3, #0
 8002524:	d003      	beq.n	800252e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002526:	6878      	ldr	r0, [r7, #4]
 8002528:	f000 f98a 	bl	8002840 <HAL_TIM_IC_CaptureCallback>
 800252c:	e005      	b.n	800253a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800252e:	6878      	ldr	r0, [r7, #4]
 8002530:	f000 f97d 	bl	800282e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002534:	6878      	ldr	r0, [r7, #4]
 8002536:	f000 f98c 	bl	8002852 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	2200      	movs	r2, #0
 800253e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	691b      	ldr	r3, [r3, #16]
 8002546:	f003 0308 	and.w	r3, r3, #8
 800254a:	2b08      	cmp	r3, #8
 800254c:	d122      	bne.n	8002594 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	68db      	ldr	r3, [r3, #12]
 8002554:	f003 0308 	and.w	r3, r3, #8
 8002558:	2b08      	cmp	r3, #8
 800255a:	d11b      	bne.n	8002594 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f06f 0208 	mvn.w	r2, #8
 8002564:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	2204      	movs	r2, #4
 800256a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	69db      	ldr	r3, [r3, #28]
 8002572:	f003 0303 	and.w	r3, r3, #3
 8002576:	2b00      	cmp	r3, #0
 8002578:	d003      	beq.n	8002582 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800257a:	6878      	ldr	r0, [r7, #4]
 800257c:	f000 f960 	bl	8002840 <HAL_TIM_IC_CaptureCallback>
 8002580:	e005      	b.n	800258e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002582:	6878      	ldr	r0, [r7, #4]
 8002584:	f000 f953 	bl	800282e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002588:	6878      	ldr	r0, [r7, #4]
 800258a:	f000 f962 	bl	8002852 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	2200      	movs	r2, #0
 8002592:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	691b      	ldr	r3, [r3, #16]
 800259a:	f003 0310 	and.w	r3, r3, #16
 800259e:	2b10      	cmp	r3, #16
 80025a0:	d122      	bne.n	80025e8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	68db      	ldr	r3, [r3, #12]
 80025a8:	f003 0310 	and.w	r3, r3, #16
 80025ac:	2b10      	cmp	r3, #16
 80025ae:	d11b      	bne.n	80025e8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f06f 0210 	mvn.w	r2, #16
 80025b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2208      	movs	r2, #8
 80025be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	69db      	ldr	r3, [r3, #28]
 80025c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d003      	beq.n	80025d6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80025ce:	6878      	ldr	r0, [r7, #4]
 80025d0:	f000 f936 	bl	8002840 <HAL_TIM_IC_CaptureCallback>
 80025d4:	e005      	b.n	80025e2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80025d6:	6878      	ldr	r0, [r7, #4]
 80025d8:	f000 f929 	bl	800282e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025dc:	6878      	ldr	r0, [r7, #4]
 80025de:	f000 f938 	bl	8002852 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2200      	movs	r2, #0
 80025e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	691b      	ldr	r3, [r3, #16]
 80025ee:	f003 0301 	and.w	r3, r3, #1
 80025f2:	2b01      	cmp	r3, #1
 80025f4:	d10e      	bne.n	8002614 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	68db      	ldr	r3, [r3, #12]
 80025fc:	f003 0301 	and.w	r3, r3, #1
 8002600:	2b01      	cmp	r3, #1
 8002602:	d107      	bne.n	8002614 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f06f 0201 	mvn.w	r2, #1
 800260c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800260e:	6878      	ldr	r0, [r7, #4]
 8002610:	f7fe fe28 	bl	8001264 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	691b      	ldr	r3, [r3, #16]
 800261a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800261e:	2b80      	cmp	r3, #128	; 0x80
 8002620:	d10e      	bne.n	8002640 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	68db      	ldr	r3, [r3, #12]
 8002628:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800262c:	2b80      	cmp	r3, #128	; 0x80
 800262e:	d107      	bne.n	8002640 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002638:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800263a:	6878      	ldr	r0, [r7, #4]
 800263c:	f000 fa6b 	bl	8002b16 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	691b      	ldr	r3, [r3, #16]
 8002646:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800264a:	2b40      	cmp	r3, #64	; 0x40
 800264c:	d10e      	bne.n	800266c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	68db      	ldr	r3, [r3, #12]
 8002654:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002658:	2b40      	cmp	r3, #64	; 0x40
 800265a:	d107      	bne.n	800266c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002664:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002666:	6878      	ldr	r0, [r7, #4]
 8002668:	f000 f8fc 	bl	8002864 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	691b      	ldr	r3, [r3, #16]
 8002672:	f003 0320 	and.w	r3, r3, #32
 8002676:	2b20      	cmp	r3, #32
 8002678:	d10e      	bne.n	8002698 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	68db      	ldr	r3, [r3, #12]
 8002680:	f003 0320 	and.w	r3, r3, #32
 8002684:	2b20      	cmp	r3, #32
 8002686:	d107      	bne.n	8002698 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f06f 0220 	mvn.w	r2, #32
 8002690:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002692:	6878      	ldr	r0, [r7, #4]
 8002694:	f000 fa36 	bl	8002b04 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002698:	bf00      	nop
 800269a:	3708      	adds	r7, #8
 800269c:	46bd      	mov	sp, r7
 800269e:	bd80      	pop	{r7, pc}

080026a0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b084      	sub	sp, #16
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
 80026a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80026aa:	2300      	movs	r3, #0
 80026ac:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026b4:	2b01      	cmp	r3, #1
 80026b6:	d101      	bne.n	80026bc <HAL_TIM_ConfigClockSource+0x1c>
 80026b8:	2302      	movs	r3, #2
 80026ba:	e0b4      	b.n	8002826 <HAL_TIM_ConfigClockSource+0x186>
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2201      	movs	r2, #1
 80026c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2202      	movs	r2, #2
 80026c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	689b      	ldr	r3, [r3, #8]
 80026d2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80026d4:	68bb      	ldr	r3, [r7, #8]
 80026d6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80026da:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80026dc:	68bb      	ldr	r3, [r7, #8]
 80026de:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80026e2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	68ba      	ldr	r2, [r7, #8]
 80026ea:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80026f4:	d03e      	beq.n	8002774 <HAL_TIM_ConfigClockSource+0xd4>
 80026f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80026fa:	f200 8087 	bhi.w	800280c <HAL_TIM_ConfigClockSource+0x16c>
 80026fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002702:	f000 8086 	beq.w	8002812 <HAL_TIM_ConfigClockSource+0x172>
 8002706:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800270a:	d87f      	bhi.n	800280c <HAL_TIM_ConfigClockSource+0x16c>
 800270c:	2b70      	cmp	r3, #112	; 0x70
 800270e:	d01a      	beq.n	8002746 <HAL_TIM_ConfigClockSource+0xa6>
 8002710:	2b70      	cmp	r3, #112	; 0x70
 8002712:	d87b      	bhi.n	800280c <HAL_TIM_ConfigClockSource+0x16c>
 8002714:	2b60      	cmp	r3, #96	; 0x60
 8002716:	d050      	beq.n	80027ba <HAL_TIM_ConfigClockSource+0x11a>
 8002718:	2b60      	cmp	r3, #96	; 0x60
 800271a:	d877      	bhi.n	800280c <HAL_TIM_ConfigClockSource+0x16c>
 800271c:	2b50      	cmp	r3, #80	; 0x50
 800271e:	d03c      	beq.n	800279a <HAL_TIM_ConfigClockSource+0xfa>
 8002720:	2b50      	cmp	r3, #80	; 0x50
 8002722:	d873      	bhi.n	800280c <HAL_TIM_ConfigClockSource+0x16c>
 8002724:	2b40      	cmp	r3, #64	; 0x40
 8002726:	d058      	beq.n	80027da <HAL_TIM_ConfigClockSource+0x13a>
 8002728:	2b40      	cmp	r3, #64	; 0x40
 800272a:	d86f      	bhi.n	800280c <HAL_TIM_ConfigClockSource+0x16c>
 800272c:	2b30      	cmp	r3, #48	; 0x30
 800272e:	d064      	beq.n	80027fa <HAL_TIM_ConfigClockSource+0x15a>
 8002730:	2b30      	cmp	r3, #48	; 0x30
 8002732:	d86b      	bhi.n	800280c <HAL_TIM_ConfigClockSource+0x16c>
 8002734:	2b20      	cmp	r3, #32
 8002736:	d060      	beq.n	80027fa <HAL_TIM_ConfigClockSource+0x15a>
 8002738:	2b20      	cmp	r3, #32
 800273a:	d867      	bhi.n	800280c <HAL_TIM_ConfigClockSource+0x16c>
 800273c:	2b00      	cmp	r3, #0
 800273e:	d05c      	beq.n	80027fa <HAL_TIM_ConfigClockSource+0x15a>
 8002740:	2b10      	cmp	r3, #16
 8002742:	d05a      	beq.n	80027fa <HAL_TIM_ConfigClockSource+0x15a>
 8002744:	e062      	b.n	800280c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6818      	ldr	r0, [r3, #0]
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	6899      	ldr	r1, [r3, #8]
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	685a      	ldr	r2, [r3, #4]
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	68db      	ldr	r3, [r3, #12]
 8002756:	f000 f95e 	bl	8002a16 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	689b      	ldr	r3, [r3, #8]
 8002760:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002762:	68bb      	ldr	r3, [r7, #8]
 8002764:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002768:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	68ba      	ldr	r2, [r7, #8]
 8002770:	609a      	str	r2, [r3, #8]
      break;
 8002772:	e04f      	b.n	8002814 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6818      	ldr	r0, [r3, #0]
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	6899      	ldr	r1, [r3, #8]
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	685a      	ldr	r2, [r3, #4]
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	68db      	ldr	r3, [r3, #12]
 8002784:	f000 f947 	bl	8002a16 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	689a      	ldr	r2, [r3, #8]
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002796:	609a      	str	r2, [r3, #8]
      break;
 8002798:	e03c      	b.n	8002814 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6818      	ldr	r0, [r3, #0]
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	6859      	ldr	r1, [r3, #4]
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	68db      	ldr	r3, [r3, #12]
 80027a6:	461a      	mov	r2, r3
 80027a8:	f000 f8be 	bl	8002928 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	2150      	movs	r1, #80	; 0x50
 80027b2:	4618      	mov	r0, r3
 80027b4:	f000 f915 	bl	80029e2 <TIM_ITRx_SetConfig>
      break;
 80027b8:	e02c      	b.n	8002814 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6818      	ldr	r0, [r3, #0]
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	6859      	ldr	r1, [r3, #4]
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	68db      	ldr	r3, [r3, #12]
 80027c6:	461a      	mov	r2, r3
 80027c8:	f000 f8dc 	bl	8002984 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	2160      	movs	r1, #96	; 0x60
 80027d2:	4618      	mov	r0, r3
 80027d4:	f000 f905 	bl	80029e2 <TIM_ITRx_SetConfig>
      break;
 80027d8:	e01c      	b.n	8002814 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6818      	ldr	r0, [r3, #0]
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	6859      	ldr	r1, [r3, #4]
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	68db      	ldr	r3, [r3, #12]
 80027e6:	461a      	mov	r2, r3
 80027e8:	f000 f89e 	bl	8002928 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	2140      	movs	r1, #64	; 0x40
 80027f2:	4618      	mov	r0, r3
 80027f4:	f000 f8f5 	bl	80029e2 <TIM_ITRx_SetConfig>
      break;
 80027f8:	e00c      	b.n	8002814 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681a      	ldr	r2, [r3, #0]
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4619      	mov	r1, r3
 8002804:	4610      	mov	r0, r2
 8002806:	f000 f8ec 	bl	80029e2 <TIM_ITRx_SetConfig>
      break;
 800280a:	e003      	b.n	8002814 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800280c:	2301      	movs	r3, #1
 800280e:	73fb      	strb	r3, [r7, #15]
      break;
 8002810:	e000      	b.n	8002814 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002812:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2201      	movs	r2, #1
 8002818:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2200      	movs	r2, #0
 8002820:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002824:	7bfb      	ldrb	r3, [r7, #15]
}
 8002826:	4618      	mov	r0, r3
 8002828:	3710      	adds	r7, #16
 800282a:	46bd      	mov	sp, r7
 800282c:	bd80      	pop	{r7, pc}

0800282e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800282e:	b480      	push	{r7}
 8002830:	b083      	sub	sp, #12
 8002832:	af00      	add	r7, sp, #0
 8002834:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002836:	bf00      	nop
 8002838:	370c      	adds	r7, #12
 800283a:	46bd      	mov	sp, r7
 800283c:	bc80      	pop	{r7}
 800283e:	4770      	bx	lr

08002840 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002840:	b480      	push	{r7}
 8002842:	b083      	sub	sp, #12
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002848:	bf00      	nop
 800284a:	370c      	adds	r7, #12
 800284c:	46bd      	mov	sp, r7
 800284e:	bc80      	pop	{r7}
 8002850:	4770      	bx	lr

08002852 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002852:	b480      	push	{r7}
 8002854:	b083      	sub	sp, #12
 8002856:	af00      	add	r7, sp, #0
 8002858:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800285a:	bf00      	nop
 800285c:	370c      	adds	r7, #12
 800285e:	46bd      	mov	sp, r7
 8002860:	bc80      	pop	{r7}
 8002862:	4770      	bx	lr

08002864 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002864:	b480      	push	{r7}
 8002866:	b083      	sub	sp, #12
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800286c:	bf00      	nop
 800286e:	370c      	adds	r7, #12
 8002870:	46bd      	mov	sp, r7
 8002872:	bc80      	pop	{r7}
 8002874:	4770      	bx	lr
	...

08002878 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002878:	b480      	push	{r7}
 800287a:	b085      	sub	sp, #20
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
 8002880:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	4a25      	ldr	r2, [pc, #148]	; (8002920 <TIM_Base_SetConfig+0xa8>)
 800288c:	4293      	cmp	r3, r2
 800288e:	d007      	beq.n	80028a0 <TIM_Base_SetConfig+0x28>
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002896:	d003      	beq.n	80028a0 <TIM_Base_SetConfig+0x28>
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	4a22      	ldr	r2, [pc, #136]	; (8002924 <TIM_Base_SetConfig+0xac>)
 800289c:	4293      	cmp	r3, r2
 800289e:	d108      	bne.n	80028b2 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	68fa      	ldr	r2, [r7, #12]
 80028ae:	4313      	orrs	r3, r2
 80028b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	4a1a      	ldr	r2, [pc, #104]	; (8002920 <TIM_Base_SetConfig+0xa8>)
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d007      	beq.n	80028ca <TIM_Base_SetConfig+0x52>
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028c0:	d003      	beq.n	80028ca <TIM_Base_SetConfig+0x52>
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	4a17      	ldr	r2, [pc, #92]	; (8002924 <TIM_Base_SetConfig+0xac>)
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d108      	bne.n	80028dc <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80028d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	68db      	ldr	r3, [r3, #12]
 80028d6:	68fa      	ldr	r2, [r7, #12]
 80028d8:	4313      	orrs	r3, r2
 80028da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	695b      	ldr	r3, [r3, #20]
 80028e6:	4313      	orrs	r3, r2
 80028e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	68fa      	ldr	r2, [r7, #12]
 80028ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	689a      	ldr	r2, [r3, #8]
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	681a      	ldr	r2, [r3, #0]
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	4a07      	ldr	r2, [pc, #28]	; (8002920 <TIM_Base_SetConfig+0xa8>)
 8002904:	4293      	cmp	r3, r2
 8002906:	d103      	bne.n	8002910 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	691a      	ldr	r2, [r3, #16]
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2201      	movs	r2, #1
 8002914:	615a      	str	r2, [r3, #20]
}
 8002916:	bf00      	nop
 8002918:	3714      	adds	r7, #20
 800291a:	46bd      	mov	sp, r7
 800291c:	bc80      	pop	{r7}
 800291e:	4770      	bx	lr
 8002920:	40012c00 	.word	0x40012c00
 8002924:	40000400 	.word	0x40000400

08002928 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002928:	b480      	push	{r7}
 800292a:	b087      	sub	sp, #28
 800292c:	af00      	add	r7, sp, #0
 800292e:	60f8      	str	r0, [r7, #12]
 8002930:	60b9      	str	r1, [r7, #8]
 8002932:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	6a1b      	ldr	r3, [r3, #32]
 8002938:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	6a1b      	ldr	r3, [r3, #32]
 800293e:	f023 0201 	bic.w	r2, r3, #1
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	699b      	ldr	r3, [r3, #24]
 800294a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800294c:	693b      	ldr	r3, [r7, #16]
 800294e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002952:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	011b      	lsls	r3, r3, #4
 8002958:	693a      	ldr	r2, [r7, #16]
 800295a:	4313      	orrs	r3, r2
 800295c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800295e:	697b      	ldr	r3, [r7, #20]
 8002960:	f023 030a 	bic.w	r3, r3, #10
 8002964:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002966:	697a      	ldr	r2, [r7, #20]
 8002968:	68bb      	ldr	r3, [r7, #8]
 800296a:	4313      	orrs	r3, r2
 800296c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	693a      	ldr	r2, [r7, #16]
 8002972:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	697a      	ldr	r2, [r7, #20]
 8002978:	621a      	str	r2, [r3, #32]
}
 800297a:	bf00      	nop
 800297c:	371c      	adds	r7, #28
 800297e:	46bd      	mov	sp, r7
 8002980:	bc80      	pop	{r7}
 8002982:	4770      	bx	lr

08002984 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002984:	b480      	push	{r7}
 8002986:	b087      	sub	sp, #28
 8002988:	af00      	add	r7, sp, #0
 800298a:	60f8      	str	r0, [r7, #12]
 800298c:	60b9      	str	r1, [r7, #8]
 800298e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	6a1b      	ldr	r3, [r3, #32]
 8002994:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	6a1b      	ldr	r3, [r3, #32]
 800299a:	f023 0210 	bic.w	r2, r3, #16
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	699b      	ldr	r3, [r3, #24]
 80029a6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80029a8:	693b      	ldr	r3, [r7, #16]
 80029aa:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80029ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	031b      	lsls	r3, r3, #12
 80029b4:	693a      	ldr	r2, [r7, #16]
 80029b6:	4313      	orrs	r3, r2
 80029b8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80029ba:	697b      	ldr	r3, [r7, #20]
 80029bc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80029c0:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80029c2:	68bb      	ldr	r3, [r7, #8]
 80029c4:	011b      	lsls	r3, r3, #4
 80029c6:	697a      	ldr	r2, [r7, #20]
 80029c8:	4313      	orrs	r3, r2
 80029ca:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	693a      	ldr	r2, [r7, #16]
 80029d0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	697a      	ldr	r2, [r7, #20]
 80029d6:	621a      	str	r2, [r3, #32]
}
 80029d8:	bf00      	nop
 80029da:	371c      	adds	r7, #28
 80029dc:	46bd      	mov	sp, r7
 80029de:	bc80      	pop	{r7}
 80029e0:	4770      	bx	lr

080029e2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80029e2:	b480      	push	{r7}
 80029e4:	b085      	sub	sp, #20
 80029e6:	af00      	add	r7, sp, #0
 80029e8:	6078      	str	r0, [r7, #4]
 80029ea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	689b      	ldr	r3, [r3, #8]
 80029f0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029f8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80029fa:	683a      	ldr	r2, [r7, #0]
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	4313      	orrs	r3, r2
 8002a00:	f043 0307 	orr.w	r3, r3, #7
 8002a04:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	68fa      	ldr	r2, [r7, #12]
 8002a0a:	609a      	str	r2, [r3, #8]
}
 8002a0c:	bf00      	nop
 8002a0e:	3714      	adds	r7, #20
 8002a10:	46bd      	mov	sp, r7
 8002a12:	bc80      	pop	{r7}
 8002a14:	4770      	bx	lr

08002a16 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002a16:	b480      	push	{r7}
 8002a18:	b087      	sub	sp, #28
 8002a1a:	af00      	add	r7, sp, #0
 8002a1c:	60f8      	str	r0, [r7, #12]
 8002a1e:	60b9      	str	r1, [r7, #8]
 8002a20:	607a      	str	r2, [r7, #4]
 8002a22:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	689b      	ldr	r3, [r3, #8]
 8002a28:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002a2a:	697b      	ldr	r3, [r7, #20]
 8002a2c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002a30:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	021a      	lsls	r2, r3, #8
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	431a      	orrs	r2, r3
 8002a3a:	68bb      	ldr	r3, [r7, #8]
 8002a3c:	4313      	orrs	r3, r2
 8002a3e:	697a      	ldr	r2, [r7, #20]
 8002a40:	4313      	orrs	r3, r2
 8002a42:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	697a      	ldr	r2, [r7, #20]
 8002a48:	609a      	str	r2, [r3, #8]
}
 8002a4a:	bf00      	nop
 8002a4c:	371c      	adds	r7, #28
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	bc80      	pop	{r7}
 8002a52:	4770      	bx	lr

08002a54 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002a54:	b480      	push	{r7}
 8002a56:	b085      	sub	sp, #20
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
 8002a5c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a64:	2b01      	cmp	r3, #1
 8002a66:	d101      	bne.n	8002a6c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002a68:	2302      	movs	r3, #2
 8002a6a:	e041      	b.n	8002af0 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2201      	movs	r2, #1
 8002a70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2202      	movs	r2, #2
 8002a78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	685b      	ldr	r3, [r3, #4]
 8002a82:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	689b      	ldr	r3, [r3, #8]
 8002a8a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a92:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	68fa      	ldr	r2, [r7, #12]
 8002a9a:	4313      	orrs	r3, r2
 8002a9c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	68fa      	ldr	r2, [r7, #12]
 8002aa4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4a14      	ldr	r2, [pc, #80]	; (8002afc <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002aac:	4293      	cmp	r3, r2
 8002aae:	d009      	beq.n	8002ac4 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ab8:	d004      	beq.n	8002ac4 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	4a10      	ldr	r2, [pc, #64]	; (8002b00 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002ac0:	4293      	cmp	r3, r2
 8002ac2:	d10c      	bne.n	8002ade <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002ac4:	68bb      	ldr	r3, [r7, #8]
 8002ac6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002aca:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	685b      	ldr	r3, [r3, #4]
 8002ad0:	68ba      	ldr	r2, [r7, #8]
 8002ad2:	4313      	orrs	r3, r2
 8002ad4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	68ba      	ldr	r2, [r7, #8]
 8002adc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2201      	movs	r2, #1
 8002ae2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2200      	movs	r2, #0
 8002aea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002aee:	2300      	movs	r3, #0
}
 8002af0:	4618      	mov	r0, r3
 8002af2:	3714      	adds	r7, #20
 8002af4:	46bd      	mov	sp, r7
 8002af6:	bc80      	pop	{r7}
 8002af8:	4770      	bx	lr
 8002afa:	bf00      	nop
 8002afc:	40012c00 	.word	0x40012c00
 8002b00:	40000400 	.word	0x40000400

08002b04 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002b04:	b480      	push	{r7}
 8002b06:	b083      	sub	sp, #12
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002b0c:	bf00      	nop
 8002b0e:	370c      	adds	r7, #12
 8002b10:	46bd      	mov	sp, r7
 8002b12:	bc80      	pop	{r7}
 8002b14:	4770      	bx	lr

08002b16 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002b16:	b480      	push	{r7}
 8002b18:	b083      	sub	sp, #12
 8002b1a:	af00      	add	r7, sp, #0
 8002b1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002b1e:	bf00      	nop
 8002b20:	370c      	adds	r7, #12
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bc80      	pop	{r7}
 8002b26:	4770      	bx	lr

08002b28 <__libc_init_array>:
 8002b28:	b570      	push	{r4, r5, r6, lr}
 8002b2a:	2600      	movs	r6, #0
 8002b2c:	4d0c      	ldr	r5, [pc, #48]	; (8002b60 <__libc_init_array+0x38>)
 8002b2e:	4c0d      	ldr	r4, [pc, #52]	; (8002b64 <__libc_init_array+0x3c>)
 8002b30:	1b64      	subs	r4, r4, r5
 8002b32:	10a4      	asrs	r4, r4, #2
 8002b34:	42a6      	cmp	r6, r4
 8002b36:	d109      	bne.n	8002b4c <__libc_init_array+0x24>
 8002b38:	f000 f822 	bl	8002b80 <_init>
 8002b3c:	2600      	movs	r6, #0
 8002b3e:	4d0a      	ldr	r5, [pc, #40]	; (8002b68 <__libc_init_array+0x40>)
 8002b40:	4c0a      	ldr	r4, [pc, #40]	; (8002b6c <__libc_init_array+0x44>)
 8002b42:	1b64      	subs	r4, r4, r5
 8002b44:	10a4      	asrs	r4, r4, #2
 8002b46:	42a6      	cmp	r6, r4
 8002b48:	d105      	bne.n	8002b56 <__libc_init_array+0x2e>
 8002b4a:	bd70      	pop	{r4, r5, r6, pc}
 8002b4c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b50:	4798      	blx	r3
 8002b52:	3601      	adds	r6, #1
 8002b54:	e7ee      	b.n	8002b34 <__libc_init_array+0xc>
 8002b56:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b5a:	4798      	blx	r3
 8002b5c:	3601      	adds	r6, #1
 8002b5e:	e7f2      	b.n	8002b46 <__libc_init_array+0x1e>
 8002b60:	08002bc4 	.word	0x08002bc4
 8002b64:	08002bc4 	.word	0x08002bc4
 8002b68:	08002bc4 	.word	0x08002bc4
 8002b6c:	08002bc8 	.word	0x08002bc8

08002b70 <memset>:
 8002b70:	4603      	mov	r3, r0
 8002b72:	4402      	add	r2, r0
 8002b74:	4293      	cmp	r3, r2
 8002b76:	d100      	bne.n	8002b7a <memset+0xa>
 8002b78:	4770      	bx	lr
 8002b7a:	f803 1b01 	strb.w	r1, [r3], #1
 8002b7e:	e7f9      	b.n	8002b74 <memset+0x4>

08002b80 <_init>:
 8002b80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b82:	bf00      	nop
 8002b84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b86:	bc08      	pop	{r3}
 8002b88:	469e      	mov	lr, r3
 8002b8a:	4770      	bx	lr

08002b8c <_fini>:
 8002b8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b8e:	bf00      	nop
 8002b90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b92:	bc08      	pop	{r3}
 8002b94:	469e      	mov	lr, r3
 8002b96:	4770      	bx	lr
